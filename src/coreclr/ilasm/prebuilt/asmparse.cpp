/* original parser id follows */
/* yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93" */
/* (use YYMAJOR/YYMINOR for ifdefs dependent on parser version) */

#define YYBYACC 1
#define YYMAJOR 2
#define YYMINOR 0
#define YYPATCH 20220114

#define YYEMPTY        (-1)
#define yyclearin      (yychar = YYEMPTY)
#define yyerrok        (yyerrflag = 0)
#define YYRECOVERING() (yyerrflag != 0)
#define YYENOMEM       (-2)
#define YYEOF          0
#undef YYBTYACC
#define YYBTYACC 0
#define YYDEBUGSTR YYPREFIX "debug"
#define YYPREFIX "yy"

#define YYPURE 0

#line 1 "asmparse.y"


/* Licensed to the .NET Foundation under one or more agreements.*/
/* The .NET Foundation licenses this file to you under the MIT license.*/

/**/
/* File asmparse.y*/
/**/
#include "ilasmpch.h"

#include "grammar_before.cpp"

#ifdef YYSTYPE
#undef  YYSTYPE_IS_DECLARED
#define YYSTYPE_IS_DECLARED 1
#endif
#ifndef YYSTYPE_IS_DECLARED
#define YYSTYPE_IS_DECLARED 1
#line 15 "asmparse.y"
typedef union YYSTYPE {
        CorRegTypeAttr classAttr;
        CorMethodAttr methAttr;
        CorFieldAttr fieldAttr;
        CorMethodImpl implAttr;
        CorEventAttr  eventAttr;
        CorPropertyAttr propAttr;
        CorPinvokeMap pinvAttr;
        CorDeclSecurity secAct;
        CorFileFlags fileAttr;
        CorAssemblyFlags asmAttr;
        CorAssemblyFlags asmRefAttr;
        CorTypeAttr exptAttr;
        CorManifestResourceFlags manresAttr;
        double*  float64;
        __int64* int64;
        __int32  int32;
        char*    string;
        BinStr*  binstr;
        Labels*  labels;
        Instr*   instr;         /* instruction opcode*/
        NVPair*  pair;
        pTyParList typarlist;
        mdToken token;
        TypeDefDescr* tdd;
        CustomDescr*  cad;
        unsigned short opcode;
} YYSTYPE;
#endif /* !YYSTYPE_IS_DECLARED */
#line 73 "asmparse.cpp"

/* compatibility with bison */
#ifdef YYPARSE_PARAM
/* compatibility with FreeBSD */
# ifdef YYPARSE_PARAM_TYPE
#  define YYPARSE_DECL() yyparse(YYPARSE_PARAM_TYPE YYPARSE_PARAM)
# else
#  define YYPARSE_DECL() yyparse(void *YYPARSE_PARAM)
# endif
#else
# define YYPARSE_DECL() yyparse(void)
#endif

/* Parameters sent to lex. */
#ifdef YYLEX_PARAM
# define YYLEX_DECL() yylex(void *YYLEX_PARAM)
# define YYLEX yylex(YYLEX_PARAM)
#else
# define YYLEX_DECL() yylex(void)
# define YYLEX yylex()
#endif

#if !(defined(yylex) || defined(YYSTATE))
int YYLEX_DECL();
#endif

/* Parameters sent to yyerror. */
#ifndef YYERROR_DECL
#define YYERROR_DECL() yyerror(const char *s)
#endif
#ifndef YYERROR_CALL
#define YYERROR_CALL(msg) yyerror(msg)
#endif

extern int YYPARSE_DECL();

#define ERROR_ 257
#define BAD_COMMENT_ 258
#define BAD_LITERAL_ 259
#define ID 260
#define DOTTEDNAME 261
#define QSTRING 262
#define SQSTRING 263
#define INT32 264
#define INT64 265
#define FLOAT64 266
#define HEXBYTE 267
#define TYPEDEF_T 268
#define TYPEDEF_M 269
#define TYPEDEF_F 270
#define TYPEDEF_TS 271
#define TYPEDEF_MR 272
#define TYPEDEF_CA 273
#define DCOLON 274
#define ELLIPSIS 275
#define VOID_ 276
#define BOOL_ 277
#define CHAR_ 278
#define UNSIGNED_ 279
#define INT_ 280
#define INT8_ 281
#define INT16_ 282
#define INT32_ 283
#define INT64_ 284
#define FLOAT_ 285
#define FLOAT32_ 286
#define FLOAT64_ 287
#define BYTEARRAY_ 288
#define UINT_ 289
#define UINT8_ 290
#define UINT16_ 291
#define UINT32_ 292
#define UINT64_ 293
#define FLAGS_ 294
#define CALLCONV_ 295
#define MDTOKEN_ 296
#define OBJECT_ 297
#define STRING_ 298
#define NULLREF_ 299
#define DEFAULT_ 300
#define CDECL_ 301
#define VARARG_ 302
#define STDCALL_ 303
#define THISCALL_ 304
#define FASTCALL_ 305
#define CLASS_ 306
#define BYREFLIKE_ 307
#define TYPEDREF_ 308
#define UNMANAGED_ 309
#define FINALLY_ 310
#define HANDLER_ 311
#define CATCH_ 312
#define FILTER_ 313
#define FAULT_ 314
#define EXTENDS_ 315
#define IMPLEMENTS_ 316
#define TO_ 317
#define AT_ 318
#define TLS_ 319
#define TRUE_ 320
#define FALSE_ 321
#define _INTERFACEIMPL 322
#define VALUE_ 323
#define VALUETYPE_ 324
#define NATIVE_ 325
#define INSTANCE_ 326
#define SPECIALNAME_ 327
#define FORWARDER_ 328
#define STATIC_ 329
#define PUBLIC_ 330
#define PRIVATE_ 331
#define FAMILY_ 332
#define FINAL_ 333
#define SYNCHRONIZED_ 334
#define INTERFACE_ 335
#define SEALED_ 336
#define NESTED_ 337
#define ABSTRACT_ 338
#define AUTO_ 339
#define SEQUENTIAL_ 340
#define EXPLICIT_ 341
#define ANSI_ 342
#define UNICODE_ 343
#define AUTOCHAR_ 344
#define IMPORT_ 345
#define ENUM_ 346
#define VIRTUAL_ 347
#define NOINLINING_ 348
#define AGGRESSIVEINLINING_ 349
#define NOOPTIMIZATION_ 350
#define AGGRESSIVEOPTIMIZATION_ 351
#define UNMANAGEDEXP_ 352
#define BEFOREFIELDINIT_ 353
#define STRICT_ 354
#define RETARGETABLE_ 355
#define WINDOWSRUNTIME_ 356
#define NOPLATFORM_ 357
#define METHOD_ 358
#define FIELD_ 359
#define PINNED_ 360
#define MODREQ_ 361
#define MODOPT_ 362
#define SERIALIZABLE_ 363
#define PROPERTY_ 364
#define TYPE_ 365
#define ASSEMBLY_ 366
#define FAMANDASSEM_ 367
#define FAMORASSEM_ 368
#define PRIVATESCOPE_ 369
#define HIDEBYSIG_ 370
#define NEWSLOT_ 371
#define RTSPECIALNAME_ 372
#define PINVOKEIMPL_ 373
#define _CTOR 374
#define _CCTOR 375
#define LITERAL_ 376
#define NOTSERIALIZED_ 377
#define INITONLY_ 378
#define REQSECOBJ_ 379
#define CIL_ 380
#define OPTIL_ 381
#define MANAGED_ 382
#define FORWARDREF_ 383
#define PRESERVESIG_ 384
#define RUNTIME_ 385
#define INTERNALCALL_ 386
#define _IMPORT 387
#define NOMANGLE_ 388
#define LASTERR_ 389
#define WINAPI_ 390
#define AS_ 391
#define BESTFIT_ 392
#define ON_ 393
#define OFF_ 394
#define CHARMAPERROR_ 395
#define INSTR_NONE 396
#define INSTR_VAR 397
#define INSTR_I 398
#define INSTR_I8 399
#define INSTR_R 400
#define INSTR_BRTARGET 401
#define INSTR_METHOD 402
#define INSTR_FIELD 403
#define INSTR_TYPE 404
#define INSTR_STRING 405
#define INSTR_SIG 406
#define INSTR_TOK 407
#define INSTR_SWITCH 408
#define _CLASS 409
#define _NAMESPACE 410
#define _METHOD 411
#define _FIELD 412
#define _DATA 413
#define _THIS 414
#define _BASE 415
#define _NESTER 416
#define _EMITBYTE 417
#define _TRY 418
#define _MAXSTACK 419
#define _LOCALS 420
#define _ENTRYPOINT 421
#define _ZEROINIT 422
#define _EVENT 423
#define _ADDON 424
#define _REMOVEON 425
#define _FIRE 426
#define _OTHER 427
#define _PROPERTY 428
#define _SET 429
#define _GET 430
#define _PERMISSION 431
#define _PERMISSIONSET 432
#define REQUEST_ 433
#define DEMAND_ 434
#define ASSERT_ 435
#define DENY_ 436
#define PERMITONLY_ 437
#define LINKCHECK_ 438
#define INHERITCHECK_ 439
#define REQMIN_ 440
#define REQOPT_ 441
#define REQREFUSE_ 442
#define PREJITGRANT_ 443
#define PREJITDENY_ 444
#define NONCASDEMAND_ 445
#define NONCASLINKDEMAND_ 446
#define NONCASINHERITANCE_ 447
#define _LINE 448
#define P_LINE 449
#define _LANGUAGE 450
#define _CUSTOM 451
#define INIT_ 452
#define _SIZE 453
#define _PACK 454
#define _VTABLE 455
#define _VTFIXUP 456
#define FROMUNMANAGED_ 457
#define CALLMOSTDERIVED_ 458
#define _VTENTRY 459
#define RETAINAPPDOMAIN_ 460
#define _FILE 461
#define NOMETADATA_ 462
#define _HASH 463
#define _ASSEMBLY 464
#define _PUBLICKEY 465
#define _PUBLICKEYTOKEN 466
#define ALGORITHM_ 467
#define _VER 468
#define _LOCALE 469
#define EXTERN_ 470
#define _MRESOURCE 471
#define _MODULE 472
#define _EXPORT 473
#define LEGACY_ 474
#define LIBRARY_ 475
#define X86_ 476
#define AMD64_ 477
#define ARM_ 478
#define ARM64_ 479
#define MARSHAL_ 480
#define CUSTOM_ 481
#define SYSSTRING_ 482
#define FIXED_ 483
#define VARIANT_ 484
#define CURRENCY_ 485
#define SYSCHAR_ 486
#define DECIMAL_ 487
#define DATE_ 488
#define BSTR_ 489
#define TBSTR_ 490
#define LPSTR_ 491
#define LPWSTR_ 492
#define LPTSTR_ 493
#define OBJECTREF_ 494
#define IUNKNOWN_ 495
#define IDISPATCH_ 496
#define STRUCT_ 497
#define SAFEARRAY_ 498
#define BYVALSTR_ 499
#define LPVOID_ 500
#define ANY_ 501
#define ARRAY_ 502
#define LPSTRUCT_ 503
#define IIDPARAM_ 504
#define IN_ 505
#define OUT_ 506
#define OPT_ 507
#define _PARAM 508
#define _OVERRIDE 509
#define WITH_ 510
#define NULL_ 511
#define HRESULT_ 512
#define CARRAY_ 513
#define USERDEFINED_ 514
#define RECORD_ 515
#define FILETIME_ 516
#define BLOB_ 517
#define STREAM_ 518
#define STORAGE_ 519
#define STREAMED_OBJECT_ 520
#define STORED_OBJECT_ 521
#define BLOB_OBJECT_ 522
#define CF_ 523
#define CLSID_ 524
#define VECTOR_ 525
#define _SUBSYSTEM 526
#define _CORFLAGS 527
#define ALIGNMENT_ 528
#define _IMAGEBASE 529
#define _STACKRESERVE 530
#define _TYPEDEF 531
#define _TEMPLATE 532
#define _TYPELIST 533
#define _MSCORLIB 534
#define P_DEFINE 535
#define P_UNDEF 536
#define P_IFDEF 537
#define P_IFNDEF 538
#define P_ELSE 539
#define P_ENDIF 540
#define P_INCLUDE 541
#define CONSTRAINT_ 542
#define YYERRCODE 256
typedef int YYINT;
static const YYINT yylhs[] = {                           -1,
    0,    0,  112,  112,  112,  112,  112,  112,  112,  112,
  112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
  112,  112,  112,  112,  112,  112,  112,  112,  138,  138,
   38,   38,  135,  135,  135,    2,    2,    1,    1,    1,
    9,   26,   26,   25,   25,   25,  136,  136,  136,  136,
  136,  137,  137,  137,  137,  137,  137,  137,  137,  137,
   96,   96,   96,   96,   97,   97,   97,   97,   10,   11,
   76,   75,   75,   62,   64,   64,   64,   65,   65,   65,
   68,   68,  134,  134,  134,   63,   63,   63,   63,   63,
   63,  132,  132,  132,  121,   12,   12,   12,   12,   12,
   12,  120,  139,  115,  140,  141,  113,   80,   80,   80,
   80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
   80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
   80,   80,   80,   80,  142,  142,  143,  143,  114,  114,
  144,  144,   59,   59,   60,   60,   72,   72,   18,   18,
   18,   18,   18,   18,   18,   19,   19,   20,   21,   21,
   71,   71,   71,   71,   70,   70,   61,   23,   23,   24,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  118,   82,   82,   82,   82,   82,   82,   82,   82,
   82,   82,   82,   82,   82,   82,   82,   82,    4,    4,
   37,   37,   16,   16,   78,   78,   78,   78,   78,   78,
   78,    7,    7,    7,    7,    8,    8,    8,    8,    8,
    8,    8,    8,   79,   77,   77,   77,   77,   77,   77,
  146,  146,   84,   84,   84,  147,  147,  152,  152,  152,
  152,  152,  152,  152,  152,  148,   85,   85,   85,  149,
  149,  153,  153,  153,  153,  153,  153,  153,  154,   40,
   40,   36,   36,  155,  116,   81,   81,   81,   81,   81,
   81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
   81,   81,   81,   81,   81,   81,   81,   81,   86,   86,
   86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
   86,   86,   86,   86,    3,    3,    3,   13,   13,   13,
   13,   13,   83,   83,   83,   83,   83,   83,   83,   83,
   83,   83,   83,   83,   83,   83,   83,   83,  156,  117,
  117,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  160,  161,  158,
  163,  163,  162,  162,  162,  165,  164,  164,  164,  164,
  168,  168,  168,  171,  166,  169,  170,  167,  167,  167,
  119,  172,  172,  174,  174,  174,  173,  173,  175,  175,
   14,   14,  176,  176,  176,  176,  176,  176,  176,  176,
  176,  176,  176,  176,  176,  176,  176,   43,   43,   43,
   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
   43,   43,   43,   43,   43,   43,  177,   33,   33,   34,
   34,   41,   41,   41,   42,   42,   42,   42,   42,   42,
   42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
   42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
   44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
   44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
   45,   45,   45,   46,   46,   46,   50,   50,   49,   49,
   48,   48,   47,   47,   51,   51,   52,   52,   52,   53,
   53,   53,   53,   54,   54,  151,   98,   99,  100,  101,
  102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,    6,    6,    6,    6,    6,   56,   56,
   57,   57,   58,   58,   27,   27,   28,   28,   29,   29,
   29,   73,   73,   73,   73,   73,   73,   73,   73,   73,
   73,    5,    5,   74,   74,   74,   74,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   22,   22,   15,   15,   15,   15,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   15,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   30,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   32,   32,   31,   31,
   31,   31,   31,  133,  133,  133,  133,  133,  133,   67,
   67,   67,   66,   66,   90,   90,   87,   87,   88,   17,
   17,   39,   39,   39,   39,   39,   39,   39,   39,   89,
   89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
   89,   89,   89,   89,  178,  178,  122,  122,  122,  122,
  122,  122,  122,  122,  122,  122,  122,  123,  123,   91,
   91,   92,   92,  179,  124,   93,   93,   93,   93,   93,
   93,   93,   93,   93,   93,  125,  125,  180,  180,  180,
   69,   69,  181,  181,  181,  181,  181,  181,  182,  184,
  183,  126,  126,  127,  127,  185,  185,  185,  185,  128,
  150,   94,   94,   94,   94,   94,   94,   94,   94,   94,
   94,  129,  129,  186,  186,  186,  186,  186,  186,  186,
  130,  130,   95,   95,   95,  131,  131,  187,  187,  187,
  187,
};
static const YYINT yylen[] = {                            2,
    0,    2,    4,    4,    3,    1,    1,    1,    1,    1,
    1,    4,    4,    4,    4,    1,    1,    1,    2,    2,
    3,    2,    2,    1,    1,    1,    4,    1,    0,    2,
    1,    3,    2,    4,    6,    1,    1,    1,    1,    3,
    1,    1,    1,    1,    4,    4,    4,    4,    4,    4,
    4,    2,    3,    2,    2,    2,    1,    1,    2,    1,
    2,    4,    6,    3,    5,    7,    9,    3,    4,    7,
    1,    1,    1,    2,    0,    2,    2,    0,    6,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    3,    2,
    3,    1,    2,    3,    7,    0,    2,    2,    2,    2,
    2,    3,    3,    2,    1,    4,    3,    0,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    3,    3,    3,    3,    3,    3,
    2,    2,    2,    5,    0,    2,    0,    2,    0,    2,
    3,    1,    0,    1,    1,    3,    0,    3,    1,    1,
    1,    1,    1,    1,    4,    0,    2,    4,    0,    2,
    6,    5,    4,    3,    0,    2,    3,    0,    1,    5,
    3,    4,    4,    4,    1,    1,    1,    1,    1,    2,
    2,    4,   13,   22,    1,    1,    5,    3,    7,    5,
    4,    7,    0,    2,    2,    2,    2,    2,    2,    2,
    5,    2,    2,    2,    2,    2,    2,    5,    0,    2,
    0,    2,    0,    3,    9,    9,    7,    7,    1,    1,
    1,    2,    2,    1,    4,    0,    1,    1,    2,    2,
    2,    2,    1,    4,    2,    5,    3,    2,    2,    1,
    4,    3,    0,    2,    2,    0,    2,    2,    2,    2,
    2,    1,    1,    1,    1,    9,    0,    2,    2,    0,
    2,    2,    2,    2,    1,    1,    1,    1,    1,    0,
    4,    1,    3,    1,   13,    0,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    5,    8,    6,    5,    0,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    4,
    4,    4,    4,    5,    1,    1,    1,    0,    4,    4,
    4,    4,    0,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    5,    1,    0,
    2,    2,    1,    2,    4,    5,    1,    1,    1,    1,
    2,    1,    1,    1,    1,    1,    4,    6,    4,    4,
   11,    1,    5,    3,    7,    5,    5,    3,    1,    2,
    2,    1,    2,    4,    4,    1,    2,    2,    2,    2,
    2,    2,    2,    1,    2,    1,    1,    1,    4,    4,
    2,    4,    2,    0,    1,    1,    3,    1,    3,    1,
    0,    3,    5,    4,    3,    5,    5,    5,    5,    5,
    5,    2,    2,    2,    2,    2,    2,    4,    4,    4,
    4,    4,    4,    4,    4,    5,    5,    5,    5,    4,
    4,    4,    4,    4,    4,    3,    2,    0,    1,    1,
    2,    1,    1,    1,    1,    4,    4,    5,    4,    4,
    4,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    7,    8,    8,    8,    8,    7,    7,    7,    7,    7,
    4,    4,    4,    4,    4,    4,    4,    4,    5,    5,
    5,    5,    4,    4,    4,    4,    4,    4,    4,    7,
    0,    2,    2,    0,    2,    2,    0,    2,    0,    2,
    0,    2,    0,    2,    0,    2,    0,    2,    2,    0,
    2,    3,    2,    0,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    1,    2,    2,    2,    2,    2,    2,    3,    2,    2,
    2,    5,    3,    2,    2,    2,    2,    2,    5,    4,
    6,    2,    4,    0,    3,    3,    1,    1,    0,    3,
    0,    1,    1,    3,    0,    1,    1,    3,    1,    3,
    4,    4,    4,    4,    5,    1,    1,    1,    1,    1,
    1,    1,    3,    1,    3,    4,    1,    0,   10,    6,
    5,    6,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    2,    2,    2,    2,    1,    1,
    1,    1,    2,    3,    4,    6,    5,    1,    1,    1,
    1,    1,    1,    1,    2,    2,    1,    2,    2,    4,
    1,    2,    1,    2,    1,    2,    1,    2,    1,    2,
    1,    1,    0,    5,    0,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    2,    2,    2,
    1,    1,    1,    1,    1,    3,    2,    2,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    2,    1,    3,    2,    1,    3,    4,
    2,    2,    2,    5,    5,    7,    4,    3,    2,    3,
    2,    1,    1,    2,    3,    2,    1,    2,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    2,    2,    2,
    2,    1,    1,    1,    1,    1,    1,    3,    0,    1,
    1,    3,    2,    6,    7,    3,    3,    3,    6,    0,
    1,    3,    5,    6,    4,    4,    1,    3,    3,    1,
    1,    1,    1,    4,    1,    6,    6,    6,    4,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    3,    2,    5,    4,
    7,    6,    7,    6,    9,    8,    3,    8,    4,    0,
    2,    0,    1,    3,    3,    0,    2,    2,    2,    3,
    2,    2,    2,    2,    2,    0,    2,    3,    1,    1,
    1,    1,    3,    8,    2,    3,    1,    1,    3,    3,
    3,    4,    6,    0,    2,    3,    1,    3,    1,    4,
    3,    0,    2,    2,    2,    3,    3,    3,    3,    3,
    3,    0,    2,    2,    3,    3,    4,    2,    1,    1,
    3,    5,    0,    2,    2,    0,    2,    4,    3,    1,
    1,
};
static const YYINT yydefred[] = {                         1,
    0,   85,    0,    0,  269,    0,    0,    0,    0,  785,
  786,    0,    0,    0,    0,    0,    0,  863,    0,    0,
    0,    0,    0,    0,    0,   28,    0,    0,    0,    0,
   57,   58,    0,   60,    0,    0,    0,   83,   84,    2,
    0,    0,  340,    6,    7,    8,    9,   10,   11,    0,
    0,    0,    0,   16,   17,   18,   24,   25,   26,    0,
  108,    0,  276,    0,    0,  842,   36,   39,   37,    0,
   38,    0,  193,  395,  396,    0,  770,  771,  772,  773,
  774,  775,  776,  777,  778,  779,  780,  781,  782,  783,
  784,    0,    0,    0,  220,  221,    0,    0,  227,  228,
    0,    0,    0,    0,    0,  224,    0,   71,  219,    0,
    0,    0,    0,  806,    0,    0,    0,    0,   41,   19,
   20,   43,   42,   22,   23,  578,  736,    0,  713,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  695,    0,    0,  712,    0,    0,    0,  516,
    0,  579,  580,  581,    0,    0,    0,    0,    0,  698,
  717,    0,    0,  240,    0,    0,    0,    0,    0,    0,
    0,    0,   59,  440,    0,    0,    0,    0,  139,    1,
    0,  816,  834,  852,  866,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  391,  398,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  584,    0,  577,    0,   31,    0,    0,    0,    0,
    0,    0,  229,  230,  231,  232,  222,  223,   72,    0,
   73,    0,    0,  103,    0,   21,  801,    0,    0,  807,
  808,  809,  811,    0,  812,  813,  814,  815,    0,  864,
  865,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  694,    0,    0,    0,  714,  716,  238,  239,    0,
    0,    0,    0,    0,    0,    0,  709,    0,  703,    0,
    0,    0,    0,    0,  702,  701,    0,    0,    0,    0,
    0,  235,    0,    0,    0,   64,  441,   68,  747,    0,
    0,  517,  518,  519,  520,  521,  522,  523,  524,  525,
  526,  527,  528,  529,    0,  376,    0,  339,  347,  348,
    0,    0,    0,    0,  369,    5,    0,  531,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  349,  353,  352,  355,  354,  356,    0,  341,  343,
  350,  362,  340,    0,    0,    0,    0,    0,    0,  102,
    0,  111,  132,  109,  110,  113,  114,    0,  115,  116,
  117,  118,  119,  120,  121,  122,  112,  131,  124,  123,
  133,    0,  136,    0,  107,    0,  282,  277,  278,  279,
  280,  281,  285,  283,  293,  284,  286,  287,  288,  289,
  290,  291,  292,    0,  294,  318,    0,    0,    0,  417,
    0,  416,    0,  415,    0,  414,    0,  412,    0,  413,
  437,    0,    0,    0,    0,  797,  787,    0,    0,  845,
  844,  843,    0,    0,    0,  214,    0,  200,  194,  195,
  196,  197,  202,  203,  204,  205,  199,  206,  207,  198,
    0,    0,  392,    0,    0,    0,    0,    0,  756,    0,
  755,    0,    0,    0,    0,    0,  315,  316,    0,    0,
    0,    0,   75,   69,    0,   96,  803,    0,    0,  810,
    0,  760,  761,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   44,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  696,    0,  715,    0,    0,
    0,    0,    0,    0,    0,  708,    0,    0,    0,    0,
  740,  699,    0,  737,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   30,   27,    0,  105,  243,  257,    0,
    0,  842,    0,    0,    3,    0,  340,  175,  176,  178,
  177,  179,  185,  186,  140,    0,    0,    0,    4,  342,
  344,    0,    0,    0,    0,    0,    0,    0,  351,  533,
  532,  534,  535,  530,  536,  537,  540,  539,  541,  545,
  546,    0,  544,  547,    0,    0,    0,    0,  552,    0,
    0,    0,    0,    0,  386,    0,  384,  387,  370,    0,
    0,    0,    0,    0,    0,    0,    0,  373,    0,    0,
    0,    0,   12,  819,  827,  828,  817,  820,    0,    0,
  839,    0,    0,   13,    0,  837,    0,  835,    0,    0,
    0,    0,   14,  859,  860,  853,    0,    0,   15,  870,
  871,  867,    0,  125,  126,  127,  128,  129,  130,    0,
  106,  142,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  397,    0,    0,  405,    0,    0,
  846,  847,  848,  849,  850,  851,    0,    0,    0,    0,
    0,    0,    0,    0,   75,    0,    0,    0,    0,    0,
   32,    0,  225,  234,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  488,  487,    0,    0,    0,
    0,  478,  477,  476,  475,    0,    0,  473,  471,  472,
  474,  486,  485,  484,  483,  489,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  700,  707,    0,    0,
    0,    0,    0,  180,  181,    0,    0,    0,    0,    0,
  139,    0,  246,  260,  852,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  538,    0,  569,    0,    0,    0,  567,  368,
  385,  371,    0,  388,  377,  378,  379,  380,  382,  383,
  381,    0,    0,    0,    0,  822,  821,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  858,    0,
    0,    0,    0,    0,    0,  151,  153,  152,  154,    0,
  149,  150,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  402,    0,    0,    0,    0,    0,  399,
  404,    0,  789,    0,    0,  604,  642,  596,  597,    0,
  631,  598,  599,  600,  601,  602,  603,  633,  609,  610,
  611,  612,    0,    0,    0,  639,    0,    0,    0,    0,
  594,  595,  618,  619,  620,  637,  621,  622,  623,  624,
    0,    0,  627,    0,  635,  641,  274,    0,    0,    0,
    0,    0,    0,    0,  744,    0,    0,    0,    0,  749,
    0,   35,    0,    0,    0,    0,    0,    0,    0,   63,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   76,  445,    0,   77,
    0,   97,   98,    0,   99,  100,  101,    0,    0,  482,
  481,  480,  479,    0,    0,    0,    0,    0,  704,  705,
  742,  738,    0,    0,    0,  245,  244,    0,    0,  259,
  258,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  171,    0,    0,    0,  359,    0,    0,    0,    0,    0,
    0,  360,    0,    0,  550,    0,    0,  553,    0,    0,
    0,  345,    0,    0,    0,  374,  375,  818,  829,    0,
  831,  823,  826,  804,  830,  836,  838,    0,    0,    0,
    0,    0,  134,    0,    0,    0,    0,  157,    0,    0,
    0,  148,  141,  295,    0,    0,    0,  306,  307,  308,
  309,  301,  302,  303,  300,  304,  305,    0,    0,  298,
    0,    0,    0,    0,    0,    0,  403,  411,  410,  409,
  408,  406,  407,    0,    0,  208,  632,  605,  606,  607,
  608,    0,  628,  634,  636,  640,    0,    0,    0,  638,
  625,  626,  680,  649,  650,    0,  677,  651,  652,  653,
  654,  655,  656,  679,  661,  662,  663,  664,  647,  648,
  669,  670,  671,  672,  673,  674,  675,  676,  646,  681,
  682,  683,  684,  685,  686,  687,  688,  689,  690,  691,
  692,  693,  665,    0,    0,  613,  201,    0,  210,    0,
  192,    0,  763,  762,    0,  759,    0,  758,  745,    0,
  752,   78,   75,   70,    0,    0,  560,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   81,   82,    0,   80,    0,
   95,    0,   45,   46,    0,    0,    0,  191,    0,    0,
    0,    0,    0,    0,    0,  172,    0,    0,    0,    0,
  173,  252,  253,  254,  255,  247,    0,    0,    0,  174,
  266,  265,  267,  268,  261,  182,    0,  363,    0,  366,
  367,    0,    0,  549,    0,  555,  556,  346,    0,  568,
    0,    0,    0,  857,  868,    0,    0,  160,    0,    0,
    0,  145,    0,  164,    0,    0,  297,    0,    0,    0,
  319,  320,  321,  322,    0,    0,  793,    0,  791,    0,
    0,    0,    0,  678,  657,  658,  659,  660,  667,    0,
    0,  668,    0,  614,    0,  273,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  444,
    0,  212,  442,    0,    0,   78,    0,    0,    0,  218,
  217,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  721,  719,    0,  722,
  723,  724,  725,  726,  727,  732,  733,  734,  735,   88,
  720,    0,   87,   86,    0,  436,  798,  490,  706,    0,
  187,    0,  190,    0,    0,  248,  249,  250,  251,  264,
  262,  263,  358,    0,    0,  551,  571,  389,  390,    0,
  155,    0,    0,    0,  167,    0,  166,  163,    0,    0,
  310,  311,  312,  313,    0,    0,    0,    0,    0,    0,
    0,    0,  666,    0,    0,  615,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  753,   67,  170,    0,
    0,  435,    0,  434,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  425,    0,  424,    0,  423,    0,  422,
    0,  420,  418,    0,  419,  421,    0,  433,    0,  432,
    0,  431,    0,  430,    0,  451,    0,  447,  446,    0,
  450,    0,  449,    0,  728,  729,  730,  731,    0,   90,
    0,    0,    0,    0,    0,    0,  365,    0,    0,  158,
  162,    0,  146,  296,  314,  271,    0,  795,    0,    0,
  591,    0,  617,    0,  764,    0,    0,    0,  769,  754,
  216,  215,  505,  501,  429,    0,  428,    0,  427,    0,
  426,    0,  503,  501,  499,  497,  491,  494,  503,  501,
  499,  497,  514,  507,  448,  510,   89,   91,    0,    0,
  189,    0,    0,    0,    0,  169,    0,  161,    0,  644,
    0,  590,    0,  616,    0,    0,    0,    0,    0,  503,
  501,  499,  497,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   79,    0,    0,    0,
    0,  824,  323,    0,  766,  767,  768,  467,  506,  466,
  502,    0,    0,    0,    0,  457,  504,  456,  455,  500,
  454,  498,  452,  493,  492,  453,  495,  496,  461,  460,
  459,  458,  470,  515,  509,  508,  468,  511,    0,  469,
  513,  256,    0,    0,    0,    0,    0,  465,  464,  463,
  462,  512,    0,    0,  361,    0,  328,  324,  333,  334,
  335,  336,  337,  325,  326,  327,  329,  330,  331,  332,
  275,    0,    0,    0,    0,  589,    0,    0,    0,    0,
  183,  338,    0,    0,    0,    0,    0,    0,    0,    0,
  184,
};
#if defined(YYDESTRUCT_CALL) || defined(YYSTYPE_TOSTRING)
static const YYINT yystos[] = {                           0,
  544,  273,  409,  410,  411,  412,  413,  431,  432,  448,
  449,  450,  451,  455,  456,  461,  464,  471,  472,  526,
  527,  529,  530,  531,  533,  534,  535,  536,  537,  538,
  539,  540,  541,   59,  554,  555,  634,  640,  641,  656,
  657,  659,  660,  662,  663,  664,  665,  666,  667,  668,
  670,  672,  674,  676,  677,  678,  679,  680,  681,  683,
  684,  685,  698,  716,  722,  470,  260,  261,  263,  545,
  546,   91,  560,  319,  380,  718,  433,  434,  435,  436,
  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,
  447,  633,  633,  263,  269,  272,  295,  296,  300,  302,
  309,  326,  341,   40,  551,  552,  620,  622,  623,   61,
   91,  528,  635,  470,  637,  639,  470,  545,  264,  553,
  553,  264,  265,  570,  570,  268,  271,  275,  276,  277,
  278,  279,  281,  282,  283,  284,  286,  287,  290,  291,
  292,  293,  297,  298,  306,  308,  323,  324,  325,  358,
  359,  414,  415,  416,   91,   33,  545,  549,  574,  588,
  599,  617,  621,  623,  640,  641,  695,  123,  545,  545,
  545,  545,  262,  267,  577,  578,  577,  577,  123,  123,
  661,  123,  123,  123,  123,  577,  624,  315,  686,  625,
  278,  281,  282,  283,  284,  286,  287,  288,  123,   38,
  717,  720,  721,  553,  638,   46,  553,  626,  546,   91,
  574,  617,  618,  623,  695,  262,  288,   61,  582,   44,
   40,   40,  301,  303,  304,  305,  551,  551,  618,  619,
  621,  574,   61,   40,  553,  553,  462,  545,  637,  355,
  356,  357,  380,  474,  476,  477,  478,  479,  545,  330,
  331,  545,  545,  574,   40,   40,  281,  282,  283,  284,
   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
   40,  617,  306,  617,  279,  280,  289,  270,  272,  574,
  472,   42,  545,  623,   33,  545,  553,   47,  360,  361,
  362,  391,   91,   60,   42,   38,  391,  391,  391,  391,
  551,  622,  617,  682,  582,   41,  267,   41,   41,  658,
  544,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  417,  418,  419,  420,  421,  422,
  459,  473,  508,  509,  123,  125,  546,  642,  643,  644,
  645,  646,  647,  648,  649,  650,  651,  652,  653,  654,
  655,  663,  666,  677,  678,  679,  681,  700,  701,  702,
  703,  704,  705,  706,  709,  669,  671,  673,  675,   41,
  294,  323,  327,  330,  331,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,  353,  356,  363,
  372,  545,  618,  316,  687,  294,  327,  329,  330,  331,
  332,  333,  338,  347,  352,  354,  366,  367,  368,  369,
  370,  371,  372,  373,  379,  551,   42,   40,   91,  558,
   40,  558,   40,  558,   40,  558,   40,  558,   40,  558,
   40,  719,  720,   40,  577,  262,  263,   44,   58,  328,
  330,  331,  337,  545,  545,   93,  294,  327,  329,  330,
  331,  332,  366,  367,  368,  369,  372,  376,  377,  378,
  480,  574,   61,  472,  545,   40,   61,  551,   40,  123,
   40,   43,  263,  553,  553,   41,  374,  375,   91,  545,
  547,  618,  123,   40,  582,   93,  421,  636,  545,  475,
  391,  320,  321,  561,  553,   40,   40,   40,   40,  553,
  553,  553,  570,  266,  286,  287,  553,  569,  569,  570,
  553,  553,  553,  570,  582,  617,   40,  280,  545,  618,
  545,   93,   93,   93,  545,  553,  545,   40,   40,  545,
  275,   93,  553,  575,  576,  574,  601,  602,  545,  545,
  545,  545,  574,  682,  125,  322,  409,  423,  428,  453,
  454,  473,  508,  509,  125,  657,  660,  662,  663,  666,
  677,  678,  679,  681,  689,  690,  692,  694,  125,  553,
  553,  553,   91,  365,  542,   91,  358,  618,   58,  546,
  553,  553,  570,   40,  569,  570,  546,  553,  622,  270,
  272,  574,  623,  618,  342,  582,  721,  551,  619,   40,
  577,  452,   40,  661,  310,  312,  313,  314,  707,  708,
  710,  712,  713,  714,  715,  546,  553,  704,  463,  465,
  468,  469,  125,  677,  678,  681,  724,  725,  726,  727,
  339,  463,  466,  125,  723,  725,  728,  729,  296,  409,
  461,  464,  125,  678,  681,  730,  461,  464,  125,  678,
  681,  731,   40,  330,  331,  332,  366,  367,  368,   60,
  616,  618,  688,   40,   40,  557,   40,  553,  553,  553,
  553,  570,  569,  569,  125,   44,  546,   41,  553,  553,
  330,  331,  332,  366,  367,  368,   40,   40,  545,  545,
   93,  582,  631,  632,  123,  574,  306,  610,  611,  618,
  262,   44,   41,   41,  620,   60,  568,  600,  274,  606,
  608,  556,  723,  391,  545,   41,   41,  553,  553,  553,
  570,   41,   41,   41,   41,   40,   40,   41,   41,   41,
   41,   41,   41,   41,   41,   41,  721,  274,   93,  549,
  549,  549,  618,  618,  275,   44,   93,   62,   44,   42,
  365,  628,  629,  553,  553,  638,  365,  542,  358,  618,
  123,  661,  123,  123,  123,   58,  553,   91,  545,   91,
  545,  553,  551,  274,  545,  618,   40,  577,  574,  546,
  550,  553,   41,   40,  275,  557,  571,  572,  573,  125,
  618,  707,  311,  704,  711,  711,  711,  711,  546,  553,
  704,  317,  317,  467,   61,   42,  553,  613,   61,  582,
  577,  577,   61,   61,  577,  577,   40,  470,  553,  545,
  470,  545,  470,  553,  294,  306,  307,  324,  374,  376,
   43,   45,  562,  563,  615,   44,  553,  582,  630,   91,
  574,  582,   41,   93,   41,   41,   41,   41,   41,  719,
   41,   58,  263,   44,  553,  257,  271,  276,  277,  279,
  280,  281,  282,  283,  284,  286,  287,  289,  290,  291,
  292,  293,  335,  337,  342,  358,  391,  481,  483,  484,
  485,  486,  487,  488,  489,  490,  491,  492,  493,  494,
  495,  496,  497,  498,  499,  503,  123,  579,  580,  699,
  318,  548,   93,   61,   41,   44,  606,  263,   44,  125,
   61,  263,   61,   91,  601,   40,   40,  545,  547,  125,
  277,  278,  279,  281,  282,  283,  284,  286,  287,  290,
  291,  292,  293,  297,  298,  365,  586,  587,  609,  681,
  721,  283,  284,  318,  457,  458,  460,  577,  545,   41,
   41,   41,   41,  553,  570,  577,  545,  549,   41,   41,
  553,  575,  574,   40,  618,  327,  372,  545,  618,  327,
  372,  551,  545,   91,  545,   91,  545,  551,  274,  658,
  125,  691,  693,  673,  553,   93,  553,  553,   44,   93,
  574,  547,  274,  582,   41,   40,   44,   41,   44,  571,
  574,   41,   44,  546,  553,  546,  553,  553,   40,   58,
   40,   41,   41,   40,   40,   41,   41,  553,  549,  545,
  318,  545,   41,   40,  294,  564,  565,  563,   40,  545,
  605,   62,  618,   41,  391,  630,  294,  301,  303,  304,
  305,  342,  343,  344,  388,  389,  390,  392,  395,   41,
  505,  506,  507,  553,  480,  584,   41,  558,  558,  558,
  558,  558,  558,  553,  553,   41,  280,  281,  282,  283,
  284,   40,  566,  497,  489,  501,   40,  482,  502,  277,
  566,  566,  257,  276,  277,  279,  280,  281,  282,  283,
  284,  286,  287,  289,  290,  291,  292,  293,  484,  485,
  487,  488,  489,  491,  492,  495,  496,  498,  511,  512,
  513,  514,  515,  516,  517,  518,  519,  520,  521,  522,
  523,  524,   42,  559,   91,   42,   41,  578,  546,   61,
  581,  283,  553,  561,  582,  583,  617,  631,  125,   61,
  611,  123,  123,   40,  582,  553,   62,  571,  571,  568,
  600,   40,   91,   40,   91,  281,  282,  283,  284,   40,
   91,   40,   91,   40,   91,   40,   91,   40,   91,   40,
   91,   40,   91,   40,   91,   40,   91,   40,   91,   40,
   91,   40,   91,   40,   91,  359,  364,  612,  681,  577,
  546,   41,   41,   41,   41,  571,  451,  640,  545,  574,
  553,  553,   44,  574,  547,  125,  424,  425,  426,  427,
  125,  666,  678,  679,  681,  696,  427,  429,  430,  125,
  666,  678,  679,  681,  697,  125,  391,   93,   93,  618,
  581,  618,  545,   41,  571,  550,  550,   41,  584,  573,
  317,  317,  613,   41,  553,  553,   40,  565,  574,  603,
  604,  618,   44,  614,  545,  582,   41,   40,   58,   58,
   93,   93,   93,   93,   40,  547,  263,   44,  263,  504,
  582,   91,   91,  280,  281,  282,  283,  284,  525,   44,
   91,   38,   43,   93,  553,  125,  277,  278,  279,  281,
  282,  283,  284,  286,  287,  290,  291,  292,  293,  299,
  582,  585,  587,   40,   40,  123,  609,  606,   93,   41,
   41,   40,   40,  561,  553,  553,  553,   40,   91,   40,
   91,   40,   91,   40,   91,  553,  553,  553,  553,  553,
  553,  570,  553,  553,  569,  553,  569,  570,  553,  553,
  553,  553,  553,  553,  553,  570,  553,  586,  553,  263,
  299,  553,  299,  306,  617,  553,  277,  278,  279,  281,
  282,  283,  284,  286,  287,  290,  291,  292,  293,  297,
  298,  346,  365,  599,  607,   41,  636,   41,   41,  545,
   93,   93,  618,  618,  510,  622,  622,  622,  622,  622,
  622,  622,  546,   44,  274,   41,  546,  546,  553,   58,
   41,  553,  545,  605,   41,   44,  615,  614,  630,  553,
  393,  394,  393,  394,  580,  616,  553,   61,   44,  553,
  553,  582,   93,  553,   43,   93,  281,  282,  283,  284,
  553,  281,  282,  283,  553,  609,  125,  125,   62,  571,
  571,   41,   93,   41,   93,  553,  553,  553,  553,  553,
  553,  570,  553,   41,   93,   41,   93,   41,   93,   41,
   93,   41,   41,   93,   41,   41,   93,   41,   93,   41,
   93,   41,   93,   41,   93,   41,   93,   41,   41,   93,
   41,  263,   41,   93,  281,  282,  283,  284,  306,  617,
   91,  545,   40,   44,  274,  551,  618,  547,  613,   41,
  614,  545,  618,   41,   41,   41,   40,  263,  553,  582,
   93,   93,   93,  553,   41,   58,   58,   58,   41,  125,
   41,   41,   40,   40,   41,   93,   41,   93,   41,   93,
   41,   93,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   41,   40,  263,   93,   61,  571,
  618,  547,  574,   60,  567,  568,   58,  614,  571,   41,
   44,   41,  579,   93,  553,  553,  553,  595,  592,   40,
   40,   40,   40,  591,  592,  593,  594,  589,  590,  591,
  592,  593,  594,  598,  596,  597,  586,   41,  567,  618,
   40,  613,   41,  582,   41,   41,   41,   41,  561,   41,
  553,  591,  592,  593,  594,   41,  553,   41,   41,  553,
   41,  570,   41,  553,  569,   41,  569,  570,   41,   41,
   41,   41,   41,  586,  263,  299,   41,  299,  306,   41,
  617,  581,   40,  274,  571,  627,   44,   41,   41,   41,
   41,  263,  571,  547,   41,  294,  309,  325,  334,  348,
  349,  350,  351,  380,  381,  382,  383,  384,  385,  386,
  123,  582,   41,   40,   40,   41,  510,  571,  553,  358,
   41,   41,  551,  574,  618,  274,  547,  567,   40,  571,
   41,
};
#endif /* YYDESTRUCT_CALL || YYSTYPE_TOSTRING */
static const YYINT yydgoto[] = {                          1,
  157,   71,  481,  902,  158,  781,  105,  106,  807,   35,
   36,  712,  786,  420, 1124,   73,  494,  833,  834, 1026,
 1027, 1073, 1555, 1556,  508, 1612,  787,  788,  789,  211,
  534,  535,  175,  176,  898,  899, 1131,  692, 1136, 1056,
 1302,  937,  938,  160, 1578, 1579, 1574, 1569, 1576, 1577,
 1568, 1585, 1586, 1584,  161,  708,  537,  538, 1250, 1251,
 1031,  710, 1375,  711,  939,  698,  699, 1188,  808, 1254,
  835,  661,  212,  229,  230,  107,  231,  108,  214,  187,
  190,  208, 1636,  752,  753,  839,  693,  694,   92,   37,
  113,  488,  115,  205,  116,   38,   39,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
  351,   40,   41,  310,   42,   43,  181,   44,  352,   46,
   47,  353,   49,   50,  366,   51,  367,   52,  368,   53,
  369,   54,  354,  355,  356,   58,  357,  304,   60,   61,
   62,  189,  395,  663,  565,  566,  982,  567,  983,  568,
  215, 1216, 1225,   63,  900,  358,  359,  360,  361,  794,
  363,  364,  609,  610,  365,  611,  795,  612,  613,  614,
  615,   64,  201,   76,  432,  433,  941,   65,  635,  627,
  628,  629,  630,  637,  638,  646,  652,
};
static const YYINT yysindex[] = {                         0,
17921,    0, -381,  643,    0,   66, -242, 1786, 1786,    0,
    0, -161,  781,   71,  175, -224, -139,    0,  344,  165,
  165,  -27,  -27,15021,  329,    0,  643,  643,  643,  643,
    0,    0,  254,    0,  257,  257,  257,    0,    0,    0,
  406,  429,    0,    0,    0,    0,    0,    0,    0,  439,
  456,  512,  522,    0,    0,    0,    0,    0,    0,  257,
    0,  349,    0,  810,  165,    0,    0,    0,    0,  623,
    0,  165,    0,    0,    0,  346,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,19162,    2,  659,    0,    0,  668,  681,    0,    0,
  899, 1653, 1653,19062,10861,    0,  667,    0,    0,  705,
  165,  165,  391,    0, 1040,  748,  643,  623,    0,    0,
    0,    0,    0,    0,    0,    0,    0,10861,    0,  735,
  740,  971,  754,  758,  778,  783,  801,  832,  837,  856,
  892,  909,    0,  923,  924,    0,  662,  924,  655,    0,
10699,    0,    0,    0,   74,  213,  623,  693,   65,    0,
    0,  628,  639,    0,  642,  647, 1206,  924,   29,  623,
  623,  623,    0,    0, 1005,  784, 1021, 1030,    0,    0,
 1636,    0,    0,    0,    0, 1058,10057,19162,  794,12459,
 1082,   70,   99,  114,  132,  133,  142, 1085,  244, 1090,
    0,    0,  257,  420, 1446,  643, 1039,18261, 1073,  111,
  174,    0,  457,    0, 1653,    0, 1095,   58, 1108,  889,
  165,  165,    0,    0,    0,    0,    0,    0,    0, 1118,
    0,18523,  106,    0, 1070,    0,    0,  -24, 1040,    0,
    0,    0,    0,  698,    0,    0,    0,    0,  623,    0,
    0,   13,  623,  174, -117,  165, 1137, 1139, 1140, 1142,
  165,  165,  165,  -27,  720,  863,  165,  165,  165,  -27,
  929,    0,  924, 1146,  913,    0,    0,    0,    0,18881,
  643, 1101,  117, 1105,  716,  623,    0,  643,    0, 1159,
 1165,  643,  378,10861,    0,    0,  643,  643,  643,  643,
10861,    0,  924, 1081, 1108,    0,    0,    0,    0,11842,
17810,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  165,    0,  165,    0,    0,    0,
  165, 1120,  -57,19221,    0,    0, 1154,    0,  656,  165,
  -27,  316,  656, 1206,10389,19162, -129, 1653,19062, 1176,
  257,    0,    0,    0,    0,    0,    0,    1,    0,    0,
    0,    0,    0,  753,  579,  812,  386,   19,  822,    0,
 1179,    0,    0,    0,    0,    0,    0,  858,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  700,    0,19162,    0, 1191,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1202,    0,    0, 1220,  165,  165,    0,
  165,    0,  165,    0,  -27,    0,  762,    0,  762,    0,
    0, 1143, 1218,  346, 1226,    0,    0,  165,  165,    0,
    0,    0,  891,  623,  623,    0, 1230,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1231,  848,    0,  643,  128,  929, 1149,10861,    0,19324,
    0, 1012, 1234, 1241, 1244, 1206,    0,    0,  138,  623,
 1228, 1016,    0,    0, 1108,    0,    0,  829,   14,    0,
  643,    0,    0, 1255, 1258,  165,  165,  165,  -27, 1261,
 1263, 1278, 1282,    0, 1284, 1286, 1287, 1289, 1294, 1295,
 1296, 1313, 1314, 1315,  650,    0, 1080,    0,  623, 1053,
  401,  643,  643,  643,  623,    0,  623,19162,19162,  623,
    0,    0, 1097,    0,  103,  174, 1308, 1337,  623,  623,
  623,  623,18672,    0,    0, 1019,    0,    0,    0,  165,
  165,    0, -289,19383,    0, 1267,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1269, 1270, 1275,    0,    0,
    0, 1341,  165,  470,  481,  165, 1653, 1129,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,18881,    0,    0, 1367, 1108,  257,10861,    0,  656,
 1369, 1368, 1138,16893,    0,19162,    0,    0,    0,  753,
   -2,   -2,   -2,   -2,  579, 1098, 1099,    0,  945, 1353,
   95,  147,    0,    0,    0,    0,    0,    0,  257,  257,
    0, 1356, 1358,    0,  257,    0,  257,    0, 1381, -207,
  643,  952,    0,    0,    0,    0,  643,  953,    0,    0,
    0,    0,  165,    0,    0,    0,    0,    0,    0,  199,
    0,    0, 1380,  165,  929, 1694,  929, 1384, 1333, 1387,
 1391, 1394, 1397, 1399,    0,  244, 1401,    0, 1372,   44,
    0,    0,    0,    0,    0,    0,  165,16110,   45,  416,
  643,  115, 1402, 1407,    0,  598, 1141, 1408, 1320, 1395,
    0, 1192,    0,    0, 1410,11009, 1433, 1436,  495, 1352,
  601,  402,  257,  643,  623,    0,    0, 1445, 1448, 1449,
 1451,    0,    0,    0,    0,  165,  -27,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  257,  643,  643,  693,
  693,  693, 1453, 1455,  165,  493,    0,    0,10861, 1447,
19162,18984, 1704,    0,    0, 1446,  548,  605, 1653, 1224,
    0,16976,    0,    0,    0,  165, 1412,  165,  623,  165,
  727, 1414,10861,  495,  623, 1238,  929, 1472,  421, 1480,
 1489, 1490,    0, 1138,    0, 1694, 1494, 1493,    0,    0,
    0,    0,  656,    0,    0,    0,    0,    0,    0,    0,
    0,  346,  165,  165, 1498,    0,    0, 1481, 1500, 1108,
 1505, 1507, 1501, 1510, 1513, 1517,  165,  643,    0,  623,
  643,   49,  643, 1518, 1520,    0,    0,    0,    0, 1271,
    0,    0,   36,  304, 1499,19162, 1522,   -1,  731,  -39,
   88,  791, 1475,    0, 1475, 1475, 1475, 1475, 1475,    0,
    0,  165,    0,  165, 1535,    0,    0,    0,    0,  966,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1537, 1089, 1104,    0, 1077, 1539, -367, 1305,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1537, 1537,    0,12745,    0,    0,    0,  120, 1553,  257,
  346, 1543,  643, 1479,    0,  929, 1491, 1554,19324,    0,
 1477,    0,  144,  165, 1552, 1138, 1138,  623, 1228,    0,
  182,  395, 1060,  462,  547,  616,  652,  671,  678,  709,
  738,  744,  745,  755,  759,  776,    0,    0,  252,    0,
  257,    0,    0,  346,    0,    0,    0, 1576,  623,    0,
    0,    0,    0, 1577, 1578, 1579,  623,  693,    0,    0,
    0,    0,  174, 1138, 1170,    0,    0,  623,  643,    0,
    0,10861,  623,  165,  623,  165,  926,10861,  495,17990,
    0,  504, 1197,  565,    0, 1232, 1529, 1532,19162, 1543,
18881,    0,  643,  956,    0, 1138,  656,    0,  656, 1587,
   88,    0, 1138, 1312, 1316,    0,    0,    0,    0,   95,
    0,    0,    0,    0,    0,    0,    0, 1590,  693,  623,
  165,  623,    0,  165, 1592, 1271,10861,    0,19162, 1036,
  643,    0,    0,    0,  929,  990, 1594,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1581, 1583,    0,
 1542, 1549, 1551, 1560, 1614,  495,    0,    0,    0,    0,
    0,    0,    0,   56, 1392,    0,    0,    0,    0,    0,
    0, 1152,    0,    0,    0,    0,  929, 1566, 1568,    0,
    0,    0,    0,    0,    0, 1026,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   17,  154,    0,    0,  -58,    0, 3259,
    0, 1620,    0,    0, 1108,    0, 1621,    0,    0, 1540,
    0,    0,    0,    0, 1108, 1569,    0, 1623, 1624, 1630,
 1631, -117,  165,  165,  165,  804,  818,  824,  873,  165,
  165,  165,  165,  165,  165,  -27,  165,  720,  165,  863,
  165,  165,  165,  165,  165,  165,  165,  -27,  165, 2657,
  165,   51,  165,  410,  165,    0,    0, 2959,    0, 1632,
    0, 1254,    0,    0, 1635, 1645, 1206,    0,  623,  848,
 1598, 1607,19162,18881, 1198,    0, 1206, 1206, 1206, 1206,
    0,    0,    0,    0,    0,    0, 1206, 1206, 1206,    0,
    0,    0,    0,    0,    0,    0,  346,    0, 1657,    0,
    0, 1437,  623,    0, 1669,    0,    0,    0,  346,    0,
  346,  165, 1655,    0,    0, 1674,  165,    0, 1389, 1675,
 1676,    0,  199,    0, 1036, 1108,    0,  165,  434,  630,
    0,    0,    0,    0,16110, 1658,    0,  165,    0, 1662,
  464,  165,  165,    0,    0,    0,    0,    0,    0,  929,
 1626,    0,  165,    0,  150,    0, 1685, 1686, 1083, 1708,
 1712, 1714, 1718, 1720, 1729, 1732, 1733, 1738, 1739,    0,
 1108,    0,    0,  165,  773,    0,   60, 1619, 1722,    0,
    0, 1138, 1138, 1741, 1693, 1746, 1695,  165,  165,  165,
  165,  165,  165,  -27,  165, 1748, 1697, 1750, 1699, 1752,
 1705, 1760, 1753, 1798, 1804, 1755, 1808, 1809, 1758, 1811,
 1765, 1812, 1770, 1823, 1773, 1827, 1780, 1839, 1789, 1847,
 1848, 1799, 1850, 1634, 1857, 1807,    0,    0, 1093,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  973,    0,    0,  722,    0,    0,    0,    0,  377,
    0, 1862,    0, 1627, 1653,    0,    0,    0,    0,    0,
    0,    0,    0,19162,  495,    0,    0,    0,    0,   95,
    0, 1866, 1036,  643,    0,19162,    0,    0, 1248, 1867,
    0,    0,    0,    0, 1869, 1871, 1649,  165,  929, 1820,
 1826, 1108,    0, 1832,  165,    0, 1880, 1889, 1890, 1891,
 1897, 1892, 1893, 1894, 1908,  266,    0,    0,    0, 1913,
 1915,    0, 1917,    0, 1918, 1919, 1868, 1922, 1874, 1923,
 1881, 1941, 1895,    0, 1949,    0, 1950,    0, 1953,    0,
 1955,    0,    0, 1956,    0,    0, 1957,    0, 1961,    0,
 1963,    0, 1965,    0, 1967,    0, 1968,    0,    0, 1969,
    0, 1970,    0, 1972,    0,    0,    0,    0, 1696,    0,
 1921,  180, 1138,19162,  495,10861,    0, 1960, 1952,    0,
    0, 1036,    0,    0,    0,    0, 1138,    0, 1974,  902,
    0,19642,    0, 1928,    0,  165,  165,  165,    0,    0,
    0,    0,    0,    0,    0, 1976,    0, 1982,    0, 1983,
    0, 1984,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2657, 1985,
    0, 1960,18881, 1934, 1987,    0,   95,    0, 1988,    0,
  929,    0,  120,    0, 2005, 2006, 2007,   41,   21,    0,
    0,    0,    0,   25,   46,   52,  129,  109,  362,   87,
   93,  125,  177, 2351,   39, 1173,    0, 1543, 2010, 1754,
 1138,    0,    0,  813,    0,    0,    0,    0,    0,    0,
    0,  136,  151,  179,  256,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1788,    0,
    0,    0, 1138,  495, 2018, 2617,  929,    0,    0,    0,
    0,    0, 2019, 2021,    0, 2022,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1043, 1555, 1138,  165,    0, 1711, 2025, 2029, 1653,
    0,    0,10861,18881, 1797,  495, 1960, 2023, 1138, 2031,
    0,
};
static const YYINT yyrindex[] = {                         0,
    0,    0,10575,    0,    0,18371, 2058,    0,    0,    0,
    0,    0,11171,    0,    0,  452, 2225,    0,15290,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2032, 2032, 2032,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2032,
    0,  -33,    0,    0,    0,    0,    0,    0,    0, 1951,
    0,    0,    0,    0,    0, 1640,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,13252,    0,    0,    0,    0,    0,    0,
11319,11629,11629,    0,    0,    0,11771,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,15424,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 4579,
 4883,    0, 5187, 5491, 5795, 6099, 6403, 6707, 7011, 7315,
 7619, 7923,    0, 8227,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1843, 2451,    0,    0,
    0,    0,    0,    0,    0,    0,11171, 1954,10352,10662,
10972,11282,    0,    0,    0, 2034,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1958,11629,
    0,14955,14955,14955,14955,14955,14955,    0,    0,    0,
    0,    0, 2032,13627,    0,    0,    0,    0,    0,    0,
12644,    0,14562,    0,11171,    0,    0,    0,14735,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,13842,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1959,    0,
    0, 1966,15455,10051,    0,    0, 8531, 8835, 9139, 9443,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 9747,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3971,    0,    0,    0,    0,
    0,    0, 2033, 2016,    0,    0,    0,    0,    0,    0,
    0,    0, 1954,    0,11592,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,11171,    0,    0,    0,11171,    0,    0,
 2032,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  222,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1973,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1971, 1406,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1975,
    0,    0,13454,    0,    0,11171,    0,    0, 2033,   80,
 2040,    0,    0,    0,12026,    0,    0,15567, 1978,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,16505,    0,
    0,    0,    0,    0, 4275,    0, 2147,    0,    0,15729,
    0,    0,  124,    0,    0,  603,    0, 2026,15756,15889,
16000,16111,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,11171,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,17127, 2032,    0,    0, 2042,
    0,    0,19482,    0,    0,    0,    0,    0,    0,17294,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2032, 2032,
    0,    0,    0,    0, 2032,    0, 2032,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  352,
    0,    0, 1979,    0, 1452,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,13811,
    0,    0,    0,    0,    0,    0,    0,  210, 1072,    0,
12895,    0,    0, 2049,    0,    0,    0, 1980,    0,    0,
    0,    0,    0,    0,12205, 2016,    0,    0,    0,    0,
  -61,    0, 2032,    0, 1990,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2032,    0,    0, 2755,
 3059, 3363,    0,    0,  134,  155,    0,    0,    0,18822,
    0,    0,11171,    0,    0,    0,    0,    0,11171,    0,
    0,    0,    0,    0,    0,    0,    0,    0,17377,    0,
    0,    0,    0,    0,16810,    0,    0,    0,    0, 2050,
    0, 2051,    0,19482,    0,    0,    0, 2052,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   82,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  922,
    0,    0,    0,    0,    0,    0,    0,    0,    0,19533,
    0,    0,  352,    0,    0,    0,    0, 1452,    0,    0,
  613,    0,14955,    0,14955,14955,14955,14955,14955,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  499,    0,    0,    0,    0,    0,    0,  590,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  499,  499,    0,   -6,    0,    0,    0, 2056,    0,    0,
    0,15263,13079,    0,    0,    0,    0,   76, 1975,    0,
    0,    0,    0,    0,    0,19482,19482,16422, 2040,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1998,    0,
 2032,    0,    0,    0,    0,    0,    0,    0, 1992,    0,
    0,    0,    0,    0,    0,    0,16602, 3667,    0,    0,
    0,    0,  606,19482,    0,    0,    0,  463,    0,    0,
    0,    0, 2009,    0,18062,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,17460,    0,    0,    0,17611,
    0,    0,    0,    0,    0,19482, 2042,    0, 2042,    0,
  454,    0,19592,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1939, 2053,
    0, 1858,    0,    0,    0,19533,    0,    0, 2066, 2037,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,14003,14187,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1071,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  771,    0,    0,    0,    0,    0,
    0,    0,    0,    0,12460,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,16222,    0,    0,    0,    0,11171,    0, 2014,    0,
    0,    0,    0,    0,    0,    0,11171,11171,11171,11171,
    0,    0,    0,    0,    0,    0,11171,11171,11171,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,17778,    0,    0,    0,    0,    0,  897,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2067,    0,  352,    0, 2037, 1452,    0,    0,    0,    0,
    0,    0,    0,    0,  210, 2070,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
15122,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,19482,19482,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,11171,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2037,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,14360,    0,    0,    0,
    0,  646,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,19482,    0,    0,    0,    0, 2088,    0,    0,
    0, 2037,    0,    0,    0,    0,19482,    0,    0,    0,
    0,  210,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2088,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2097,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2020,    0,    0,
19482,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,19482,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,19482,    0,    0,    0,    0,    0,11171,
    0,    0,    0,    0,    0,    0, 2088,    0,19482,    0,
    0,
};
#if YYBTYACC
static const YYINT yycindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,
};
#endif
static const YYINT yygindex[] = {                      1977,
   -4,  -26, -673,    0, -452,   90,  -98,    0,   -7,    0,
    0,    0, 1730, -148,    0,    0, -893,    0, 1317,    0,
 1122,  225,-1458, -427, -258,    5, -728,    0, 1150,  -22,
 1409,    0,   37, 1252,  644,  893, -974,  -73,    0, 1160,
    0,-1127, 1032,    0,    0,    0,-1070, -623,-1057, -807,
    0,    0,    0,    0,  972, 1245, 1457,    0,    0,    0,
  920, -655,    0,    0,-1074,    0, 1273,    0, -980,-1203,
  917,  918,   -3,  -89, 1830, 1707, 2162, -149,   20,    0,
    0,    0,    0,    0,    0, -801, 1290,    0, 2181,    0,
    0, 1000, 2079, 1643,    0,  -23, 2173,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -304, 1438,    0, -303, -277, -301,   42,    0,
    0,   30,    0,    0,    0,    0,    0,    0, 1435,    0,
    0,    0,   16,   11,   38,    0,   18, 1899,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   27,    0,    0,    0,    0,    0,    0,    0,    0, -171,
    0,    0, 1588,    0,    0,    0,  531,    0,    0,    0,
    0,    0,    0,    0, 1534, 2149,  -35,    0, 1723,    0,
 1849,    0,    0,    0,    0,    0,    0,
};
#define YYTABLESIZE 20145
static const YYINT yytable[] = {                         70,
  165,  159,  213,  227,  228,  556,  557,  509,  558,  362,
 1134,   56,  120,  121,  118, 1231,   55,  302,   59,  219,
  162,  206,  169,  170,  171,  172,  124,  125,  203, 1243,
   48,  645,  109,  576,  645,  919, 1036,  645,   57,  907,
  603,  472,   45,  164,  422,  424,  426,  428,  430,  209,
  167, 1408, 1348,  707, 1282, 1000,  119,  204,  206,  206,
 1280, 1600,  218,   78,  207, 1606, 1286, 1307,  301,  740,
  741,  742,  177,  178,  206,  757,   74,   34,  831, 1627,
  832, 1598,  232,  585,  645,  604, 1608,  854,   66,  135,
  206,  416, 1609, 1589,  206,  305,  186,  471,  393, 1268,
  992,   94,  296,  235,  236,  254,  295, 1281,  238,  418,
  249,  252,  253,   37, 1078,  282,  468,   37,   34,  317,
  335,   37,   37,  164,  294,  296,  582, 1619,  280,  295,
  167,  110,  216, 1620, 1079,   37,  806,   75,  421,  317,
  825,  272,  482,  643,  274,  484,  746,  294,  287, 1613,
  283,  286,  282,  423,  337,  293,   72,  472,  198,  485,
  419, 1126,  206,  203,  303, 1621,   37,  741,  673, 1611,
  674,  425,  427,  206,  284,  904, 1638,  743,  293,  282,
  470,  429,  392, 1144, 1437,  462,  109, 1148, 1149,  419,
  520, 1639, 1425,  618,  589,  747, 1283,  515,  739, 1501,
  444,  445,  492,  493,  419,  465,  825,  809,  307,  523,
 1125,  296,  595,  474,  475,  295,  741, 1622, 1678, 1640,
  691, 1152,  419,  419,  119,  206,  743,  480,  483,  284,
  532, 1436,  419,  294,  489, 1196,  122,  123,  741,  435,
 1549,  831, 1426,  832,  578,  285, 1284,  739,  495,  598,
  588,  588,  758,  500,  501,  502,  594,  507, 1314,  511,
  512,  513,  818,  216,  293,  111, 1143, 1235,  503,  516,
  510,  536, 1153,  596,  514,  519,  521,  526,  543,  762,
  525,  200,  135,  527,  119,  533,  958,  530,  119,  217,
  216,    2,  539,  540,  541,  542, 1641,   78, 1558,  303,
  588, 1625,   78,  112,  662, 1205,  853,  574,  793,  119,
   34,  597,  580, 1350,  639,  119,  587,  570, 1267,  571,
  562,   56,  592,  572,   34,  561,   55,  564,   59,  825,
  114,  581,  582,   67,   68,  588,   69, 1626,  616,  560,
   48,  826,  827, 1029,  147,  583,  586,  563,   57, 1351,
  119,  559,   45,  582,  825,  584,  119,  617,  119,  828,
  492,  493,  901,  109,  593, 1019, 1021,  216,  164,   98,
   67,   68,  119,   69,  504,  167,  625,  625,  644,  650,
  700,  624, 1266,  626,  626,  645,  651,  601,  119, 1035,
 1520,  156,  122,  123,  505,  506,  487,   67,   68,  119,
   69,  119, 1616,  491,  714,  216,   98,  677,  216,  829,
  668,  669,  531,  670,  119,  671, 1493,  119, 1186, 1499,
  825, 1587,  206, 1187,  289,  290,  291,  640,  119,  672,
  679,  680,  362,   98, 1154,   37,   37,   37,  743,  744,
  122,  123,  119,  801,   34,  696,  206,  289,  290,  291,
  958,  168,  602,  482, 1409,  292, 1624,  689,  296,  690,
  996,  206,  295,  438,  760, 1051, 1052, 1053, 1580,   13,
  532,  533,   67,   68,  465,   69,  119,  439,  773,  641,
  294,  737,  642, 1582,  575, 1155,  715, 1308,  718,  719,
  720, 1150,  825,  739,  270,  109,  466,  270,  284, 1602,
  155, 1160,  776,  721,  826,  827,  472, 1419,  903,  582,
  634,  293,  825,  825, 1604,  173,  791,  467,  645,  122,
  123,  191,  828,  174,  192,  193,  194,  195,  179,  196,
  197,  198,  825,  289,  290,  291,  147,  147,  480,  643,
  643, 1279,  754,  755,  825,  281,  825,  825,  810,  825,
  825,  180, 1161,   27,   28,   29,   30,   31,   32,   33,
  768,  182,   34,   67,   68,  767,   69, 1055,  772,  769,
  771,  770,  829,  780,  830,  779, 1592,  337,  183,  122,
  123,  504,  464, 1440, 1441,  242, 1162,  775,  799,  643,
  362,  838,  782,  842,   27,   28,   29,   30,   31,   32,
   33,  505,  506,   67,   68,   67,   69,  800,   69,  464,
 1186,  156,  156, 1632,  156, 1187,  825,  825,  825,  825,
  825,  825,  825,   34, 1186,  122,  123,  504, 1211, 1187,
  593,  593,  819,  778,  184,  296,  820, 1163,  974,  750,
  203,  119,  822,  841,  185,  824,  563,  505,  506,  564,
   67,   68,  531,   69,  972, 1164,  837,  294,    2,   34,
  978,  965,  969,  188,  563,  811,  812,  564,  206,   67,
   68,  815,   69,  816, 1599,  556,  557,  126,  558,  855,
  593,  436,  437,  536,  942,  943,  630,  630,  293, 1226,
  736, 1166,  472,  272, 1058,  976, 1059, 1060, 1061, 1062,
 1063,  335,  220,  994,  918,   98, 1165,  221, 1353,  949,
 1168,  800,  800,  270,  800, 1354,  270, 1170,  954,  944,
  222, 1498,  582,  582,  631,  582,  963,  233,  940,   67,
   68,  955,   69,  957, 1583,  337,  630,  961,  533,  288,
   67,   68, 1167,   69,  234,  206, 1033,  968, 1172,  948,
  991,  973,  975,  977,   67,   68,  119,   69,  985,  660,
  987, 1169,  988, 1001, 1550, 1605, 1004,  531, 1171,  918,
  989, 1050,  206,  956,  255, 1006,    2, 1174, 1559,  256,
  289,  290,  291, 1176, 1178, 1005,   27,   28,   29,   30,
   31,   32,   33,  261, 1180, 1007, 1008,  262, 1182, 1173,
   27,   28,   29,   30,   31,   32,   33,   67,   68, 1018,
   69,  765, 1491,  117,  765, 1184, 1020,  263, 1022,  700,
  104, 1552,  264,  152,  153,  154, 1411, 1412, 1175, 1030,
 1135, 1057, 1054,  472, 1177, 1179,   13,    2,   67, 1145,
  265,   69,  119, 1318, 1064, 1181, 1065,  200,  632, 1183,
  620,  633,  237,  621,  622,  472, 1637, 1320,  945,  946,
  639,  947, 1635, 1322,   67,   68, 1185,   69,  477,  478,
   34,  266,  270,  270, 1129,  270,  267,  921,  922,  923,
   34,  924,  925,  926,  927,  296,  928,  929,  198,  295,
  930,  931,  932,  933, 1319,  268, 1133,  934,  935, 1230,
 1137, 1232,   67,   68, 1643,   69, 1146,  294, 1321, 1335,
 1575, 1337, 1324,  800, 1323,   67, 1581, 1191,   69,  119,
   27,   28,   29,   30,   31,   32,   33, 1207, 1208, 1209,
 1210,  269,  199,  275,  276, 1668,  623,  570,  293, 1252,
  570, 1198, 1562,  277,  472, 1561,  649, 1603,  270, 1200,
 1680,   10,   11,   12,   13, 1204, 1189,  289,  290,  291,
 1644, 1256,  271, 1325, 1199,  936, 1201,  273, 1202, 1203,
  780,  206,  780,  640,  918,   67,   68, 1190,   69,  119,
  854,   67,   68,  119,   69,  504,  270,  270, 1233,  782,
  562,  782, 1213, 1222,  644,  561, 1234,  564,  472, 1215,
 1224,  645, 1677, 1271, 1249,  505,  506,   67,   68,  560,
   69, 1212, 1221, 1245,  155,   13, 1246,  563,  297, 1214,
 1223,  559, 1413, 1414, 1037,  641, 1255,  504,  642,  298,
 1257, 1038,  299, 1039, 1040, 1041,  119,  300,   27,   28,
   29,   30,   31,   32,   33,  306,  854,  505,  506,   95,
  307,  918,   96, 1432, 1433, 1434, 1301, 1386, 1387, 1388,
 1389,  308,  605,  155,  606,  607,  608, 1390, 1391, 1392,
  309,  209, 1042, 1043, 1044,   97,   98,  250,  251, 1253,
   99,  206,  100, 1666,    2,  472, 1236,  191, 1237,  101,
  192,  193,  194,  195,    2,  196,  197,  198,  370,   27,
   28,   29,   30,   31,   32,   33,  102,   67,   68,  394,
   69,  629,  629, 1383, 1384, 1081, 1082, 1285, 1045, 1046,
 1047,  103, 1048,  417,  431, 1049,  122,  123,  504,  434,
  209,  446,  209,  463,  469,   27,   28,   29,   30,   31,
   32,   33,  796,  797,  798, 1315, 1316, 1317,  505,  506,
  472,  473, 1326, 1327, 1328, 1329, 1330, 1331,  476, 1333,
 1334, 1336,  486, 1339, 1340, 1341, 1342, 1343, 1344, 1345,
 1332, 1347,  490, 1349, 1338, 1352,  496, 1356,  497,  498,
 1355,  499, 1346,   67,   68,  517,   69,  654,  655,  656,
  216,  126,  518,  522,  854, 1380,  209,  524,  528,  223,
 1393,  224,  225,  226,  529,  545, 1422,  289,  290,  291,
  573,  579, 1397, 1630, 1398,  600,  109,  854,  653,   98,
  681,  682,  683,  657,  658,  659,  109,  109,  109,  109,
  664,  155,   67,   68, 1399,   69,  109,  109,  109, 1402,
  126,  665,    8,    9, 1403, 1067, 1068, 1069, 1070, 1071,
 1410,  257,  258,  259,  260,   34,  684,  685,  686,  667,
 1417,  676,   13,  155, 1420, 1421,  678,  675,   98,  687,
  688,  695,   13,  701,  619, 1424,  620,  702, 1489,  621,
  622,  703,  647, 1037,  704,  648, 1496,  706, 1504,  709,
 1038,  632, 1039, 1040, 1041,  716, 1431, 1435,  717,   67,
   68,  722,   69,  723, 1497, 1274, 1275, 1276, 1277, 1278,
 1446, 1447, 1448, 1449, 1450, 1451, 1503, 1453,  724, 1615,
 1617, 1220,  725,  726, 1189,  727,  738,  728, 1452,  729,
  854, 1042, 1043, 1044,  730,  731,  732,  152,  153,  154,
 1156, 1157, 1158, 1159,  209, 1510,   27,   28,   29,   30,
   31,   32,   33,  733,  734,  735,   27,   28,   29,   30,
   31,   32,   33, 1427, 1428, 1429, 1430,  198, 1490,  748,
 1492,  745,  854, 1485, 1486, 1487, 1488, 1045, 1046, 1047,
  749, 1048,  854,  751, 1049,  854,  152,  153,  154,  761,
  918,  763,  764,  209,  240,  241,  242,  765,  766, 1502,
   67,   68,  774,  908, 1551,   40,  777,  784,  126,  783,
 1509,  804,  785,  805,  802,  803,  813, 1514,  814,  243,
  817,  821,  823,  836,  843,  844,  296,  845, 1029,  852,
  295,  846,   67,   68,  847,   69,   98,  848,   40,  849,
  126,  851,  905,   40,  910,   40,   40,   40,  294,   40,
  906,  909,   40, 1189,  912,  911,  854,  854,  854,  854,
  854,  854,  854, 1590,   40,   40,   40,   40,   98,    2,
  913, 1628,  916, 1553,   95,  917,  920,   96, 1629,  293,
  209,  209,  209,  209,  209,  950,  964, 1594,  951,  952,
  918,  953,  299,  959,  209,  960,   40,  979,   40,  209,
   97,   98,  209,  209,  986,   99,  990,  100, 1565, 1566,
 1567,  993,  995,  244,  101,  245,  246,  247,  248,  209,
  209,  209,  209,  997,  209,  209,  209,  209,   40,  998,
   40,  102,  209,  999, 1002,  209, 1003, 1009, 1010, 1011,
 1014, 1037,  209,  209,  209, 1012,  103, 1013, 1038, 1015,
 1039, 1040, 1041, 1016,  152,  153,  154, 1017, 1023, 1024,
 1032, 1601, 1034, 1662, 1025,  419, 1607, 1601, 1610,  155,
 1614, 1673, 1607, 1601, 1610, 1066, 1072, 1076, 1077,  209,
  209, 1080, 1631, 1618, 1675, 1074,  152,  153,  154, 1042,
 1043, 1044, 1075, 1127, 1607, 1601, 1610,  209,  209, 1142,
  209,  209,  209, 1130,  209,  209,  209,  209,  209,  209,
  209,  209,  209, 1147, 1140, 1139, 1192, 1193, 1194, 1195,
 1197, 1228, 1227, 1217, 1229, 1218, 1219, 1238, 1241,  918,
 1244, 1247, 1242, 1258, 1261, 1045, 1046, 1047, 1259, 1048,
 1260, 1262, 1049, 1263,   10,   11,   12,   13,   67,   68,
 1674,   69, 1264, 1265, 1269, 1270, 1272, 1669, 1273, 1304,
 1305, 1309, 1306, 1310, 1311,   40,   40,   40,   40, 1312,
 1313,  918, 1376,   40,  487, 1378,   40,  393,   40,   40,
   40,   40,   40,   40,   40, 1379,   40,   40,   40,   40,
 1381,   40,   40,   40,   34,   40,   40,   40,   40, 1382,
 1394,   40,   40,   40,   40,   67,   68, 1385,   69, 1396,
 1395,   40, 1400,   40, 1401, 1405,   40,  660, 1423, 1406,
   40,   40, 1418,   40, 1152, 1154,  156,   40,   40,   40,
   40,   27,   28,   29,   30,   31,   32,   33,   67,   68,
  216,   69,  119, 1438,   40,  299,  126, 1160,  289,  290,
  291, 1162,  299, 1164,  299,  299,  299, 1166,  335, 1168,
  336, 1132,  393,   40,   40,   40,   40,   40, 1170,   40,
   40, 1172, 1174,  440,   98,  441,  442, 1176, 1178,   40,
   40, 1442,  443, 1439,  840, 1443, 1444, 1445, 1454, 1455,
 1456, 1457, 1458,  299,  299,  299,   40, 1459,  492,  493,
 1460,   40,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   40,   40,   40,   40, 1462,  299,
  299,  299,  582,  299, 1463, 1461,  299, 1464, 1465, 1466,
 1467, 1468, 1470,   40,   40,   40,   40, 1469,   40,   40,
   40,   40, 1471, 1472,   40, 1473,   40, 1474,   40,   40,
   40,   40, 1475,   40,   40,  582,   40,   40,   40, 1476,
  582, 1477,  582,  582,  582,   40,  582, 1478, 1479,  582,
 1481, 1480,  152,  153,  154,   67, 1482, 1483,   69, 1484,
 1495,  582,  582,  582,  582, 1494, 1500, 1505,    2, 1506,
 1507, 1508, 1511,   40,   40,   40,  869,  393, 1512, 1318,
  393,  393,  393,  393, 1513,  393,  393,  393, 1320, 1322,
 1324,   40,   40,  582,   40,   40,   40, 1515,   40,   40,
   40,   40,   40,   40,   40,   40,   40,   97, 1519, 1516,
 1517, 1518,   99, 1521,  100, 1522, 1523, 1524, 1547, 1525,
 1526,  101, 1527, 1529,  127,  582, 1528,  582,  128,  129,
  130,  131,  132, 1530,  133,  134,  135,  136,  102,  137,
  138, 1531,  869,  139,  140,  141,  142, 1532, 1533, 1534,
  143,  144, 1535,  103, 1536, 1537, 1538,  855,   97,  145,
 1539,  146, 1540,   99, 1541,  100, 1542, 1543, 1544, 1557,
 1545, 1546,  101, 1548, 1560, 1570,  147,  148,  149, 1554,
 1564, 1571, 1572, 1573,  914, 1588, 1591, 1634, 1593,  102,
  970,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  103, 1595, 1596, 1597,    7, 1633,
 1642,  150,  325,  326,  327,  328,  329,  330, 1645, 1663,
 1664, 1665, 1679,  855, 1667, 1671,    8,    9, 1670, 1672,
 1676, 1681,  438,  104,  439,  971,  739,  561,   29,  559,
  137,  805,  554,   10,   11,   12,   13,  562,  861,  757,
  557,  558,  566,  840,  331,  394,  272,  400,  165,  750,
  832,  138,  582,  582,  751,  582,  143,  144,  332,  147,
  582,  856,  862,  582,  833,  582,  582,  582,  582,  582,
  582,  582,   74,  582,  582,  582,  582,  168,  582,  582,
  869,  841,  582,  582,  582,  582,  241,  592,  582,  582,
  582,  582,  211,  333,  334,  666,  583, 1248,  582, 1028,
  582, 1128, 1240,  582,  962, 1563,  311, 1415,  582, 1374,
 1239, 1303,  915, 1151,  582,  582,  582,  582, 1404, 1407,
   27,   28,   29,   30,   31,   32,   33,  856,  599,  583,
  394, 1141,  705, 1416,  583,  163,  583,  583,  583,   93,
  583, 1377,  239,  583,  756, 1138,  166,  792,  980,  984,
  582,  544,  582,  582,  582,  583,  583,  583,  583,  850,
  713,  855,  202,    0,    0,  636,  582,  582,   77,   78,
   79,   80,   81,   82,   83,   84,   85,   86,   87,   88,
   89,   90,   91,  582,  855,    0,    0,  583,  582,  582,
  582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
  582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
  582,  582,  582,  582,  582,  582,    0,    0,    0,  583,
  582,  583,    0,  582,  582,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  582,  582,  582,  582,    0,  582,  582,  582,  582,    0,
    0,  582,    0,  582,    0,  582,  582,  582,  869,    0,
  582,  582,    0,  582,  582,  582,    0,  394,  869,    0,
  394,  869,  582,    0,    0,  856,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  394,    0,    0,  394,  394,
  394,  394,    0,  394,  394,  394,    0,  855,  856,    0,
  582,  582,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  582,  582,
    0,  582,  582,  582,    0,  582,  582,  582,  582,  582,
  582,  582,  582,  582,    0,    0,    0,    0,    0,  855,
    0, 1623,  869,  869,  869,  869,  869,  869,  869,  855,
    0,    0,  855,    0,    0,    0,  583,  583,    0,  583,
    0,    0,    0,    0,  583,    0,    0,  583,    0,  583,
  583,  583,  583,  583,  583,  583,    0,  583,  583,  583,
  583,    0,  583,  583,    0,    0,  583,  583,  583,  583,
    0,    0,  583,  583,  583,  583,    0,    0,    0,    0,
  576,    0,  583,    0,  583,    0,    0,  583,    0,    0,
    0,  856,  583,    0,    0,    0,    0,    0,  583,  583,
  583,  583,    0,  855,  855,  855,  855,  855,  855,  855,
    0,    0,    0,  576,  806,  806,    0,  806,  576,    0,
  576,  576,  576,    0,  576,    0,    0,    0,    0,    0,
    0,    0,    0,  856,  583,    0,  583,  583,  583,  576,
  576,  576,  576,  856,    0,    0,  856,    0,    0,    0,
  583,  583,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  583,    0,    0,
    0,  576,  583,  583,  583,  583,  583,  583,  583,  583,
  583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
  583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
    0,    0,    0,  576,  583,  576,    0,  583,  583,  806,
  806,  806,    0,    0,    0,    0,    0,  856,  856,  856,
  856,  856,  856,  856,  583,  583,  583,  583,    0,  583,
  583,  583,  583,    0,  806,  583,    0,  583,    0,  583,
  583,  583,    0,    0,  583,  583,    0,  583,  583,  583,
    0,    0,    0,    0,    0,    0,  583,  921,  922,  923,
    0,  924,  925,  926,  927,    0,  928,  929,  198,    0,
  930,  931,  932,  933,    0,    0,    0,  934,  935,    0,
    0,    0,    0,    0,  583,  583,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  583,  583,    0,  583,  583,  583,    0,  583,
  583,  583,  583,  583,  583,  583,  583,  583,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  806,    0,
  806,  806,  806,  806,    0,    0,    0,    0,    0,    0,
  576,  576,    0,  576,    0,  936,    0,    0,  576,    0,
    0,  576,    0,  576,  576,  576,  576,  576,  576,  576,
    0,  576,  576,  576,  576,    0,  576,  576,    0, 1661,
  576,  576,  576,  576,    0,    0,  576,  576,  576,  576,
    0,    0,    0,    0,  574,    0,  576,    0,  576,    0,
    0,  576,    0,    0,    0,    0,  576,    0,    0,    0,
    0,    0,  576,  576,  576,  576,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  574,    0,    0,
    0,    0,  574,    0,  574,  574,  574,    0,  574,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  576,    0,
  576,  576,  576,  574,  574,  574,  574,    0,    0,    0,
    0,    0,    0,    0,  576,  576,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  576,    0,    0,    0,  574,  576,  576,  576,  576,
  576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
  576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
  576,  576,  576,  576,    0,    0,    0,  574,  576,  574,
    0,  576,  576,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  576,  576,
  576,  576,    0,  576,  576,  576,  576,    0,    0,  576,
 1646,  576,    0,  576,  576,  576,    0,    0,  576,  576,
    0,  576,  576,  576,    0, 1647,    0,    0,    0,    0,
  576,    0,    0,  921,  922,  923,    0,  924,  925,  926,
  927, 1648,  928,  929,  198,    0,  930,  931,  932,  933,
 1649,    0,    0,  934,  935,    0,    0,    0,  576,  576,
    0,    0,    0,    0, 1650, 1651, 1652, 1653,    0,    0,
    0,    0,    0,    0,    0,    0,  576,  576,    0,  576,
  576,  576,    0,  576,  576,  576,  576,  576,  576,  576,
  576,  576,    0,    0,    0,    0, 1654, 1655, 1656, 1657,
 1658, 1659, 1660,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  574,  574,    0,  574,    0,    0,
    0,  936,  574,    0,    0,  574,    0,  574,  574,  574,
  574,  574,  574,  574,    0,  574,  574,  574,  574,    0,
  574,  574,    0,    0,  574,  574,  574,  574,    0,    0,
  574,  574,  574,  574,    0,    0,    0,    0,  572,    0,
  574,    0,  574,    0,    0,  574,    0,    0,    0,    0,
  574,    0,    0,    0,    0,    0,  574,  574,  574,  574,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  572,    0,    0,    0,    0,  572,    0,  572,  572,
  572,    0,  572,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  574,    0,  574,  574,  574,  572,  572,  572,
  572,    0,    0,    0,    0,    0,    0,    0,  574,  574,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  574,    0,    0,    0,  572,
  574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
  574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
  574,  574,  574,  574,  574,  574,  574,  574,    0,    0,
    0,  572,  574,  572,    0,  574,  574,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  574,  574,  574,  574,    0,  574,  574,  574,
  574,    0,    0,  574,    0,  574,    0,  574,  574,  574,
    0,    0,  574,  574,    0,  574,  574,  574,    0,  127,
    0,    0,    0,    0,  574, 1357, 1358, 1359,    0, 1360,
 1361, 1362, 1363,    0, 1364, 1365,    0,    0, 1366, 1367,
 1368, 1369,    0,    0,    0, 1370, 1371,    0,    0,    0,
    0,    0,  574,  574,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  574,  574,    0,  574,  574,  574,    0,  574,  574,  574,
  574,  574,  574,  574,  574,  574,    0,    0,    0,    0,
    0,    0,    0,    0, 1372,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  572,  572,
    0,  572,    0, 1373,    0,    0,  572,    0,    0,  572,
    0,  572,  572,  572,  572,  572,  572,  572,    0,  572,
  572,  572,  572,    0,  572,  572,    0,    0,  572,  572,
  572,  572,    0,    0,  572,  572,  572,  572,    0,    0,
    0,    0,  573,    0,  572,    0,  572,    0,    0,  572,
    0,    0,    0,    0,  572,    0,    0,    0,    0,    0,
  572,  572,  572,  572,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  573,    0,    0,    0,    0,
  573,    0,  573,  573,  573,    0,  573,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  572,    0,  572,  572,
  572,  573,  573,  573,  573,    0,    0,    0,    0,    0,
    0,    0,  572,  572,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  572,
    0,    0,    0,  573,  572,  572,  572,  572,  572,  572,
  572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
  572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
  572,  572,    0,    0,    0,  573,  572,  573,    0,  572,
  572,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  572,  572,  572,  572,
    0,  572,  572,  572,  572,    0,    0,  572,    0,  572,
  216,  572,  572,  572,    0,    0,  572,  572,    0,  572,
  572,  572,    0,    0,    0, 1287, 1288, 1289,  572, 1290,
 1291, 1292, 1293,    0, 1294, 1295,  198,    0, 1296, 1297,
 1298, 1299,    0,    0,    0,    0,    0, 1300,    0,    0,
    0,    0,    0,    0,    0,    0,  572,  572,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  572,  572,    0,  572,  572,  572,
    0,  572,  572,  572,  572,  572,  572,  572,  572,  572,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  573,  573,    0,  573,    0,    0,    0,    0,
  573,    0,    0,  573,    0,  573,  573,  573,  573,  573,
  573,  573,    0,  573,  573,  573,  573,    0,  573,  573,
    0,    0,  573,  573,  573,  573,    0,    0,  573,  573,
  573,  573,    0,    0,    0,    0,  575,    0,  573,    0,
  573,    0,    0,  573,    0,    0,    0,    0,  573,    0,
    0,    0,    0,    0,  573,  573,  573,  573,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  575,
    0,    0,    0,    0,  575,    0,  575,  575,  575,    0,
  575,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  573,    0,  573,  573,  573,  575,  575,  575,  575,    0,
    0,    0,    0,    0,    0,    0,  573,  573,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  573,    0,    0,    0,  575,  573,  573,
  573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
  573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
  573,  573,  573,  573,  573,  573,    0,    0,    0,  575,
  573,  575,    0,  573,  573,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  573,  573,  573,  573,    0,  573,  573,  573,  573,    0,
    0,  573,    0,  573,    0,  573,  573,  573,    0,    0,
  573,  573,    0,  573,  573,  573,    0,    0,    0,    0,
    0,    0,  573,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  573,  573,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  573,  573,
    0,  573,  573,  573,    0,  573,  573,  573,  573,  573,
  573,  573,  573,  573,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  575,  575,    0,  575,
    0,    0,    0,    0,  575,    0,    0,  575,    0,  575,
  575,  575,  575,  575,  575,  575,    0,  575,  575,  575,
  575,    0,  575,  575,    0,    0,  575,  575,  575,  575,
    0,    0,  575,  575,  575,  575,    0,    0,    0,    0,
  711,    0,  575,    0,  575,    0,    0,  575,    0,    0,
    0,    0,  575,    0,    0,    0,    0,    0,  575,  575,
  575,  575,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  711,    0,    0,    0,    0,  711,    0,
  711,  711,  711,    0,  711,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  575,    0,  575,  575,  575,  711,
  711,  711,  711,    0,    0,    0,    0,    0,    0,    0,
  575,  575,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  575,    0,    0,
    0,  711,  575,  575,  575,  575,  575,  575,  575,  575,
  575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
  575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
    0,    0,    0,  711,  575,  711,    0,  575,  575,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  575,  575,  575,  575,    0,  575,
  575,  575,  575,    0,    0,  575,    0,  575,    0,  575,
  575,  575,    0,    0,  575,  575,    0,  575,  575,  575,
    0,    0,    0,    0,    0,    0,  575,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  575,  575,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  575,  575,    0,  575,  575,  575,    0,  575,
  575,  575,  575,  575,  575,  575,  575,  575,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  711,  711,    0,  711,    0,    0,    0,    0,  711,    0,
    0,  711,    0,  711,  711,  711,  711,  711,  711,  711,
    0,  711,  711,  711,  711,    0,  711,  711,    0,    0,
  711,  711,  711,  711,    0,    0,  711,  711,  711,    0,
    0,    0,    0,    0,  710,    0,  711,    0,  711,    0,
    0,  711,    0,    0,    0,    0,  711,    0,    0,    0,
    0,    0,  711,  711,  711,  711,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  710,    0,    0,
    0,    0,  710,    0,  710,  710,  710,    0,  710,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  711,    0,
  711,  711,  711,  710,  710,  710,  710,    0,    0,    0,
    0,    0,    0,    0,  711,  711,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  711,    0,    0,    0,  710,  711,  711,  711,  711,
  711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
  711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
  711,  711,  711,  711,    0,    0,    0,  710,  711,  710,
    0,  711,  711,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  711,  711,
  711,  711,    0,  711,  711,  711,  711,    0,    0,  711,
    0,  711,    0,  711,  711,  711,    0,    0,  711,  711,
    0,  711,  711,  711,    0,    0,    0,    0,    0,    0,
  711,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  711,  711,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  711,  711,    0,  711,
  711,  711,    0,  711,  711,  711,  711,  711,  711,  711,
  711,  711,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  710,  710,    0,  710,    0,    0,
    0,    0,  710,    0,    0,  710,    0,  710,  710,  710,
  710,  710,  710,  710,    0,  710,  710,  710,  710,    0,
  710,  710,    0,    0,  710,  710,  710,  710,    0,    0,
  710,  710,  710,    0,    0,    0,    0,    0,  721,    0,
  710,    0,  710,    0,    0,  710,    0,    0,    0,    0,
  710,    0,    0,    0,    0,    0,  710,  710,  710,  710,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  721,    0,    0,    0,    0,  721,    0,    0,  721,
  721,    0,  721,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  710,    0,  710,  710,  710,  721,  721,  721,
  721,    0,    0,    0,    0,    0,    0,    0,  710,  710,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  710,    0,    0,    0,  721,
  710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
  710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
  710,  710,  710,  710,  710,  710,  710,  710,    0,    0,
    0,  721,  710,  721,    0,  710,  710,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  710,  710,  710,  710,    0,  710,  710,  710,
  710,    0,    0,  710,    0,  710,    0,  710,  710,  710,
    0,    0,  710,  710,    0,  710,  710,  710,    0,    0,
    0,    0,    0,    0,  710,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  710,  710,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  710,  710,    0,  710,  710,  710,    0,  710,  710,  710,
  710,  710,  710,  710,  710,  710,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  721,  721,
    0,  721,    0,    0,    0,    0,  721,    0,    0,  721,
    0,  721,  721,  721,  721,  721,  721,  721,    0,  721,
  721,  721,  721,    0,  721,  721,    0,    0,  721,  721,
  721,  721,    0,    0,  721,  721,  721,    0,    0,    0,
    0,    0,  719,    0,  721,    0,  721,    0,    0,  721,
    0,    0,    0,    0,  721,    0,    0,    0,    0,    0,
  721,  721,  721,  721,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  719,    0,    0,    0,    0,
  719,    0,    0,  719,  719,    0,  719,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  721,    0,  721,  721,
  721,  719,  719,  719,  719,    0,    0,    0,    0,    0,
    0,    0,  721,  721,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  721,
    0,    0,    0,  719,  721,  721,  721,  721,  721,  721,
  721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
  721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
  721,  721,    0,    0,    0,  719,  721,  719,    0,  721,
  721,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  721,  721,  721,  721,
    0,  721,  721,  721,  721,    0,    0,  721,    0,  721,
    0,  721,  721,  721,    0,    0,  721,  721,    0,  721,
  721,  721,    0,    0,    0,    0,    0,    0,  721,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  721,  721,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  721,  721,    0,  721,  721,  721,
    0,  721,  721,  721,  721,  721,  721,  721,  721,  721,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  719,  719,    0,  719,    0,    0,    0,    0,
  719,    0,    0,  719,    0,  719,  719,  719,  719,  719,
  719,  719,    0,  719,  719,  719,  719,    0,  719,  719,
    0,    0,  719,  719,  719,  719,    0,    0,  719,  719,
  719,    0,    0,    0,    0,    0,  722,    0,  719,    0,
  719,    0,    0,  719,    0,    0,    0,    0,  719,    0,
    0,    0,    0,    0,  719,  719,  719,  719,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  722,
    0,    0,    0,    0,  722,    0,    0,  722,  722,    0,
  722,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  719,    0,  719,  719,  719,  722,  722,  722,  722,    0,
    0,    0,    0,    0,    0,    0,  719,  719,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  719,    0,    0,    0,  722,  719,  719,
  719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
  719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
  719,  719,  719,  719,  719,  719,    0,    0,    0,  722,
  719,  722,    0,  719,  719,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  719,  719,  719,  719,    0,  719,  719,  719,  719,    0,
    0,  719,    0,  719,    0,  719,  719,  719,    0,    0,
  719,  719,    0,  719,  719,  719,    0,    0,    0,    0,
    0,    0,  719,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  719,  719,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  719,  719,
    0,  719,  719,  719,    0,  719,  719,  719,  719,  719,
  719,  719,  719,  719,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  722,  722,    0,  722,
    0,    0,    0,    0,  722,    0,    0,  722,    0,  722,
  722,  722,  722,  722,  722,  722,    0,  722,  722,  722,
  722,    0,  722,  722,    0,    0,  722,  722,  722,  722,
    0,    0,  722,  722,  722,    0,    0,    0,    0,    0,
  723,    0,  722,    0,  722,    0,    0,  722,    0,    0,
    0,    0,  722,    0,    0,    0,    0,    0,  722,  722,
  722,  722,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  723,    0,    0,    0,    0,  723,    0,
    0,  723,  723,    0,  723,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  722,    0,  722,  722,  722,  723,
  723,  723,  723,    0,    0,    0,    0,    0,    0,    0,
  722,  722,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  722,    0,    0,
    0,  723,  722,  722,  722,  722,  722,  722,  722,  722,
  722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
  722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
    0,    0,    0,  723,  722,  723,    0,  722,  722,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  722,  722,  722,  722,    0,  722,
  722,  722,  722,    0,    0,  722,    0,  722,    0,  722,
  722,  722,    0,    0,  722,  722,    0,  722,  722,  722,
    0,    0,    0,    0,    0,    0,  722,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  722,  722,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  722,  722,    0,  722,  722,  722,    0,  722,
  722,  722,  722,  722,  722,  722,  722,  722,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  723,  723,    0,  723,    0,    0,    0,    0,  723,    0,
    0,  723,    0,  723,  723,  723,  723,  723,  723,  723,
    0,  723,  723,  723,  723,    0,  723,  723,    0,    0,
  723,  723,  723,  723,    0,    0,  723,  723,  723,    0,
    0,    0,    0,    0,  724,    0,  723,    0,  723,    0,
    0,  723,    0,    0,    0,    0,  723,    0,    0,    0,
    0,    0,  723,  723,  723,  723,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  724,    0,    0,
    0,    0,  724,    0,    0,  724,  724,    0,  724,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  723,    0,
  723,  723,  723,  724,  724,  724,  724,    0,    0,    0,
    0,    0,    0,    0,  723,  723,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  723,    0,    0,    0,  724,  723,  723,  723,  723,
  723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
  723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
  723,  723,  723,  723,    0,    0,    0,  724,  723,  724,
    0,  723,  723,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  723,  723,
  723,  723,    0,  723,  723,  723,  723,    0,    0,  723,
    0,  723,    0,  723,  723,  723,    0,    0,  723,  723,
    0,  723,  723,  723,    0,    0,    0,    0,    0,    0,
  723,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  723,  723,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  723,  723,    0,  723,
  723,  723,    0,  723,  723,  723,  723,  723,  723,  723,
  723,  723,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  724,  724,    0,  724,    0,    0,
    0,    0,  724,    0,    0,  724,    0,  724,  724,  724,
  724,  724,  724,  724,    0,  724,  724,  724,  724,    0,
  724,  724,    0,    0,  724,  724,  724,  724,    0,    0,
  724,  724,  724,    0,    0,    0,    0,    0,  725,    0,
  724,    0,  724,    0,    0,  724,    0,    0,    0,    0,
  724,    0,    0,    0,    0,    0,  724,  724,  724,  724,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  725,    0,    0,    0,    0,  725,    0,    0,  725,
  725,    0,  725,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  724,    0,  724,  724,  724,  725,  725,  725,
  725,    0,    0,    0,    0,    0,    0,    0,  724,  724,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  724,    0,    0,    0,  725,
  724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
  724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
  724,  724,  724,  724,  724,  724,  724,  724,    0,    0,
    0,  725,  724,  725,    0,  724,  724,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  724,  724,  724,  724,    0,  724,  724,  724,
  724,    0,    0,  724,    0,  724,    0,  724,  724,  724,
    0,    0,  724,  724,    0,  724,  724,  724,    0,    0,
    0,    0,    0,    0,  724,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  724,  724,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  724,  724,    0,  724,  724,  724,    0,  724,  724,  724,
  724,  724,  724,  724,  724,  724,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  725,  725,
    0,  725,    0,    0,    0,    0,  725,    0,    0,  725,
    0,  725,  725,  725,  725,  725,  725,  725,    0,  725,
  725,  725,  725,    0,  725,  725,    0,    0,  725,  725,
  725,  725,    0,    0,  725,  725,  725,    0,    0,    0,
    0,    0,  726,    0,  725,    0,  725,    0,    0,  725,
    0,    0,    0,    0,  725,    0,    0,    0,    0,    0,
  725,  725,  725,  725,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  726,    0,    0,    0,    0,
  726,    0,    0,  726,  726,    0,  726,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  725,    0,  725,  725,
  725,  726,  726,  726,  726,    0,    0,    0,    0,    0,
    0,    0,  725,  725,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  725,
    0,    0,    0,  726,  725,  725,  725,  725,  725,  725,
  725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
  725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
  725,  725,    0,    0,    0,  726,  725,  726,    0,  725,
  725,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  725,  725,  725,  725,
    0,  725,  725,  725,  725,    0,    0,  725,    0,  725,
    0,  725,  725,  725,    0,    0,  725,  725,    0,  725,
  725,  725,    0,    0,    0,    0,    0,    0,  725,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  725,  725,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  725,  725,    0,  725,  725,  725,
    0,  725,  725,  725,  725,  725,  725,  725,  725,  725,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  726,  726,    0,  726,    0,    0,    0,    0,
  726,    0,    0,  726,    0,  726,  726,  726,  726,  726,
  726,  726,    0,  726,  726,  726,  726,    0,  726,  726,
    0,    0,  726,  726,  726,  726,    0,    0,  726,  726,
  726,    0,    0,    0,    0,    0,  727,    0,  726,    0,
  726,    0,    0,  726,    0,    0,    0,    0,  726,    0,
    0,    0,    0,    0,  726,  726,  726,  726,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  727,
    0,    0,    0,    0,  727,    0,    0,  727,  727,    0,
  727,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  726,    0,  726,  726,  726,  727,  727,  727,  727,    0,
    0,    0,    0,    0,    0,    0,  726,  726,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  726,    0,    0,    0,  727,  726,  726,
  726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
  726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
  726,  726,  726,  726,  726,  726,    0,    0,    0,  727,
  726,  727,    0,  726,  726,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  726,  726,  726,  726,    0,  726,  726,  726,  726,    0,
    0,  726,    0,  726,    0,  726,  726,  726,    0,    0,
  726,  726,    0,  726,  726,  726,    0,    0,    0,    0,
    0,    0,  726,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  726,  726,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  726,  726,
    0,  726,  726,  726,    0,  726,  726,  726,  726,  726,
  726,  726,  726,  726,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  727,  727,    0,  727,
    0,    0,    0,    0,  727,    0,    0,  727,    0,  727,
  727,  727,  727,  727,  727,  727,    0,  727,  727,  727,
  727,    0,  727,  727,    0,    0,  727,  727,  727,  727,
    0,    0,  727,  727,  727,    0,    0,    0,    0,    0,
  732,    0,  727,    0,  727,    0,    0,  727,    0,    0,
    0,    0,  727,    0,    0,    0,    0,    0,  727,  727,
  727,  727,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  732,    0,    0,    0,    0,  732,    0,
    0,  732,  732,    0,  732,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  727,    0,  727,  727,  727,  732,
  732,  732,  732,    0,    0,    0,    0,    0,    0,    0,
  727,  727,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  727,    0,    0,
    0,  732,  727,  727,  727,  727,  727,  727,  727,  727,
  727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
  727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
    0,    0,    0,  732,  727,  732,    0,  727,  727,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  727,  727,  727,  727,    0,  727,
  727,  727,  727,    0,    0,  727,    0,  727,    0,  727,
  727,  727,    0,    0,  727,  727,    0,  727,  727,  727,
    0,    0,    0,    0,    0,    0,  727,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  727,  727,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  727,  727,    0,  727,  727,  727,    0,  727,
  727,  727,  727,  727,  727,  727,  727,  727,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  732,  732,    0,  732,    0,    0,    0,    0,  732,    0,
    0,  732,    0,  732,  732,  732,  732,  732,  732,  732,
    0,  732,  732,  732,  732,    0,  732,  732,    0,    0,
  732,  732,  732,  732,    0,    0,  732,  732,  732,    0,
    0,    0,    0,    0,  733,    0,  732,    0,  732,    0,
    0,  732,    0,    0,    0,    0,  732,    0,    0,    0,
    0,    0,  732,  732,  732,  732,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  733,    0,    0,
    0,    0,  733,    0,    0,  733,  733,    0,  733,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  732,    0,
  732,  732,  732,  733,  733,  733,  733,    0,    0,    0,
    0,    0,    0,    0,  732,  732,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  732,    0,    0,    0,  733,  732,  732,  732,  732,
  732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
  732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
  732,  732,  732,  732,    0,    0,    0,  733,  732,  733,
    0,  732,  732,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  732,  732,
  732,  732,    0,  732,  732,  732,  732,    0,    0,  732,
    0,  732,    0,  732,  732,  732,    0,    0,  732,  732,
    0,  732,  732,  732,    0,    0,    0,    0,    0,    0,
  732,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  732,  732,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  732,  732,    0,  732,
  732,  732,    0,  732,  732,  732,  732,  732,  732,  732,
  732,  732,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  733,  733,    0,  733,    0,    0,
    0,    0,  733,    0,    0,  733,    0,  733,  733,  733,
  733,  733,  733,  733,    0,  733,  733,  733,  733,    0,
  733,  733,    0,    0,  733,  733,  733,  733,    0,    0,
  733,  733,  733,    0,    0,    0,    0,    0,  734,    0,
  733,    0,  733,    0,    0,  733,    0,    0,    0,    0,
  733,    0,    0,    0,    0,    0,  733,  733,  733,  733,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  734,    0,    0,    0,    0,  734,    0,    0,  734,
  734,    0,  734,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  733,    0,  733,  733,  733,  734,  734,  734,
  734,    0,    0,    0,    0,    0,    0,    0,  733,  733,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  733,    0,    0,    0,  734,
  733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
  733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
  733,  733,  733,  733,  733,  733,  733,  733,    0,    0,
    0,  734,  733,  734,    0,  733,  733,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  733,  733,  733,  733,    0,  733,  733,  733,
  733,    0,    0,  733,    0,  733,    0,  733,  733,  733,
    0,    0,  733,  733,    0,  733,  733,  733,    0,    0,
    0,    0,    0,    0,  733,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  733,  733,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  733,  733,    0,  733,  733,  733,    0,  733,  733,  733,
  733,  733,  733,  733,  733,  733,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  734,  734,
    0,  734,    0,    0,    0,    0,  734,    0,    0,  734,
    0,  734,  734,  734,  734,  734,  734,  734,    0,  734,
  734,  734,  734,    0,  734,  734,    0,    0,  734,  734,
  734,  734,    0,    0,  734,  734,  734,    0,    0,    0,
    0,    0,  735,    0,  734,    0,  734,    0,    0,  734,
    0,    0,    0,    0,  734,    0,    0,    0,    0,    0,
  734,  734,  734,  734,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  735,    0,    0,    0,    0,
  735,    0,    0,  735,  735,    0,  735,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  734,    0,  734,  734,
  734,  735,  735,  735,  735,    0,    0,    0,    0,    0,
    0,    0,  734,  734,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  734,
    0,    0,    0,  735,  734,  734,  734,  734,  734,  734,
  734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
  734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
  734,  734,    0,    0,    0,  735,  734,  735,    0,  734,
  734,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  734,  734,  734,  734,
    0,  734,  734,  734,  734,    0,    0,  734,    0,  734,
    0,  734,  734,  734,    0,    0,  734,  734,    0,  734,
  734,  734,    0,    0,    0,    0,    0,    0,  734,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  734,  734,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  734,  734,    0,  734,  734,  734,
    0,  734,  734,  734,  734,  734,  734,  734,  734,  734,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  735,  735,    0,  735,    0,    0,    0,    0,
  735,    0,    0,  735,    0,  735,  735,  735,  735,  735,
  735,  735,    0,  735,  735,  735,  735,    0,  735,  735,
    0,    0,  735,  735,  735,  735,    0,    0,  735,  735,
  735,    0,    0,    0,    0,    0,  720,    0,  735,    0,
  735,    0,    0,  735,    0,    0,    0,    0,  735,    0,
    0,    0,    0,    0,  735,  735,  735,  735,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  720,
    0,    0,    0,    0,  720,    0,    0,  720,  720,    0,
  720,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  735,    0,  735,  735,  735,  720,  720,  720,  720,    0,
    0,    0,    0,    0,    0,    0,  735,  735,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  735,    0,    0,    0,  720,  735,  735,
  735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
  735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
  735,  735,  735,  735,  735,  735,    0,    0,    0,  720,
  735,  720,    0,  735,  735,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  735,  735,  735,  735,    0,  735,  735,  735,  735,    0,
    0,  735,    0,  735,    0,  735,  735,  735,    0,    0,
  735,  735,    0,  735,  735,  735,    0,    0,    0,    0,
    0,    0,  735,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  735,  735,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  735,  735,
    0,  735,  735,  735,    0,  735,  735,  735,  735,  735,
  735,  735,  735,  735,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  720,  720,    0,  720,
    0,    0,    0,    0,  720,    0,    0,  720,    0,  720,
  720,  720,  720,  720,  720,  720,    0,  720,  720,  720,
  720,    0,  720,  720,    0,    0,  720,  720,  720,  720,
    0,    0,  720,  720,  720,    0,    0,    0,    0,    0,
  728,    0,  720,    0,  720,    0,    0,  720,    0,    0,
    0,    0,  720,    0,    0,    0,    0,    0,  720,  720,
  720,  720,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  728,    0,    0,    0,    0,  728,    0,
    0,  728,  728,    0,  728,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  720,    0,  720,  720,  720,  728,
  728,  728,  728,    0,    0,    0,    0,    0,    0,    0,
  720,  720,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  720,    0,    0,
    0,  728,  720,  720,  720,  720,  720,  720,  720,  720,
  720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
  720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
    0,    0,    0,  728,  720,  728,    0,  720,  720,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  720,  720,  720,  720,    0,  720,
  720,  720,  720,    0,    0,  720,    0,  720,    0,  720,
  720,  720,    0,    0,  720,  720,    0,  720,  720,  720,
    0,    0,    0,    0,    0,    0,  720,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  720,  720,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  720,  720,    0,  720,  720,  720,    0,  720,
  720,  720,  720,  720,  720,  720,  720,  720,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  728,  728,    0,  728,    0,    0,    0,    0,  728,    0,
    0,  728,    0,  728,  728,  728,  728,  728,  728,  728,
    0,  728,  728,  728,  728,    0,  728,  728,    0,    0,
  728,  728,  728,  728,    0,    0,  728,  728,  728,    0,
    0,    0,    0,    0,  729,    0,  728,    0,  728,    0,
    0,  728,    0,    0,    0,    0,  728,    0,    0,    0,
    0,    0,  728,  728,  728,  728,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  729,    0,    0,
    0,    0,  729,    0,    0,  729,  729,    0,  729,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  728,    0,
  728,  728,  728,  729,  729,  729,  729,    0,    0,    0,
    0,    0,    0,    0,  728,  728,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  728,    0,    0,    0,  729,  728,  728,  728,  728,
  728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
  728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
  728,  728,  728,  728,    0,    0,    0,  729,  728,  729,
    0,  728,  728,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  728,  728,
  728,  728,    0,  728,  728,  728,  728,    0,    0,  728,
    0,  728,    0,  728,  728,  728,    0,    0,  728,  728,
    0,  728,  728,  728,    0,    0,    0,    0,    0,    0,
  728,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  728,  728,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  728,  728,    0,  728,
  728,  728,    0,  728,  728,  728,  728,  728,  728,  728,
  728,  728,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  729,  729,    0,  729,    0,    0,
    0,    0,  729,    0,    0,  729,    0,  729,  729,  729,
  729,  729,  729,  729,    0,  729,  729,  729,  729,    0,
  729,  729,    0,    0,  729,  729,  729,  729,    0,    0,
  729,  729,  729,    0,    0,    0,    0,    0,  730,    0,
  729,    0,  729,    0,    0,  729,    0,    0,    0,    0,
  729,    0,    0,    0,    0,    0,  729,  729,  729,  729,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  730,    0,    0,    0,    0,  730,    0,    0,  730,
  730,    0,  730,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  729,    0,  729,  729,  729,  730,  730,  730,
  730,    0,    0,    0,    0,    0,    0,    0,  729,  729,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  729,    0,    0,    0,  730,
  729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
  729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
  729,  729,  729,  729,  729,  729,  729,  729,    0,    0,
    0,  730,  729,  730,    0,  729,  729,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  729,  729,  729,  729,    0,  729,  729,  729,
  729,    0,    0,  729,    0,  729,    0,  729,  729,  729,
    0,    0,  729,  729,    0,  729,  729,  729,    0,    0,
    0,    0,    0,    0,  729,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  729,  729,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  729,  729,    0,  729,  729,  729,    0,  729,  729,  729,
  729,  729,  729,  729,  729,  729,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  730,  730,
    0,  730,    0,    0,    0,    0,  730,    0,    0,  730,
    0,  730,  730,  730,  730,  730,  730,  730,    0,  730,
  730,  730,  730,    0,  730,  730,    0,    0,  730,  730,
  730,  730,    0,    0,  730,  730,  730,    0,    0,    0,
    0,    0,  731,    0,  730,    0,  730,    0,    0,  730,
    0,    0,    0,    0,  730,    0,    0,    0,    0,    0,
  730,  730,  730,  730,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  731,    0,    0,    0,    0,
  731,    0,    0,  731,  731,    0,  731,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  730,    0,  730,  730,
  730,  731,  731,  731,  731,    0,    0,    0,    0,    0,
    0,    0,  730,  730,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  730,
    0,    0,    0,  731,  730,  730,  730,  730,  730,  730,
  730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
  730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
  730,  730,    0,    0,    0,  731,  730,  731,    0,  730,
  730,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  730,  730,  730,  730,
    0,  730,  730,  730,  730,    0,    0,  730,    0,  730,
    0,  730,  730,  730,    0,    0,  730,  730,    0,  730,
  730,  730,    0,    0,    0,    0,    0,    0,  730,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  730,  730,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  730,  730,    0,  730,  730,  730,
    0,  730,  730,  730,  730,  730,  730,  730,  730,  730,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  731,  731,    0,  731,    0,    0,    0,    0,
  731,    0,    0,  731,    0,  731,  731,  731,  731,  731,
  731,  731,    0,  731,  731,  731,  731,    0,  731,  731,
    0,    0,  731,  731,  731,  731,    0,    0,  731,  731,
  731,    0,    0,    0,    0,    0,  697,    0,  731,    0,
  731,    0,    0,  731,    0,    0,    0,    0,  731,    0,
    0,    0,    0,    0,  731,  731,  731,  731,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  697,
    0,    0,    0,    0,  697,    0,    0,  697,  697,    0,
  697,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  731,    0,  731,  731,  731,  697,  697,  697,  697,    0,
    0,    0,    0,    0,    0,    0,  731,  731,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  731,    0,    0,    0,  697,  731,  731,
  731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
  731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
  731,  731,  731,  731,  731,  731,    0,    0,    0,  697,
  731,  697,    0,  731,  731,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  731,  731,  731,  731,    0,  731,  731,  731,  731,    0,
    0,  731,    0,  731,    0,  731,  731,  731,    0,    0,
  731,  731,    0,  731,  731,  731,    0,    0,    0,    0,
    0,    0,  731,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  731,  731,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  731,  731,
    0,  731,  731,  731,    0,  731,  731,  731,  731,  731,
  731,  731,  731,  731,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  697,  697,    0,  697,
    0,    0,    0,    0,  697,    0,    0,  697,    0,  697,
  697,  697,  697,  697,  697,  697,    0,  697,  697,  697,
  697,    0,  697,  697,    0,    0,  697,  697,  697,  697,
    0,    0,  697,  697,  697,    0,    0,    0,    0,    0,
  718,    0,  697,    0,  697,    0,    0,  697,    0,    0,
    0,    0,  697,    0,    0,    0,    0,    0,  697,  697,
  697,  697,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  718,    0,    0,    0,    0,    0,    0,
  718,  718,    0,    0,  718,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  697,    0,  697,  697,  697,  718,
    0,  718,  718,    0,    0,    0,    0,    0,    0,    0,
  697,  697,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  697,    0,    0,
    0,    0,  697,  697,  697,  697,  697,  697,  697,  697,
  697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
  697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
    0,    0,    0,  718,  697,  718,    0,  697,  697,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  697,  697,  697,  697,    0,  697,
  697,  697,  697,    0,    0,  697,    0,  697,    0,  697,
  697,  697,    0,    0,  697,  697,    0,  697,  697,  697,
    0,    0,    0,    0,    0,    0,  697,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  697,  697,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  697,  697,    0,  697,  697,  697,    0,  697,
  697,  697,  697,  697,  697,  697,  697,  697,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  718,  718,    0,  718,    0,    0,   67,   68,  718,   69,
    0,  718,    0,  718,  718,  718,  718,  718,  718,  718,
    0,  718,  718,  718,  718,    0,  718,  718,    0,    0,
  718,  718,  718,  718,    0,    0,  718,  718,  718,    0,
  371,   52,    0,    0,    0,    0,  718,    0,  718,    0,
    0,  718,    0,    0,    0,    0,  718,    0,    0,    0,
    0,    0,  718,  718,  718,  718,    0,    0,    0,  372,
    0,    0,    0,  373,    0,    0,  374,  375,    0,    0,
    0,  376,  377,  378,  379,  380,  381,  382,  383,  384,
  385,  386,  387,    0,    0,    0,    0,    0,  718,  388,
   52,    0,  389,    0,    0,    0,    0,    0,    0,  390,
    0,  156,    0,    0,  718,  718,    0,    0,  391,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  718,    0,    0,    0,    0,  718,  718,  718,  718,
  718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
  718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
  718,  718,  718,  718,   52,    0,   52,    0,  718,    0,
    0,  718,  718,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  718,  718,
  718,  718,    0,  718,  718,  718,  718,    0,    0,  718,
    0,  718,    0,  718,  718,  718,    0,    0,  718,  718,
    0,  718,  718,  718,    0,    0,    0,    0,    0,    0,
  718,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  718,  718,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  718,  718,    0,  718,
  718,  718,    0,  718,  718,  718,  718,  718,  718,  718,
  718,  718,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   52,    0,    0,   52,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   52,    0,    0,    0,   52,   52,
   52,    0,   52,   52,   52,   52,    0,   52,   52,   52,
    0,   52,   52,   52,   52,    0,    0,   52,   52,   52,
    0,    0,    0,    0,    0,    0,    0,    0,  590,  127,
  591,   54,    0,  128,  129,  130,  131,  132,    0,  133,
  134,  135,  136,   52,  137,  138,    0,    0,  139,  140,
  141,  142,    0,    0,   98,  143,  144,    0,    0,    0,
   52,    0,    0,    0,  145,    0,  146,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   52,  147,  148,  149,    0,   52,   52,    0,    0,    0,
   54,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  156,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  150,   52,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   52,    0,    0,    0,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   54,    0,   54,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   52,
   52,   52,   52,    0,   52,   52,   52,   52,    0,    0,
   52,    0,   52,    0,   52,   52,   52,   52,    0,   52,
   52,    0,   52,   52,   52,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  105,  105,    0,  105,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   52,
   52,    0,    0,    0,    0,    0,    0,    0,  105,    0,
    0,    0,    0,    0,    0,    0,    0,   52,   52,    0,
   52,   52,   52,    0,   52,   52,   52,   52,   52,   52,
   52,   52,   52,  156,    0,    0,    0,  105,    0,    0,
    0,  105,    0,    0,  105,  105,    0,    0,    0,  105,
  105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
  105,   54,    0,    0,   54,    0,    0,  105,    0,    0,
  105,    0,    0,    0,   54,    0,    0,  105,   54,   54,
   54,    0,   54,   54,   54,   54,  105,   54,   54,   54,
    0,   54,   54,   54,   54,    0,    0,   54,   54,   54,
    0,    0,    0,    0,    0,    0,    0,    0,  278,  127,
  279,   55,    0,  128,  129,  130,  131,  132,    0,  133,
  134,  135,  136,   54,  137,  138,    0,    0,  139,  140,
  141,  142,    0,    0,    0,  143,  144,    0,    0,    0,
   54,    0,    0,    0,  145,    0,  146,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   54,  147,  148,  149,    0,   54,   54,    0,    0,    0,
   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  156,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  150,   54,   54,   54,
   54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
   54,   54,   54,   54,   54,    0,    0,    0,   54,   54,
   54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
   54,   54,   54,   54,   55,    0,   55,    0,    0,  914,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   54,
   54,   54,   54,    0,   54,   54,   54,   54,    0,    0,
   54,    0,   54,    0,   54,   54,   54,   54,    0,   54,
   54,  127,   54,   54,   54,  128,  129,  130,  131,  132,
    0,  133,  134,  135,  136,    0,  137,  138,    0,    0,
  139,  140,  141,  142,    0,    0,    0,  143,  144,    0,
    0,    0,    0,    0,    0,    0,  145,    0,  146,   54,
   54,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  147,  148,  149,    0,   54,   54,    0,
   54,   54,   54,    0,   54,   54,   54,   54,   54,   54,
   54,   54,   54,  226,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  150,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   55,    0,    0,   55,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   55,    0,    0,    0,   55,   55,
   55,    0,   55,   55,   55,   55,    0,   55,   55,   55,
    0,   55,   55,   55,   55,    0,    0,   55,   55,   55,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  127,
    0,   56,    0,  128,  129,  130,  131,  132,    0,  133,
  134,  135,  136,   55,  137,  138,    0,    0,  139,  140,
  141,  142,    0,    0,    0,  143,  144,    0,    0,    0,
   55,    0,    0,    0,  145,    0,  146,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   55,  147,  148,  149,    0,   55,   55,    0,    0,    0,
   56,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  233,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  150,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,    0,    0,    0,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   56,    0,   56,    0,    0,  233,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   55,
   55,   55,   55,    0,   55,   55,   55,   55,    0,    0,
   55,    0,   55,    0,   55,   55,   55,   55,    0,   55,
   55,  226,   55,   55,   55,  226,  226,  226,  226,  226,
    0,  226,  226,  226,  226,    0,  226,  226,    0,    0,
  226,  226,  226,  226,    0,    0,    0,  226,  226,    0,
    0,    0,    0,    0,    0,    0,  226,    0,  226,   55,
   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  226,  226,  226,    0,   55,   55,    0,
   55,   55,   55,    0,   55,   55,   55,   55,   55,   55,
   55,   55,   55,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  226,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   56,    0,    0,   56,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   56,    0,    0,    0,   56,   56,
   56,    0,   56,   56,   56,   56,    0,   56,   56,   56,
    0,   56,   56,   56,   56,    0,    0,   56,   56,   56,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  233,
    0,   53,    0,  233,  233,  233,  233,  233,    0,  233,
  233,  233,  233,   56,  233,  233,    0,    0,  233,  233,
  233,  233,    0,    0,    0,  233,  233,    0,    0,    0,
   56,    0,    0,    0,  233,    0,  233,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   56,  233,  233,  233,    0,   56,   56,    0,    0,    0,
   53,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  226,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  233,   56,   56,   56,
   56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
   56,   56,   56,   56,   56,    0,    0,    0,   56,   56,
   56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
   56,   56,   56,   56,   53,    0,   53,    0,    0,  226,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   56,
   56,   56,   56,    0,   56,   56,   56,   56,    0,    0,
   56,    0,   56,    0,   56,   56,   56,   56,    0,   56,
   56,    0,   56,   56,   56,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   61,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   56,
   56,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   56,   56,    0,
   56,   56,   56,    0,   56,   56,   56,   56,   56,   56,
   56,   56,   56,    0,    0,    0,    0,    0,    0,   61,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   53,    0,    0,   53,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   53,    0,    0,    0,   53,   53,
   53,    0,   53,   53,   53,   53,    0,   53,   53,   53,
    0,   53,   53,   53,   53,    0,    0,   53,   53,   53,
    0,    0,    0,   61,    0,   61,    0,    0,    0,  226,
   34,    0,    0,  226,  226,  226,  226,  226,    0,  226,
  226,  226,  226,   53,  226,  226,    0,    0,  226,  226,
  226,  226,    0,    0,    0,  226,  226,    0,    0,    0,
   53,    0,    0,    0,  226,    0,  226,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   53,  226,  226,  226,    0,   53,   53,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  555,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  226,   53,   53,   53,
   53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
   53,   53,   53,   53,   53,    0,    0,    0,   53,   53,
   53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
   53,   53,   53,   53,    0,   62,    0,    0,    0,    0,
   61,    0,    0,   61,    0,    0,    0,    0,    0,   53,
   53,   53,   53,   61,   53,   53,   53,   53,    0,    0,
   53,    0,   53,    0,   53,   53,   53,   53,    0,   53,
   53,    0,   53,   53,   53,    0,   61,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   62,    0,    0,    0,    0,    0,
    0,    0,   61,    0,    0,    0,    0,    0,    0,   53,
   53,    0,    0,    0,    0,    0,    0,    0,    0,   61,
    0,    0,    0,    0,    2,    0,    0,   53,   53,    0,
   53,   53,   53,    0,   53,   53,   53,   53,   53,   53,
   53,   53,   53,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   62,    0,
   62,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   61,    0,  546,    0,    0,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,    0,    0,    0,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,    0,   65,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   61,   61,
   61,   61,    0,   61,   61,   61,   61,    0,    0,   61,
    0,   61,    0,   61,   61,   61,   61,    0,   61,   61,
    0,   61,   61,   61,    0,    0,    0,    0,    0,    0,
  547,    0,    5,    6,    7,    0,    0,    0,    0,    0,
    0,    0,    0,   65,  548,    0,    0,    0,    0,  549,
    0,    0,    8,    9,    0,    0,    0,    0,   61,   61,
    0,    0,    0,    0,    0,   62,    0,    0,   62,   10,
   11,   12,   13,    0,  550,  551,   61,   61,   62,   61,
   61,   61,    0,   61,   61,   61,   61,   61,   61,   61,
   61,   61,    0,    0,  552,    0,    0,    0,    0,    0,
    0,   62,    0,    0,    0,    0,    0,   65,    0,   65,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   62,    0,  553,
  554,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   62,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   27,   28,   29,   30,
   31,   32,   33,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   62,    0,    0,    0,
    0,   62,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   62,   62,   62,   62,   62,   62,    0,
    0,    0,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   62,   62,   62,   62,   62,    0,   66,
    0,    0,    0,    0,   65,    0,    0,   65,    0,    0,
    0,    0,    0,   62,   62,   62,   62,   65,   62,   62,
   62,   62,    0,    0,   62,    0,   62,    0,   62,   62,
   62,   62,    0,   62,   62,    0,   62,   62,   62,    0,
   65,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   66,    0,
    0,    0,    0,    0,    0,    0,   65,    0,    0,    0,
    0,    0,    0,   62,   62,    0,    0,    0,    0,    0,
    0,    0,    0,   65,    0,    0,    0,    0,    0,    0,
    0,   62,   62,    0,   62,   62,   62,    0,   62,   62,
   62,   62,   62,   62,   62,   62,   62,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   66,    0,   66,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   65,    0,    0,    0,    0,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,    0,    0,
    0,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,    0,    0,    0,
    0,    0,    0,  587,    0,    0,    0,    0,    0,    0,
    0,    0,   65,   65,   65,   65,    0,   65,   65,   65,
   65,    0,    0,   65,    0,   65,    0,   65,   65,   65,
   65,    0,   65,   65,    0,   65,   65,   65,    0,    0,
    0,    0,    0,  587,  587,    0,    0,  587,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  587,    0,  587,    0,    0,    0,    0,    0,
    0,    0,   65,   65,    0,    0,    0,    0,    0,   66,
    0,    0,   66,    0,    0,    0,    0,    0,    0,    0,
   65,   65,   66,   65,   65,   65,    0,   65,   65,   65,
   65,   65,   65,   65,   65,   65,    0,    0,    0,    0,
    0,    0,  396,   97,    0,   66,    0,    0,   99,    0,
  100,    0,    0,    0,    0,    0,  587,  101,  587,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   66,    0,    0,  102,  397, 1123,  398,  399,  400,
  401,  402,    0,    0,    0,    0,  403,    0,   66,  103,
    0,    0,    0,    0,    0,  404,    0,    0,    0,    0,
  405,    0,  406,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  407,  408,  409,  410,  411,  412,
  413,  414,    0,    0,    0,    0,    0,  415,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   66,    0,    0,    0,    0,   66,   66,   66,   66,   66,
   66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,   66,   66,    0,    0,    0,   66,   66,   66,   66,
   66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,   66,    0,    0,  585,    0,    0,    0,    0,    0,
    0,    0,    0,  587,  587,    0,  587,   66,   66,   66,
   66,    0,   66,   66,   66,   66,  587,  587,   66,    0,
   66,    0,   66,   66,   66,   66,    0,   66,   66,    0,
   66,   66,   66,    0,  585,  585,    0,    0,  585,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  585,  587,  585,    0,    0,    0,  587,
    0,    0,    0,    0,    0,  587,    0,   66,   66,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   66,   66,    0,   66,   66,
   66,    0,   66,   66,   66,   66,   66,   66,   66,   66,
   66, 1083,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  585,    0,  585,
 1084, 1085,    0, 1086, 1087, 1088, 1089, 1090, 1091,    0,
 1092, 1093,    0, 1094, 1095, 1096, 1097, 1098,    0,  587,
  587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
  587,  587,  587,  587,  587,  587,  587,    0,    0,    0,
  587,  587,  587,  587,  587,  587,  587,    0,    0,    0,
    0,  587,    0,    0,  587,  587,    0,    0,  586,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  587,  587,  587,  587,    0,  587,  587,  587,  587,
    0,    0,  587,    0,  587,    0,  587,  587,  587,    0,
    0,  587,  587,    0,  587,  587,  587,    0,  586,  586,
    0,    0,  586,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  586,    0,  586,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  587,  587,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  585,  585,  587,
  587,    0,  587,  587,  587,    0,  587,  587,  587,  587,
  587,  587,  587,  587,  587,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  586,    0,  586,    0,  585,    0,    0,    0,    0,
  585,    0,    0,    0,    0,    0,  585,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1099, 1100,
    0, 1101, 1102, 1103,    0, 1104, 1105,    0,    0, 1106,
 1107,    0, 1108,    0,    0,    0,    0,    0,    0,    0,
    0,   33,    0,    0,    0, 1109, 1110, 1111, 1112, 1113,
 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
  585,  585,  585,  585,  585,  585,  585,  585,    0,    0,
   33,  585,  585,  585,  585,  585,  585,  585,    0,    0,
    0,    0,  585,    0,    0,  585,  585,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  585,  585,  585,  585,    0,  585,  585,  585,
  585,  586,  586,  585,    0,  585,    0,  585,  585,  585,
    0,    0,  585,  585,    0,  585,  585,  585,    0,    0,
    0,    0,    0,    0,   33,    0,   33,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  586,
    0,    0,    0,    0,  586,    0,    0,    0,    0,    0,
  586,    0,  585,  585,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  585,  585,    0,  585,  585,  585,    0,  585,  585,  585,
  585,  585,  585,  585,  585,  585,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  586,  586,  586,  586,  586,  586,
  586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
  586,  586,    0,    0,    0,  586,  586,  586,  586,  586,
  586,  586,    0,    0,    0,    0,  586,    0,    0,  586,
  586,   33,   34,    0,   33,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   33,    0,  586,  586,  586,  586,
    0,  586,  586,  586,  586,    0,    0,  586,    0,  586,
    0,  586,  586,  586,    0,    0,  586,  586,    0,  586,
  586,  586,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   33,    0,    0,   34,    0,   34,    0,
    0,    0,    0,    0,    0,    0,  586,  586,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  586,  586,    0,  586,  586,  586,
    0,  586,  586,  586,  586,  586,  586,  586,  586,  586,
    0,    0,    0,    0,    0,    0,  788,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   33,    0,    0,    0,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,    0,  788,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   33,
   33,   33,   33,    0,   33,   33,   33,   33,    0,    0,
   33,    0,   33,   34,    0,   33,   34,    0,    0,    0,
    0,    0,   33,   33,   33,    0,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  788,
    0,  788,    0,    0,    0,    0,    0,    0,    0,   33,
   33,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   34,    0,   33,   33,    0,
   33,   33,   33,    0,   33,   33,   33,   33,   33,   33,
   33,   33,   33,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  790,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  802,    0,    0,    0,    0,    0,    0,    0,   34,
   34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
   34,   34,   34,   34,   34,   34,   34,    0,    0,  790,
   34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
   34,   34,   34,   34,   34,   34,  788,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  788,
  802,   34,   34,   34,   34,    0,   34,   34,   34,   34,
    0,    0,   34,    0,   34,    0,    0,   34,    0,    0,
    0,    0,    0,    0,   34,   34,   34,    0,    0,    0,
    0,    0,    0,  790,    0,  790,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  788,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   34,   34,    0,    0,    0,  802,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   34,
   34,    0,   34,   34,   34,    0,   34,   34,   34,   34,
   34,   34,   34,   34,   34,    0,    0,    0,    0,    0,
    0,    0,  794,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  788,  788,  788,  788,  788,  788,  788,  788,
  788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
    0,    0,    0,  788,  788,  788,  788,  788,  788,  788,
  788,  788,  788,  788,  788,  788,  788,  788,  788,    0,
    0,  794,    0,    0,    0,    0,    0,    0,    0,    0,
  790,    0,    0,    0,  788,  788,  788,  788,    0,  788,
  788,  788,  788,  790,    0,  788,    0,  788,    0,    0,
  788,    0,    0,    0,    0,    0,    0,  788,  788,  788,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  802,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  794,    0,  794,    0,    0,
    0,    0,  790,    0,  788,  788,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  788,  788,    0,  788,  788,  788,    0,  788,
  788,  788,  788,  788,  788,  788,  788,  788,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  792,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  790,  790,  790,  790,
  790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
  790,  790,  790,  790,    0,    0,    0,  790,  790,  790,
  790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
  790,  790,  790,    0,    0,  792,    0,    0,    0,    0,
  802,  802,  802,  802,  802,    0,    0,    0,  790,  790,
  790,  790,  794,  790,  790,  790,  790,    0,    0,  790,
    0,  790,  802,  802,  790,  794,    0,    0,    0,    0,
    0,  790,  790,  790,    0,    0,    0,    0,    0,  802,
  802,  802,  802,    0,    0,    0,  802,  802,    0,    0,
    0,    0,  802,    0,  802,  802,    0,    0,    0,  792,
    0,  792,  802,  802,    0,    0,    0,    0,  790,  790,
    0,    0,    0,    0,  794,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  790,  790,    0,  790,
  790,  790,    0,  790,  790,  790,  790,  790,  790,  790,
  790,  790,    0,    0,    0,    0,    0,    0,    0,  796,
    0,    0,    0,    0,    0,    0,    0,  802,  802,    0,
  802,  802,  802,    0,  802,  802,  802,  802,  802,  802,
  802,  802,  802,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  794,  794,
  794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
  794,  794,  794,  794,  794,  794,    0,    0,  796,  794,
  794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
  794,  794,  794,  794,  794,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  792,    0,    0,    0,
  794,  794,  794,  794,    0,  794,  794,  794,  794,  792,
    0,  794,    0,  794,    0,    0,  794,    0,    0,    0,
    0,    0,    0,  794,  794,  794,    0,    0,    0,    0,
    0,    0,  796,    0,  796,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  792,    0,
  794,  794,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  794,  794,
    0,  794,  794,  794,    0,  794,  794,  794,  794,  794,
  794,  794,  794,  794,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  746,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  792,  792,  792,  792,  792,  792,  792,  792,
  792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
    0,    0,    0,  792,  792,  792,  792,  792,  792,  792,
  792,  792,  792,  792,  792,  792,  792,  792,  792,  796,
  746,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  796,    0,  792,  792,  792,  792,    0,  792,
  792,  792,  792,    0,    0,  792,    0,  792,    0,    0,
  792,    0,    0,    0,    0,    0,    0,  792,  792,  792,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  796,    0,    0,  746,    0,  746,    0,    0,    0,
    0,    0,    0,    0,  792,  792,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  792,  792,    0,  792,  792,  792,    0,  792,
  792,  792,  792,  792,  792,  792,  792,  792,    0,    0,
    0,    0,    0,    0,  748,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  796,  796,  796,  796,  796,
  796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
  796,  796,  796,    0,    0,    0,  796,  796,  796,  796,
  796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
  796,  796,    0,  748,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  796,  796,  796,
  796,    0,  796,  796,  796,  796,    0,    0,  796,    0,
  796,  746,    0,  796,  746,    0,    0,    0,    0,    0,
  796,  796,  796,    0,  746,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  748,    0,  748,
    0,    0,    0,    0,    0,    0,    0,  796,  796,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  746,    0,  796,  796,    0,  796,  796,
  796,    0,  796,  796,  796,  796,  796,  796,  796,  796,
  796,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  401,    0,    0,  746,  746,  746,
  746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
  746,  746,  746,  746,  746,    0,    0,    0,  746,  746,
  746,  746,  746,  746,  746,    0,    0,    0,    0,  746,
    0,    0,  746,  746,  748,    0,    0,  748,  401,    0,
    0,    0,    0,    0,    0,    0,    0,  748,    0,  746,
  746,  746,  746,  401,  746,  746,  746,  746,    0,    0,
  746,    0,  746,    0,  746,  746,  746,    0,    0,  746,
  746,    0,  746,  746,  746,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  156,    0,    0,  748,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  746,
  746,    0,    0,    0,    0,    0,    0,  401,    0,  401,
    0,    0,    0,    0,    0,    0,    0,  746,  746,    0,
  746,  746,  746,    0,  746,  746,  746,  746,  746,  746,
  746,  746,  746,    0,    0,    0,    0,    0,    0,    0,
    0,  155,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  443,    0,    0,    0,    0,    0,    0,    0,    0,
  748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
  748,  748,  748,  748,  748,  748,  748,  748,    0,    0,
    0,  748,  748,  748,  748,  748,  748,  748,    0,    0,
    0,    0,  748,    0,    0,  748,  748,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  443,    0,  748,  748,  748,  748,    0,  748,  748,  748,
  748,    0,    0,  748,    0,  748,    0,  748,  748,  748,
    0,    0,  748,  748,    0,  748,  748,  748,    0,    0,
    0,    0,    0,    0,  401,    0,    0,  401,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  401,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  748,  748,  443,    0,  443,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  748,  748,  211,  748,  748,  748,    0,  748,  748,  748,
  748,  748,  748,  748,  748,  748,  401,    0,    0,    0,
   67,   68,    0,   69,    0,    0,    0,    0,  126,   92,
    0,  127,    0,    0,    0,  128,  129,  130,  131,  132,
    0,  133,  134,  135,  136,    0,  137,  138,    0,    0,
  139,  140,  141,  142,    0,    0,   98,  143,  144,    0,
    0,  211,    0,    0,    0,    0,  145,    0,  146,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  147,  148,  149,    0,    0,   92,    0,
  401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
  401,  401,  401,  401,  401,  401,  401,  401,    0,    0,
    0,  401,  401,  401,  401,  401,  401,  401,  150,  151,
    0,  443,  401,    0,  443,  401,  401,  211,    0,    0,
    0,    0,    0,    0,  443,    0,    0,    0,    0,    0,
    0,    0,  401,  401,  401,  401,    0,  401,  401,  401,
  401,    0,    0,  401,   92,  401,    0,    0,  401,    0,
    0,    0,    0,   93,    0,  401,  401,  401,    0,    0,
    0,    0,    0,    0,  152,  153,  154,    0,    0,    0,
    0,    0,    0,  443,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   94,    0,    0,    0,    0,    0,
    0,    0,  401,  401,    0,    0,    0,    0,    0,    0,
    0,   13,    0,    0,    0,    0,    0,    0,    0,    0,
  401,  401,   93,  401,  401,  401,    0,  401,  401,  401,
  401,  401,  401,  401,  401,  401,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   94,    0,    0,    0,  443,  443,  443,
  443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
  443,  443,  443,  443,  443,  211,    0,    0,  443,  443,
  443,  443,  443,  443,  443,    0,    0,    0,   93,  443,
    0,    0,  443,  443,    0,    0,    0,    0,    0,    0,
    0,    0,   92,    0,    0,    0,  799,    0,    0,  443,
  443,  443,  443,    0,  443,  443,  443,  443,    0,   94,
  443,    0,  443,    0,  211,  443,    0,    0,    0,    0,
    0,    0,  443,  443,  443,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  799,    0,    0,    0,  443,
  443,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  443,  443,    0,
  443,  443,  443,    0,  443,  443,  443,  443,  443,  443,
  443,  443,  443,    0,    0,    0,    0,    0,    0,    0,
    0,  211,  211,  211,  211,  211,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  211,    0,    0,    0,    0,
  211,  799,    0,  211,  211,    0,   93,    0,   92,   92,
   92,   92,   92,    0,    0,    0,    0,    0,    0,    0,
  211,  211,  211,  211,    0,  211,  211,  211,  211,    0,
   92,   92,    0,  211,    0,    0,  211,   94,   47,    0,
    0,    0,    0,  211,  211,  211,    0,   92,   92,   92,
   92,    0,    0,    0,   92,   92,    0,    0,    0,    0,
   92,    0,    0,   92,    0,   48,    0,    0,    0,    0,
   92,   92,    0,    0,    0,    0,    0,    0,    0,    0,
  211,  211,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   47,  211,  211,
    0,  211,  211,  211,    0,  211,  211,  211,  211,  211,
  211,  211,  211,  211,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   48,   92,   92,    0,   92,   92,
   92,    0,   92,   92,   92,   92,   92,   92,   92,   92,
   92,    0,   93,   93,   93,   93,   93,    0,    0,  799,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   47,   93,   93,    0,    0,    0,    0,
    0,    0,    0,   94,   94,   94,   94,   94,    0,    0,
    0,   93,   93,   93,   93,    0,    0,    0,   93,   93,
   48,    0,    0,    0,   93,   94,   94,   93,   49,    0,
    0,    0,    0,    0,   93,   93,    0,    0,    0,    0,
    0,    0,   94,   94,   94,   94,    0,    0,    0,   94,
   94,    0,    0,    0,    0,   94,    0,    0,   94,    0,
    0,    0,    0,    0,    0,   94,   94,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   49,    0,   93,
   93,    0,   93,   93,   93,    0,   93,   93,   93,   93,
   93,   93,   93,   93,   93,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  799,  799,  799,  799,  799,
   94,   94,    0,   94,   94,   94,    0,   94,   94,   94,
   94,   94,   94,   94,   94,   94,    0,  799,  799,   50,
    0,   47,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   49,  799,  799,  799,  799,    0,    0,
    0,  799,  799,    0,    0,    0,    0,  799,   48,    0,
  799,    0,    0,    0,    0,    0,    0,  799,  799,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   50,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  799,  799,    0,  799,  799,  799,    0,  799,
  799,  799,  799,  799,  799,  799,  799,  799,    0,    0,
   51,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   50,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   47,   47,   47,
   47,   47,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   47,
   47,   49,    0,    0,   48,   48,   48,   48,   48,   51,
    0,    0,    0,    0,    0,    0,   47,   47,   47,   47,
    0,    0,    0,   47,   47,    0,   48,   48,    0,   47,
    0,    0,   47,    0,    0,    0,    0,    0,    0,   47,
   47,    0,    0,   48,   48,   48,   48,    0,    0,    0,
   48,   48,    0,    0,    0,    0,   48,    0,    0,   48,
    0,  802,    0,    0,    0,    0,   48,   48,    0,    0,
    0,    0,  897,    0,    0,   51,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   47,   47,    0,   47,   47,   47,
    0,   47,   47,   47,   47,   47,   47,   47,   47,   47,
    0,    0,   50,    0,    0,    0,    0,    0,    0,    0,
  802,   48,   48,    0,   48,   48,   48,    0,   48,   48,
   48,   48,   48,   48,   48,   48,   48,   49,   49,   49,
   49,   49,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   49,
   49,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   49,   49,   49,   49,
    0,    0,    0,   49,   49,    0,  802,    0,    0,   49,
    0,    0,   49,    0,    0,    0,    0,    0,    0,   49,
   49,    0,    0,    0,    0,    0,  856,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  857,    0,    0,   51,    0,  858,  859,    0,  860,  861,
  862,  863,  864,  865,    0,  866,  867,    0,  868,  869,
  870,  871,  872,    0,    0,    0,    0,    0,   50,   50,
   50,   50,   50,    0,   49,   49,    0,   49,   49,   49,
    0,   49,   49,   49,   49,   49,   49,   49,   49,   49,
   50,   50,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  873,    0,  874,   50,   50,   50,
   50,  875,    0,    0,   50,   50,    0,    0,    0,    0,
   50,  317,    0,   50,    0,    0,    0,  876,    0,    0,
   50,   50,    0,    0,    0,    0,    0,    0,    0,    0,
  317,  317,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  802,    0,    0,    0,    0,    0,
  877,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   51,
   51,   51,   51,   51,    0,   50,   50,    0,   50,   50,
   50,    0,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   51,   51,    0,  317,  237,  317,    0,    0,    0,
    0,  582,    0,    0,    0,    0,    0,    0,   51,   51,
   51,   51,    0,  237,    0,   51,   51,    0,    0,    0,
    0,   51,    0,    0,   51,    0,    0,    0,    0,    0,
    0,   51,   51,    0,    0,    0,    0,    0,    0,    0,
  878,    0,  879,  880,  881,  882,  883,  884,  885,  886,
  887,  888,  889,  890,  891,  892,  893,  894,  895,    0,
    0,    0,  896,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  237,    0,  237,
  802,  802,  802,  802,  802,    0,   51,   51,    0,   51,
   51,   51,  236,   51,   51,   51,   51,   51,   51,   51,
   51,   51,  802,  802,    0,    0,    0,    0,    0,    0,
  236,    0,    0,    0,    0,    0,    0,    0,    0,  802,
  802,  802,  802,    0,    0,    0,  802,  802,    0,    0,
    0,  317,  802,    0,  317,  802,    0,    0,    0,    0,
    0,    0,  802,  802,  317,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  236,    0,  236,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  802,  802,    0,
  802,  802,  802,    0,  802,  802,  802,  802,  802,  802,
  802,  802,  802,    0,  237,    0,    0,  237,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  237,  582,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  317,  317,  317,
  317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
    0,    0,    0,    0,  317,    0,    0,    0,  317,  317,
  317,  317,  317,  317,    0,    0,    0,    0,    0,    0,
    0,    0,  317,  317,    0,    0,  582,    0,    0,    0,
    0,  236,    0,    0,  236,    0,    0,    0,  543,  317,
  317,  317,  317,    0,  236,    0,    0,    0,    0,    0,
  317,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  317,  237,    0,    0,    0,    0,
  237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
  237,  237,  237,    0,    0,    0,    0,  237,    0,    0,
    0,  237,  237,  237,  237,  237,  237,    0,    0,  317,
  317,  317,  543,    0,  543,  237,  237,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   34,  237,  237,  237,  237,  317,  317,  317,  317,
  317,  317,  317,  237,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  237,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  236,    0,    0,    0,    0,  236,  236,  236,
  236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
    0,    0,  237,  237,  236,  335,    0,  790,  236,  236,
  236,  236,  236,  236,    0,    0,    0,    0,    0,    0,
    0,    0,  236,  236,   34,    0,    0,    0,    0,  237,
  237,  237,  237,  237,  237,  237,    0,    0,    0,  236,
  236,  236,  236,    0,    0,    0,    0,    0,    0,    0,
  236,    0,    0,    0,    0,    0,    0,    0,    0,  543,
    0,    0,  543,    0,  236,    0,    0,    0,    0,    0,
    0,    0,  543,  582,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  335,    0,
  981,    0,    0,    0,    0,    0,    0,    0,    0,  236,
  236,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  236,  236,  236,  236,
  236,  236,  236,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   67,    0,    0,   69,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    2,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  548,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  543,  543,  543,  543,  543,
  543,  543,  543,  543,  543,  543,  543,  543,    0,    0,
    0,    0,  543,    0,    0,    0,  543,  543,  543,  543,
  543,  543,    0,    0,    0,   67,    0,    0,   69,    0,
  543,  543,    0,    0,    0,    0,    0,    0,    2,  548,
    0,  548,    0,    0,    0,    0,    0,  543,  543,  543,
  543,    0,    0,    0,    0,    0,    0,    0,  543,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  543,    0,    0,    0,    0,    0,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,    0,    0,    0,    0,    7,    0,    0,    0,  325,
  326,  327,  328,  329,  330,    0,    0,  543,  543,    0,
    0,    0,    0,    8,    9,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   10,   11,   12,   13,  543,  543,  543,  543,  543,  543,
  543,  331,  372,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  332,    0,    0,    0,    0,
    0,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,    0,    0,  548,    0,    7,  548,
    0,    0,  325,  326,  327,  328,  329,  330,    0,  548,
  333,  334,    0,    0,    0,    0,    8,    9,    0,    0,
    0,    0,    0,    0,    0,    0,  372,    0,  372,    0,
    0,    0,    0,   10,   11,   12,   13,   27,   28,   29,
   30,   31,   32,   33,  331,  364,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  332,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  333,  334,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  364,
    0,  364,    0,    0,    0,    0,    0,    0,    0,    0,
   27,   28,   29,   30,   31,   32,   33,    0,  357,    0,
    0,    0,  548,  548,  548,  548,  548,  548,  548,  548,
  548,  548,  548,  548,  548,    0,    0,    0,    0,  548,
    0,    0,    0,  548,  548,  548,  548,  548,  548,    0,
    0,    0,    0,  372,    0,    0,  372,  548,  548,    0,
    0,    0,    0,    0,    0,    0,  372,    0,    0,    0,
    0,    0,    0,    0,  548,  548,  548,  548,    0,    0,
    0,    0,  357,    0,  357,  548,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  548,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  548,  548,  364,    0,    0,  364,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  364,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  548,  548,  548,  548,  548,  548,  548,    0,  211,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  372,
  372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
  372,  372,    0,    0,    0,    0,  372,    0,    0,    0,
  372,  372,  372,  372,  372,  372,    0,    0,    0,  357,
    0,    0,  357,    0,  372,  372,    0,    0,    0,    0,
    0,    0,  357,  211,    0,  211,    0,    0,    0,    0,
    0,  372,  372,  372,  372,    0,    0,    0,    0,    0,
    0,    0,  372,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  372,    0,    0,    0,
    0,    0,  364,  364,  364,  364,  364,  364,  364,  364,
  364,  364,  364,  364,  364,    0,    0,    0,    0,  364,
    0,    0,    0,  364,  364,  364,  364,  364,  364,    0,
    0,  372,  372,    0,    0,    0,    0,  364,  364,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  364,  364,  364,  364,  372,  372,
  372,  372,  372,  372,  372,  364,  542,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  364,
    0,    0,    0,    0,    0,  357,  357,  357,  357,  357,
  357,  357,  357,  357,  357,  357,  357,  357,   34,    0,
  211,    0,  357,  211,    0,    0,  357,  357,  357,  357,
  357,  357,    0,  211,  364,  364,    0,    0,    0,    0,
  357,  357,    0,    0,    0,    0,    0,    0,    0,    0,
  542,    0,  542,    0,    0,    0,    0,  357,  357,  357,
  357,  364,  364,  364,  364,  364,  364,  364,  357,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  357,    0,  569,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  357,  357,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  357,  357,  357,  357,  357,  357,
  357,    0,    0,    0,    0,    0,  211,  211,  211,  211,
  211,  211,  211,  211,  211,  211,  211,  211,  211,    0,
    0,    0,    0,  211,    0,    0,    0,  211,  211,  211,
  211,  211,  211,    0,    0,    0,    0,  542,    0,    0,
  542,  211,  211,    0,    0,    0,    0,    0,   34,    0,
  542,    0,    0,    0,    0,    0,    0,    0,  211,  211,
  211,  211,    0,    0,    0,    0,    0,    0,    0,  211,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    2,  211,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1206,    0,    0,    0,  211,  211,
  188,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  211,  211,  211,  211,  211,
  211,  211,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  542,  542,  542,  542,  542,  542,  542,
  542,  542,  542,  542,  542,  542,  188,    0,    0,    0,
  542,    0,    0,    2,  542,  542,  542,  542,  542,  542,
    0,    0,    0,    0,    0,    0,    0,    0,  542,  542,
    0,    0,    0,    0,    0,    0,    0,    0,    3,    4,
    5,    6,    7,    0,    0,  542,  542,  542,  542,    0,
    0,    0,    0,    0,    0,    0,  542,    0,    0,    0,
    8,    9,    0,    0,    0,    0,    0,    0,    0,    0,
  542,    0,    0,    0,    0,    0,    0,   10,   11,   12,
   13,    0,    2,    0,   14,   15,    0,    0,    0,    0,
   16,    0,    0,   17,    0,    0,    0,    0,    0,    0,
   18,   19,    0,    0,    0,  542,  542,    0,    0,    0,
    0,    0,    0,  156,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  546,  542,  542,  542,  542,  542,  542,  542,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
    4,    5,    6,    7,  188,   20,   21,    0,   22,   23,
   24,    0,   25,   26,   27,   28,   29,   30,   31,   32,
   33,    8,    9,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   10,   11,
   12,   13,    0,    0,    0,   14,   15,    0,    0,    0,
    0,   16,    0,  188,   17,    0,    0,    0,    0,    0,
    0,   18,   19,    0,    0,    0,    0,    0,  547,    0,
    5,    6,    7,  213,    0,    0,    0,    0,    0,    0,
    0,    0,  548,    0,    0,    0,    0,  549,    0,    0,
    8,    9,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   10,   11,   12,
   13,    0,  550,  551,    0,    0,   20,   21,    0,   22,
   23,   24,    0,   25,   26,   27,   28,   29,   30,   31,
   32,   33,  552,    0,    0,    0,    0,    0,    0,    0,
  188,    0,  188,  188,  188,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  188,    0,    0,    0,    0,  188,
    0,    0,  188,  188,    0,    0,    0,  553,  554,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  188,
  188,  188,  188,    0,  188,  188,    0,    0,    0,    0,
    0,    0,    0,    0,   27,   28,   29,   30,   31,   32,
   33,  127,    0,    0,  188,  128,  129,  130,  131,  132,
    0,  133,  134,  135,  136,    0,  137,  138,    0,    0,
  139,  140,  141,  142,  447,  156,    0,  143,  144,    0,
  296,    0,    0,    0,  295,    0,  145,    0,  146,  188,
  188,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  294,  147,  148,  149,    0,  448,    0,  449,
  450,  451,  452,    0,    0,    0,  188,  188,  188,  188,
  188,  188,  188,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  479,    0,    0,    0,    0,  150,    0,
    0,    0,    0,    0,    0,    0,  453,  454,  455,  456,
    0,    0,  457,    0,    0,    0,  458,  459,  460,    0,
    0,  213,    0,    0,    0,  213,  213,  213,  213,  213,
    0,  213,  213,  213,  213,    0,  213,  213,    0,    0,
  213,  213,  213,  213,  213,    0,    0,  213,  213,    0,
    0,    0,    0,    0,    0,    0,  213,    0,  213,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  213,  213,  213,    0,  213,    0,  213,
  213,  213,  213,    0,  156,    0,    0,    0,    0,  296,
    0,    0,    0,  750,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  213,    0,
    0,  294,    0,    0,    0,    0,  213,  213,  213,  213,
  461,    0,  213,    0,    0,    0,  213,  213,  213,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  479,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   67,   68,    0,   69,    0,    0,    0,    0,
  126,    0,    0,  127,    0,    0,    0,  128,  129,  130,
  131,  132,    0,  133,  134,  135,  136,    0,  137,  138,
    0,    0,  139,  140,  141,  142,    0,    0,   98,  143,
  144,    0,    0,    0,    0,    0,    0,    0,  145,    0,
  146,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  147,  148,  149,    0,    0,
  213,    0,    0,    0,  702,    0,    0,    0,    0,  702,
    0,    0,    0,  702,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  150,  702,  289,  290,  291,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  477,  478,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  702,  156,    0,    0,    0,    0,  296,    0,
    0,    0,  295,    0,    0,    0,    0,    0,    0,    0,
    0,   67,   68,    0,   69,    0,  152,  153,  154,  126,
  294,    0,  127,    0,    0,    0,  128,  129,  130,  131,
  132,    0,  133,  134,  135,  136,    0,  137,  138,    0,
    0,  139,  140,  141,  142,    0,    0,   98,  143,  144,
    0,  479,    0,    0,    0,    0,    0,  145,    0,  146,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  147,  148,  149,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  156,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  150,
    0,  289,  290,  291,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  477,  478,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  210,    0,    0,    0,    0,    0,
    0,  702,  702,    0,  702,  152,  153,  154,    0,  702,
    0,    0,  702,    0,  156,    0,  702,  702,  702,  702,
  702,    0,  702,  702,  702,  702,    0,  702,  702,    0,
    0,  702,  702,  702,  702,    0,    0,  702,  702,  702,
    0,    0,    0,    0,    0,    0,    0,  702,    0,  702,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   67,   68,    0,   69,  702,  702,  702,    0,  126,    0,
    0,  127,  210,    0,    0,  128,  129,  130,  131,  132,
    0,  133,  134,  135,  136,    0,  137,  138,    0,    0,
  139,  140,  141,  142,    0,    0,   98,  143,  144,  702,
    0,  702,  702,  702,    0,    0,  145,    0,  146,    0,
    0,    0,    0,    0,  156,  702,  702,    0,    0,    0,
    0,    0,    0,  147,  148,  149,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  702,  702,  702,  150,    0,
  289,  290,  291,   67,   68,    0,   69,    0,    0,    0,
    0,  126,  210,  156,  127,    0,    0,    0,  128,  129,
  130,  131,  132,    0,  133,  134,  135,  136,    0,  137,
  138,    0,    0,  139,  140,  141,  142,    0,    0,   98,
  143,  144,    0,    0,    0,    0,    0,    0,    0,  145,
    0,  146,    0,    0,  152,  153,  154,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  147,  148,  149,    0,
  966,  210,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   67,   68,    0,   69,    0,    0,    0,    0,  126,
    0,    0,  127,    0,    0,    0,  128,  129,  130,  131,
  132,  150,  133,  134,  135,  136,    0,  137,  138,    0,
    0,  139,  140,  141,  142,  967,  156,   98,  143,  144,
    0,    0,    0,    0,    0,    0,    0,  145,    0,  146,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  147,  148,  149,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  152,  153,  154,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  210,  156,    0,    0,    0,  150,
  151,   67,   68,    0,   69,    0,    0,    0,    0,  126,
    0,    0,  127,    0,    0,    0,  128,  129,  130,  131,
  132,    0,  133,  134,  135,  136,    0,  137,  138,    0,
    0,  139,  140,  141,  142,    0,    0,   98,  143,  144,
    0,    0,    0,    0,    0,    0,    0,  145,    0,  146,
    0,    0,    0,  210,    0,  152,  153,  154,    0,    0,
   67,   68,    0,   69,  147,  148,  149,    0,  126,    0,
    0,  127,    0,    0,    0,  128,  129,  130,  131,  132,
    0,  133,  134,  135,  136,    0,  137,  138,    0,    0,
  139,  140,  141,  142,  318,    0,   98,  143,  144,  150,
    0,    0,  565,    0,    0,    0,  145,    0,  146,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  147,  148,  149,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  159,    0,    0,    0,    0,
    0,    0,  318,    0,    0,  152,  153,  154,  577,    0,
    0,    0,    0,   67,   68,    0,   69,    0,    0,    0,
    0,  126,    0,    0,  127,    0,    0,    0,  128,  129,
  130,  131,  132,    0,  133,  134,  135,  136,    0,  137,
  138,    0,    0,  139,  140,  141,  142,    0,    0,   98,
  143,  144,    0,    0,  318,    0,    0,    0,    0,  697,
    0,  146,    0,    0,  152,  153,  154,    0,    0,    0,
    0,    0,   67,   68,    0,   69,  147,  148,  149,    0,
  126,    0,    0,  127,    0,    0,    0,  128,  129,  130,
  131,  132,    0,  133,  134,  135,  136,    0,  137,  138,
    0,    0,  139,  140,  141,  142,    0,    0,   98,  143,
  144,  150,  318,    0,    0,    0,    0,    0,  145,    0,
  146,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  147,  148,  149,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  152,  153,  154,
  759,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  318,    0,    0,    0,    0,  318,  318,  318,
  318,    0,  318,  318,  318,  318,    0,  318,  318,    0,
    0,  318,  318,  318,  318,    0,    0,    0,  318,  318,
    0,    0,    0,    0,    0,    0,    0,  318,    0,  318,
    0,    0,    0,    0,    0,    0,  152,  153,  154,    0,
    0,    0,    0,  159,  318,  318,  318,  159,  159,  159,
  159,  159,    0,  159,  159,  159,  159,    0,  159,  159,
    0,    0,  159,  159,  159,  159,    0,    0,    0,  159,
  159,    0,    0,    0,    0,    0,    0,    0,  159,  318,
  159,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  159,  159,  159,    0,    0,
    0,    0,  318,    0,    0,    0,    0,  318,  318,  318,
  318,    0,  318,  318,  318,  318,    0,  318,  318,    0,
    0,  318,  318,  318,  318,    0,    0,    0,  318,  318,
  159,    0,    0,    0,    0,    0,    0,  318,  856,  318,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  857,    0,  318,  318,  318,  858,  859,    0,
  860,  861,  862,  863,  864,  865,    0,  866,  867,    0,
  868,  869,  870,  871,  872,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  318,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  873,    0,  874,    0,
    0,    0,    0,  875,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  876,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  877,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  878,    0,  879,  880,  881,  882,  883,  884,
  885,  886,  887,  888,  889,  890,  891,  892,  893,  894,
  895,    0,    0,    0,  896,
};
static const YYINT yycheck[] = {                          4,
   24,   24,   92,  102,  103,  310,  310,  266,  310,  181,
  904,    1,   20,   21,   19,  990,    1,  167,    1,   93,
   24,   46,   27,   28,   29,   30,   22,   23,   64, 1010,
    1,   38,   13,   91,   41,  709,  838,   44,    1,  695,
   40,   43,    1,   24,  193,  194,  195,  196,  197,   76,
   24, 1255, 1180,  481,   38,  784,  264,   65,   46,   46,
   44,   41,   61,  125,   72,   41,  125, 1142,  167,  522,
  523,  524,   36,   37,   46,  365,  319,   59,   43,   41,
   45,   41,  105,  342,   91,  363,   41,   44,  470,  123,
   46,  190,   41, 1552,   46,  169,   60,   40,  188,   44,
  774,  263,   38,  111,  112,  128,   42,   91,  113,   40,
  115,  116,  117,   38,  482,   42,  215,   42,   59,   40,
  123,   46,   47,  104,   60,   38,   47,   41,  151,   42,
  104,   61,  262,   41,  502,   60,   42,  380,   40,   60,
   59,  145,  232,  125,  148,   40,   44,   60,  156,   41,
  155,  156,   42,   40,  181,   91,   91,   43,  288,  233,
   91,   42,   46,  199,  168,   41,   91,   44,  427,   41,
  429,   40,   40,   46,  155,   61,   41,   44,   91,   42,
  123,   40,  187,   40,  125,  208,  167,  916,  917,   91,
  280,   41,   43,  365,  344,   93,   43,  271,   44, 1403,
  205,  206,  320,  321,   91,  210,  125,   61,  267,   93,
   91,   38,  342,  221,  222,   42,   93,   41, 1677,   41,
   93,   40,   91,   91,  264,   46,   93,  232,  123,  210,
   93, 1306,   91,   60,  239,  964,  264,  265,  691,  203,
   61,   43,   93,   45,  334,   33,   93,   93,  256,  348,
   41,   42,  542,  261,  262,  263,  346,  265, 1152,  267,
  268,  269,  470,  262,   91,   91,  123,  996,  264,  273,
  266,  294,   91,  347,  270,  280,  281,  285,  301,  557,
  285,   38,  316,  288,  264,  293,  739,  292,  264,  288,
  262,  273,  297,  298,  299,  300,   41,  359, 1502,  303,
   91,  263,  364,  528,  394,  979,  263,  365,  311,  264,
   59,  347,  339,  263,  296,  264,  343,  325,  263,  327,
  310,  311,  345,  331,   59,  310,  311,  310,  311,  294,
  470,  339,  340,  260,  261,  343,  263,  299,  365,  310,
  311,  306,  307,   40,  123,  341,  342,  310,  311,  299,
  264,  310,  311,  274,  273,   40,  264,  365,  264,  324,
  320,  321,  318,  344,  345,  818,  318,  262,  349,  296,
  260,  261,  264,  263,  266,  349,  366,  367,  368,  369,
  470,  366, 1056,  366,  367,  368,  369,  351,  264,  391,
  125,   40,  264,  265,  286,  287,  421,  260,  261,  264,
  263,  264,   41,  391,  391,  262,  296,  434,  262,  374,
  418,  419,  275,  421,  264,  423,   40,  264,  359, 1400,
  339, 1549,   46,  364,  360,  361,  362,  409,  264,  425,
  438,  439,  604,  296,   40,  360,  361,  362,  528,  529,
  264,  265,  264,  615,   59,  468,   46,  360,  361,  362,
  903,  123,  452,  543, 1256,  391, 1584,  462,   38,  464,
   40,   46,   42,   44,  554,  505,  506,  507, 1539,  451,
   93,  479,  260,  261,  479,  263,  264,   58,  577,  461,
   60,  517,  464, 1541,  542,   91,  491, 1143,  496,  497,
  498,  919,  294,   93,   41,  476,   40,   44,  479, 1570,
   91,   40,  592,  499,  306,  307,   43,   44,   93,   47,
  125,   91,  431,  432, 1572,  262,  606,   61,  525,  264,
  265,  278,  324,  267,  281,  282,  283,  284,  123,  286,
  287,  288,  451,  360,  361,  362,  315,  316,  543,   41,
   42,  525,  550,  551,  463,  472,  465,  466,  622,  468,
  469,  123,   91,  535,  536,  537,  538,  539,  540,  541,
   91,  123,   59,  260,  261,  573,  263,  480,  576,  574,
  575,   91,  374,  600,  376,  598, 1557,  604,  123,  264,
  265,  266,  472, 1312, 1313,  123,   40,  592,  615,   91,
  762,  665,  600,  667,  535,  536,  537,  538,  539,  540,
  541,  286,  287,  260,  261,  260,  263,  615,  263,  472,
  359,  260,  261, 1588,  263,  364,  535,  536,  537,  538,
  539,  540,  541,   59,  359,  264,  265,  266,  125,  364,
   41,   42,  640,  597,  123,   38,  641,   91,   91,   42,
  676,  264,  647,  666,  123,  653,   44,  286,  287,   44,
  260,  261,  275,  263,  753,   40,  664,   60,  273,   59,
  759,  751,  752,  315,   62,  629,  630,   62,   46,  260,
  261,  635,  263,  637, 1568,  980,  980,  268,  980,  687,
   91,  262,  263,  706,  283,  284,   41,   42,   91,  125,
   41,   40,   43,  697,  843,   91,  845,  846,  847,  848,
  849,  123,   44,  777,  709,  296,   91,   40,  299,  714,
   40,  260,  261,  260,  263,  306,  263,   40,  726,  318,
   40, 1395,  260,  261,  339,  263,  749,   61,  711,  260,
  261,  727,  263,  738, 1542,  762,   91,  745,  746,   47,
  260,  261,   91,  263,   40,   46,  836,  752,   40,  713,
  773,  756,  757,  758,  260,  261,  264,  263,  766,   60,
  768,   91,  770,  786, 1493, 1573,  793,  275,   91,  774,
   44,   41,   46,  737,   40,  802,  273,   40, 1507,   40,
  360,  361,  362,   40,   40,  793,  535,  536,  537,  538,
  539,  540,  541,   40,   40,  803,  804,   40,   40,   91,
  535,  536,  537,  538,  539,  540,  541,  260,  261,  817,
  263,   41,   91,  470,   44,   40,  821,   40,  823,  909,
   40, 1495,   40,  414,  415,  416,  393,  394,   91,  834,
  904,   41,  840,   43,   91,   91,  451,  273,  260,  913,
   40,  263,  264,   40,  852,   91,  854,   38,  463,   91,
  465,  466,  462,  468,  469,   43,   44,   40,  457,  458,
  296,  460, 1591,   40,  260,  261,   91,  263,  374,  375,
   59,   40,  260,  261,  901,  263,   40,  277,  278,  279,
   59,  281,  282,  283,  284,   38,  286,  287,  288,   42,
  290,  291,  292,  293,   91,   40,  904,  297,  298,  989,
  904,  991,  260,  261, 1633,  263,  914,   60,   91, 1168,
 1534, 1170,   40,  462,   91,  260, 1540,  944,  263,  264,
  535,  536,  537,  538,  539,  540,  541,  424,  425,  426,
  427,   40,  123,  279,  280, 1664,  125,   41,   91, 1029,
   44,  965,   41,  289,   43,   44,  125, 1571,   40,  972,
 1679,  448,  449,  450,  451,  978,  939,  360,  361,  362,
 1634, 1035,   40,   91,  969,  365,  974,  306,  976,   44,
  997,   46,  999,  409,  979,  260,  261,  941,  263,  264,
   59,  260,  261,  264,  263,  266,  374,  375,  993,  997,
  980,  999,  982,  983,  984,  980,   41,  980,   43,  982,
  983,  984, 1676, 1077, 1027,  286,  287,  260,  261,  980,
  263,  982,  983, 1021,   91,  451, 1024,  980,  391,  982,
  983,  980,  393,  394,  294,  461, 1031,  266,  464,  391,
   41,  301,  391,  303,  304,  305,  264,  391,  535,  536,
  537,  538,  539,  540,  541,   41,  125,  286,  287,  269,
  267, 1056,  272,  281,  282,  283, 1130, 1207, 1208, 1209,
 1210,   41,  310,   91,  312,  313,  314, 1217, 1218, 1219,
   41,    0,  342,  343,  344,  295,  296,  330,  331,   44,
  300,   46,  302,   41,  273,   43,  997,  278,  999,  309,
  281,  282,  283,  284,  273,  286,  287,  288,   41,  535,
  536,  537,  538,  539,  540,  541,  326,  260,  261,  316,
  263,   41,   42, 1203, 1204,  891,  892, 1125,  388,  389,
  390,  341,  392,   42,   40,  395,  264,  265,  266,   40,
   59,   93,   61,   61,   40,  535,  536,  537,  538,  539,
  540,  541,  612,  613,  614, 1153, 1154, 1155,  286,  287,
   43,  263, 1160, 1161, 1162, 1163, 1164, 1165,   41, 1167,
 1168, 1169,   93, 1171, 1172, 1173, 1174, 1175, 1176, 1177,
 1166, 1179,  475, 1181, 1170, 1183,   40, 1185,   40,   40,
 1184,   40, 1178,  260,  261,   40,  263,  330,  331,  332,
  262,  268,  280,   93,  273, 1200,  125,   93,   40,  301,
 1227,  303,  304,  305,   40,  125, 1280,  360,  361,  362,
   91,   58, 1239,   41, 1241,   40, 1197,  296,   40,  296,
  330,  331,  332,  366,  367,  368, 1207, 1208, 1209, 1210,
   40,   91,  260,  261, 1242,  263, 1217, 1218, 1219, 1247,
  268,   40,  431,  432, 1249,  280,  281,  282,  283,  284,
 1258,  281,  282,  283,  284,   59,  366,  367,  368,   40,
 1268,   44,  451,   91, 1272, 1273,   41,  125,  296,   40,
   40,  123,  451,  262,  463, 1283,  465,   44,  306,  468,
  469,   41,  461,  294,   41,  464, 1385,   60,   41,  274,
  301,  463,  303,  304,  305,   41, 1304, 1305,   41,  260,
  261,   41,  263,   41, 1394,  280,  281,  282,  283,  284,
 1318, 1319, 1320, 1321, 1322, 1323, 1406, 1325,   41, 1578,
 1579,  125,   41,   40, 1307,   40,  274,   41, 1324,   41,
  409,  342,  343,  344,   41,   41,   41,  414,  415,  416,
  281,  282,  283,  284,  273, 1419,  535,  536,  537,  538,
  539,  540,  541,   41,   41,   41,  535,  536,  537,  538,
  539,  540,  541,  281,  282,  283,  284,  288, 1372,   62,
 1375,  275,  451,  281,  282,  283,  284,  388,  389,  390,
   44,  392,  461,  365,  395,  464,  414,  415,  416,  123,
 1395,  123,  123,  322,  355,  356,  357,  123,   58, 1404,
  260,  261,  274,  263, 1494,    0,   40,   40,  268,   41,
 1418,  467,  275,   61,  317,  317,   61, 1425,   61,  380,
   40,  470,  470,   44,   41,   93,   38,   41,   40,   58,
   42,   41,  260,  261,   41,  263,  296,   41,   33,   41,
  268,   41,   41,   38,  125,   40,   41,   42,   60,   44,
   44,   44,   47, 1436,  263,   61,  535,  536,  537,  538,
  539,  540,  541, 1553,   59,   60,   61,   62,  296,  273,
   61,  299,   40, 1496,  269,   40,  125,  272,  306,   91,
  409,  410,  411,  412,  413,   41,   40, 1561,   41,   41,
 1495,   41,   41,   41,  423,   41,   91,  274,   93,  428,
  295,  296,  431,  432,   93,  300,   93,  302, 1516, 1517,
 1518,  274,   41,  474,  309,  476,  477,  478,  479,  448,
  449,  450,  451,   44,  453,  454,  455,  456,  123,   41,
  125,  326,  461,   44,   41,  464,   44,   40,   58,   40,
   40,  294,  471,  472,  473,   41,  341,   41,  301,   40,
  303,  304,  305,   41,  414,  415,  416,   41,   41,   40,
   62, 1569,   41, 1637,  294,   91, 1574, 1575, 1576,   91,
 1578, 1670, 1580, 1581, 1582,   41,   40,  501,   40,  508,
  509,  277, 1586, 1579, 1674,  497,  414,  415,  416,  342,
  343,  344,  489,   41, 1602, 1603, 1604,  526,  527,  123,
  529,  530,  531,   61,  533,  534,  535,  536,  537,  538,
  539,  540,  541,   62,   61,  125,   41,   41,   41,   41,
  451,   93,  391,  427,   93,  429,  430,   41,  317, 1634,
   41,   40,  317,   40,   93,  388,  389,  390,   58,  392,
   58,   93,  395,   93,  448,  449,  450,  451,  260,  261,
 1673,  263,   93,   40,  263,  504,   91, 1665,   91,   40,
   40,   93,  123,   41,   41,  260,  261,  262,  263,   40,
   40, 1676,   41,  268,  421,   41,  271,   38,  273,  274,
  275,  276,  277,  278,  279,   41,  281,  282,  283,  284,
   93,  286,  287,  288,   59,  290,  291,  292,  293,   93,
   44,  296,  297,  298,  299,  260,  261,  510,  263,   41,
  274,  306,   58,  308,   41,   41,  311,   60,   93,   44,
  315,  316,   61,  318,   40,   40,   33,  322,  323,  324,
  325,  535,  536,  537,  538,  539,  540,  541,  260,  261,
  262,  263,  264,  125,  339,  294,  268,   40,  360,  361,
  362,   40,  301,   40,  303,  304,  305,   40,  123,   40,
  125,  283,  123,  358,  359,  360,  361,  362,   40,  364,
  365,   40,   40,  328,  296,  330,  331,   40,   40,  374,
  375,   41,  337,   62,   91,   93,   41,   93,   41,   93,
   41,   93,   41,  342,  343,  344,  391,   93,  320,  321,
   41,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  412,  413,  414,
  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,
  425,  426,  427,  428,  429,  430,  431,  432,   41,  388,
  389,  390,    0,  392,   41,   93,  395,   93,   41,   41,
   93,   41,   41,  448,  449,  450,  451,   93,  453,  454,
  455,  456,   93,   41,  459,   93,  461,   41,  463,  464,
  465,  466,   93,  468,  469,   33,  471,  472,  473,   41,
   38,   93,   40,   41,   42,  480,   44,   41,   41,   47,
   41,   93,  414,  415,  416,  260,  263,   41,  263,   93,
  274,   59,   60,   61,   62,   44,   41,   41,  273,   41,
   40,  263,   93,  508,  509,  510,   59,  278,   93,   40,
  281,  282,  283,  284,   93,  286,  287,  288,   40,   40,
   40,  526,  527,   91,  529,  530,  531,   41,  533,  534,
  535,  536,  537,  538,  539,  540,  541,  295,   41,   58,
   58,   58,  300,   41,  302,   41,   40,   40,  263,   41,
   93,  309,   41,   41,  271,  123,   93,  125,  275,  276,
  277,  278,  279,   93,  281,  282,  283,  284,  326,  286,
  287,   41,  125,  290,  291,  292,  293,   93,   40,   40,
  297,  298,   40,  341,   40,   40,   40,   59,  295,  306,
   40,  308,   40,  300,   40,  302,   40,   40,   40,   58,
   41,   40,  309,   93,   41,   40,  323,  324,  325,   60,
   93,   40,   40,   40,   91,   41,   40,  274,   41,  326,
  327,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  341,   41,   41,   41,  413,   40,
  263,  358,  417,  418,  419,  420,  421,  422,   41,   41,
   40,   40,   40,  125,  510,   41,  431,  432,  358,   41,
  274,   41,   41,  123,   41,  372,   44,   62,  125,   40,
  123,  123,   41,  448,  449,  450,  451,   62,  123,   41,
   41,   41,   41,  123,  459,   38,   41,  125,   62,  125,
  123,  123,  260,  261,  125,  263,   41,   41,  473,   40,
  268,   59,  123,  271,  123,  273,  274,  275,  276,  277,
  278,  279,  125,  281,  282,  283,  284,   40,  286,  287,
  273,  123,  290,  291,  292,  293,  123,   41,  296,  297,
  298,  299,  123,  508,  509,  416,    0, 1026,  306,  833,
  308,  900, 1003,  311,  746, 1512,  180, 1265,  316, 1188,
 1001, 1130,  706,  919,  322,  323,  324,  325, 1249, 1253,
  535,  536,  537,  538,  539,  540,  541,  125,  349,   33,
  123,  909,  476, 1266,   38,   24,   40,   41,   42,    9,
   44, 1192,  114,   47,  552,  906,   24,  610,  761,  765,
  358,  303,  360,  361,  362,   59,   60,   61,   62,  676,
  488,  273,   64,   -1,   -1,  367,  374,  375,  433,  434,
  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,
  445,  446,  447,  391,  296,   -1,   -1,   91,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  420,  421,  422,  423,   -1,   -1,   -1,  123,
  428,  125,   -1,  431,  432,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  448,  449,  450,  451,   -1,  453,  454,  455,  456,   -1,
   -1,  459,   -1,  461,   -1,  463,  464,  465,  451,   -1,
  468,  469,   -1,  471,  472,  473,   -1,  260,  461,   -1,
  263,  464,  480,   -1,   -1,  273,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,  281,  282,
  283,  284,   -1,  286,  287,  288,   -1,  409,  296,   -1,
  508,  509,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,
   -1,  529,  530,  531,   -1,  533,  534,  535,  536,  537,
  538,  539,  540,  541,   -1,   -1,   -1,   -1,   -1,  451,
   -1,   41,  535,  536,  537,  538,  539,  540,  541,  461,
   -1,   -1,  464,   -1,   -1,   -1,  260,  261,   -1,  263,
   -1,   -1,   -1,   -1,  268,   -1,   -1,  271,   -1,  273,
  274,  275,  276,  277,  278,  279,   -1,  281,  282,  283,
  284,   -1,  286,  287,   -1,   -1,  290,  291,  292,  293,
   -1,   -1,  296,  297,  298,  299,   -1,   -1,   -1,   -1,
    0,   -1,  306,   -1,  308,   -1,   -1,  311,   -1,   -1,
   -1,  409,  316,   -1,   -1,   -1,   -1,   -1,  322,  323,
  324,  325,   -1,  535,  536,  537,  538,  539,  540,  541,
   -1,   -1,   -1,   33,  260,  261,   -1,  263,   38,   -1,
   40,   41,   42,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  451,  358,   -1,  360,  361,  362,   59,
   60,   61,   62,  461,   -1,   -1,  464,   -1,   -1,   -1,
  374,  375,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,   -1,   -1,
   -1,   91,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
   -1,   -1,   -1,  123,  428,  125,   -1,  431,  432,  355,
  356,  357,   -1,   -1,   -1,   -1,   -1,  535,  536,  537,
  538,  539,  540,  541,  448,  449,  450,  451,   -1,  453,
  454,  455,  456,   -1,  380,  459,   -1,  461,   -1,  463,
  464,  465,   -1,   -1,  468,  469,   -1,  471,  472,  473,
   -1,   -1,   -1,   -1,   -1,   -1,  480,  277,  278,  279,
   -1,  281,  282,  283,  284,   -1,  286,  287,  288,   -1,
  290,  291,  292,  293,   -1,   -1,   -1,  297,  298,   -1,
   -1,   -1,   -1,   -1,  508,  509,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  526,  527,   -1,  529,  530,  531,   -1,  533,
  534,  535,  536,  537,  538,  539,  540,  541,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  474,   -1,
  476,  477,  478,  479,   -1,   -1,   -1,   -1,   -1,   -1,
  260,  261,   -1,  263,   -1,  365,   -1,   -1,  268,   -1,
   -1,  271,   -1,  273,  274,  275,  276,  277,  278,  279,
   -1,  281,  282,  283,  284,   -1,  286,  287,   -1,  123,
  290,  291,  292,  293,   -1,   -1,  296,  297,  298,  299,
   -1,   -1,   -1,   -1,    0,   -1,  306,   -1,  308,   -1,
   -1,  311,   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,
   -1,   -1,  322,  323,  324,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,
   -1,   -1,   38,   -1,   40,   41,   42,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,
  360,  361,  362,   59,   60,   61,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  374,  375,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  391,   -1,   -1,   -1,   91,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  420,  421,  422,  423,   -1,   -1,   -1,  123,  428,  125,
   -1,  431,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,
  450,  451,   -1,  453,  454,  455,  456,   -1,   -1,  459,
  294,  461,   -1,  463,  464,  465,   -1,   -1,  468,  469,
   -1,  471,  472,  473,   -1,  309,   -1,   -1,   -1,   -1,
  480,   -1,   -1,  277,  278,  279,   -1,  281,  282,  283,
  284,  325,  286,  287,  288,   -1,  290,  291,  292,  293,
  334,   -1,   -1,  297,  298,   -1,   -1,   -1,  508,  509,
   -1,   -1,   -1,   -1,  348,  349,  350,  351,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,   -1,  529,
  530,  531,   -1,  533,  534,  535,  536,  537,  538,  539,
  540,  541,   -1,   -1,   -1,   -1,  380,  381,  382,  383,
  384,  385,  386,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  260,  261,   -1,  263,   -1,   -1,
   -1,  365,  268,   -1,   -1,  271,   -1,  273,  274,  275,
  276,  277,  278,  279,   -1,  281,  282,  283,  284,   -1,
  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,
  296,  297,  298,  299,   -1,   -1,   -1,   -1,    0,   -1,
  306,   -1,  308,   -1,   -1,  311,   -1,   -1,   -1,   -1,
  316,   -1,   -1,   -1,   -1,   -1,  322,  323,  324,  325,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   41,
   42,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  358,   -1,  360,  361,  362,   59,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  391,   -1,   -1,   -1,   91,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
  416,  417,  418,  419,  420,  421,  422,  423,   -1,   -1,
   -1,  123,  428,  125,   -1,  431,  432,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  448,  449,  450,  451,   -1,  453,  454,  455,
  456,   -1,   -1,  459,   -1,  461,   -1,  463,  464,  465,
   -1,   -1,  468,  469,   -1,  471,  472,  473,   -1,  271,
   -1,   -1,   -1,   -1,  480,  277,  278,  279,   -1,  281,
  282,  283,  284,   -1,  286,  287,   -1,   -1,  290,  291,
  292,  293,   -1,   -1,   -1,  297,  298,   -1,   -1,   -1,
   -1,   -1,  508,  509,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  526,  527,   -1,  529,  530,  531,   -1,  533,  534,  535,
  536,  537,  538,  539,  540,  541,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  346,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,  261,
   -1,  263,   -1,  365,   -1,   -1,  268,   -1,   -1,  271,
   -1,  273,  274,  275,  276,  277,  278,  279,   -1,  281,
  282,  283,  284,   -1,  286,  287,   -1,   -1,  290,  291,
  292,  293,   -1,   -1,  296,  297,  298,  299,   -1,   -1,
   -1,   -1,    0,   -1,  306,   -1,  308,   -1,   -1,  311,
   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,
  322,  323,  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,
   38,   -1,   40,   41,   42,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,  360,  361,
  362,   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  374,  375,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,
   -1,   -1,   -1,   91,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,
  422,  423,   -1,   -1,   -1,  123,  428,  125,   -1,  431,
  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,  450,  451,
   -1,  453,  454,  455,  456,   -1,   -1,  459,   -1,  461,
  262,  463,  464,  465,   -1,   -1,  468,  469,   -1,  471,
  472,  473,   -1,   -1,   -1,  277,  278,  279,  480,  281,
  282,  283,  284,   -1,  286,  287,  288,   -1,  290,  291,
  292,  293,   -1,   -1,   -1,   -1,   -1,  299,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  508,  509,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  526,  527,   -1,  529,  530,  531,
   -1,  533,  534,  535,  536,  537,  538,  539,  540,  541,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,
  268,   -1,   -1,  271,   -1,  273,  274,  275,  276,  277,
  278,  279,   -1,  281,  282,  283,  284,   -1,  286,  287,
   -1,   -1,  290,  291,  292,  293,   -1,   -1,  296,  297,
  298,  299,   -1,   -1,   -1,   -1,    0,   -1,  306,   -1,
  308,   -1,   -1,  311,   -1,   -1,   -1,   -1,  316,   -1,
   -1,   -1,   -1,   -1,  322,  323,  324,  325,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   -1,   -1,   -1,   38,   -1,   40,   41,   42,   -1,
   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  358,   -1,  360,  361,  362,   59,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  391,   -1,   -1,   -1,   91,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  420,  421,  422,  423,   -1,   -1,   -1,  123,
  428,  125,   -1,  431,  432,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  448,  449,  450,  451,   -1,  453,  454,  455,  456,   -1,
   -1,  459,   -1,  461,   -1,  463,  464,  465,   -1,   -1,
  468,  469,   -1,  471,  472,  473,   -1,   -1,   -1,   -1,
   -1,   -1,  480,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  508,  509,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,
   -1,  529,  530,  531,   -1,  533,  534,  535,  536,  537,
  538,  539,  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  260,  261,   -1,  263,
   -1,   -1,   -1,   -1,  268,   -1,   -1,  271,   -1,  273,
  274,  275,  276,  277,  278,  279,   -1,  281,  282,  283,
  284,   -1,  286,  287,   -1,   -1,  290,  291,  292,  293,
   -1,   -1,  296,  297,  298,  299,   -1,   -1,   -1,   -1,
    0,   -1,  306,   -1,  308,   -1,   -1,  311,   -1,   -1,
   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,  322,  323,
  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,
   40,   41,   42,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  358,   -1,  360,  361,  362,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  374,  375,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,   -1,   -1,
   -1,   91,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
   -1,   -1,   -1,  123,  428,  125,   -1,  431,  432,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  448,  449,  450,  451,   -1,  453,
  454,  455,  456,   -1,   -1,  459,   -1,  461,   -1,  463,
  464,  465,   -1,   -1,  468,  469,   -1,  471,  472,  473,
   -1,   -1,   -1,   -1,   -1,   -1,  480,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  508,  509,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  526,  527,   -1,  529,  530,  531,   -1,  533,
  534,  535,  536,  537,  538,  539,  540,  541,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,
   -1,  271,   -1,  273,  274,  275,  276,  277,  278,  279,
   -1,  281,  282,  283,  284,   -1,  286,  287,   -1,   -1,
  290,  291,  292,  293,   -1,   -1,  296,  297,  298,   -1,
   -1,   -1,   -1,   -1,    0,   -1,  306,   -1,  308,   -1,
   -1,  311,   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,
   -1,   -1,  322,  323,  324,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,
   -1,   -1,   38,   -1,   40,   41,   42,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,
  360,  361,  362,   59,   60,   61,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  374,  375,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  391,   -1,   -1,   -1,   91,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  420,  421,  422,  423,   -1,   -1,   -1,  123,  428,  125,
   -1,  431,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,
  450,  451,   -1,  453,  454,  455,  456,   -1,   -1,  459,
   -1,  461,   -1,  463,  464,  465,   -1,   -1,  468,  469,
   -1,  471,  472,  473,   -1,   -1,   -1,   -1,   -1,   -1,
  480,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  508,  509,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,   -1,  529,
  530,  531,   -1,  533,  534,  535,  536,  537,  538,  539,
  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  260,  261,   -1,  263,   -1,   -1,
   -1,   -1,  268,   -1,   -1,  271,   -1,  273,  274,  275,
  276,  277,  278,  279,   -1,  281,  282,  283,  284,   -1,
  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,
  296,  297,  298,   -1,   -1,   -1,   -1,   -1,    0,   -1,
  306,   -1,  308,   -1,   -1,  311,   -1,   -1,   -1,   -1,
  316,   -1,   -1,   -1,   -1,   -1,  322,  323,  324,  325,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   -1,   41,
   42,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  358,   -1,  360,  361,  362,   59,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  391,   -1,   -1,   -1,   91,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
  416,  417,  418,  419,  420,  421,  422,  423,   -1,   -1,
   -1,  123,  428,  125,   -1,  431,  432,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  448,  449,  450,  451,   -1,  453,  454,  455,
  456,   -1,   -1,  459,   -1,  461,   -1,  463,  464,  465,
   -1,   -1,  468,  469,   -1,  471,  472,  473,   -1,   -1,
   -1,   -1,   -1,   -1,  480,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  508,  509,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  526,  527,   -1,  529,  530,  531,   -1,  533,  534,  535,
  536,  537,  538,  539,  540,  541,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,  261,
   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,   -1,  271,
   -1,  273,  274,  275,  276,  277,  278,  279,   -1,  281,
  282,  283,  284,   -1,  286,  287,   -1,   -1,  290,  291,
  292,  293,   -1,   -1,  296,  297,  298,   -1,   -1,   -1,
   -1,   -1,    0,   -1,  306,   -1,  308,   -1,   -1,  311,
   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,
  322,  323,  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,
   38,   -1,   -1,   41,   42,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,  360,  361,
  362,   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  374,  375,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,
   -1,   -1,   -1,   91,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,
  422,  423,   -1,   -1,   -1,  123,  428,  125,   -1,  431,
  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,  450,  451,
   -1,  453,  454,  455,  456,   -1,   -1,  459,   -1,  461,
   -1,  463,  464,  465,   -1,   -1,  468,  469,   -1,  471,
  472,  473,   -1,   -1,   -1,   -1,   -1,   -1,  480,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  508,  509,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  526,  527,   -1,  529,  530,  531,
   -1,  533,  534,  535,  536,  537,  538,  539,  540,  541,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,
  268,   -1,   -1,  271,   -1,  273,  274,  275,  276,  277,
  278,  279,   -1,  281,  282,  283,  284,   -1,  286,  287,
   -1,   -1,  290,  291,  292,  293,   -1,   -1,  296,  297,
  298,   -1,   -1,   -1,   -1,   -1,    0,   -1,  306,   -1,
  308,   -1,   -1,  311,   -1,   -1,   -1,   -1,  316,   -1,
   -1,   -1,   -1,   -1,  322,  323,  324,  325,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   -1,   -1,   -1,   38,   -1,   -1,   41,   42,   -1,
   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  358,   -1,  360,  361,  362,   59,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  391,   -1,   -1,   -1,   91,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  420,  421,  422,  423,   -1,   -1,   -1,  123,
  428,  125,   -1,  431,  432,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  448,  449,  450,  451,   -1,  453,  454,  455,  456,   -1,
   -1,  459,   -1,  461,   -1,  463,  464,  465,   -1,   -1,
  468,  469,   -1,  471,  472,  473,   -1,   -1,   -1,   -1,
   -1,   -1,  480,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  508,  509,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,
   -1,  529,  530,  531,   -1,  533,  534,  535,  536,  537,
  538,  539,  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  260,  261,   -1,  263,
   -1,   -1,   -1,   -1,  268,   -1,   -1,  271,   -1,  273,
  274,  275,  276,  277,  278,  279,   -1,  281,  282,  283,
  284,   -1,  286,  287,   -1,   -1,  290,  291,  292,  293,
   -1,   -1,  296,  297,  298,   -1,   -1,   -1,   -1,   -1,
    0,   -1,  306,   -1,  308,   -1,   -1,  311,   -1,   -1,
   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,  322,  323,
  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,
   -1,   41,   42,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  358,   -1,  360,  361,  362,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  374,  375,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,   -1,   -1,
   -1,   91,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
   -1,   -1,   -1,  123,  428,  125,   -1,  431,  432,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  448,  449,  450,  451,   -1,  453,
  454,  455,  456,   -1,   -1,  459,   -1,  461,   -1,  463,
  464,  465,   -1,   -1,  468,  469,   -1,  471,  472,  473,
   -1,   -1,   -1,   -1,   -1,   -1,  480,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  508,  509,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  526,  527,   -1,  529,  530,  531,   -1,  533,
  534,  535,  536,  537,  538,  539,  540,  541,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,
   -1,  271,   -1,  273,  274,  275,  276,  277,  278,  279,
   -1,  281,  282,  283,  284,   -1,  286,  287,   -1,   -1,
  290,  291,  292,  293,   -1,   -1,  296,  297,  298,   -1,
   -1,   -1,   -1,   -1,    0,   -1,  306,   -1,  308,   -1,
   -1,  311,   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,
   -1,   -1,  322,  323,  324,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,
   -1,   -1,   38,   -1,   -1,   41,   42,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,
  360,  361,  362,   59,   60,   61,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  374,  375,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  391,   -1,   -1,   -1,   91,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  420,  421,  422,  423,   -1,   -1,   -1,  123,  428,  125,
   -1,  431,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,
  450,  451,   -1,  453,  454,  455,  456,   -1,   -1,  459,
   -1,  461,   -1,  463,  464,  465,   -1,   -1,  468,  469,
   -1,  471,  472,  473,   -1,   -1,   -1,   -1,   -1,   -1,
  480,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  508,  509,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,   -1,  529,
  530,  531,   -1,  533,  534,  535,  536,  537,  538,  539,
  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  260,  261,   -1,  263,   -1,   -1,
   -1,   -1,  268,   -1,   -1,  271,   -1,  273,  274,  275,
  276,  277,  278,  279,   -1,  281,  282,  283,  284,   -1,
  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,
  296,  297,  298,   -1,   -1,   -1,   -1,   -1,    0,   -1,
  306,   -1,  308,   -1,   -1,  311,   -1,   -1,   -1,   -1,
  316,   -1,   -1,   -1,   -1,   -1,  322,  323,  324,  325,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   -1,   41,
   42,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  358,   -1,  360,  361,  362,   59,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  391,   -1,   -1,   -1,   91,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
  416,  417,  418,  419,  420,  421,  422,  423,   -1,   -1,
   -1,  123,  428,  125,   -1,  431,  432,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  448,  449,  450,  451,   -1,  453,  454,  455,
  456,   -1,   -1,  459,   -1,  461,   -1,  463,  464,  465,
   -1,   -1,  468,  469,   -1,  471,  472,  473,   -1,   -1,
   -1,   -1,   -1,   -1,  480,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  508,  509,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  526,  527,   -1,  529,  530,  531,   -1,  533,  534,  535,
  536,  537,  538,  539,  540,  541,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,  261,
   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,   -1,  271,
   -1,  273,  274,  275,  276,  277,  278,  279,   -1,  281,
  282,  283,  284,   -1,  286,  287,   -1,   -1,  290,  291,
  292,  293,   -1,   -1,  296,  297,  298,   -1,   -1,   -1,
   -1,   -1,    0,   -1,  306,   -1,  308,   -1,   -1,  311,
   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,
  322,  323,  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,
   38,   -1,   -1,   41,   42,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,  360,  361,
  362,   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  374,  375,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,
   -1,   -1,   -1,   91,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,
  422,  423,   -1,   -1,   -1,  123,  428,  125,   -1,  431,
  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,  450,  451,
   -1,  453,  454,  455,  456,   -1,   -1,  459,   -1,  461,
   -1,  463,  464,  465,   -1,   -1,  468,  469,   -1,  471,
  472,  473,   -1,   -1,   -1,   -1,   -1,   -1,  480,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  508,  509,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  526,  527,   -1,  529,  530,  531,
   -1,  533,  534,  535,  536,  537,  538,  539,  540,  541,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,
  268,   -1,   -1,  271,   -1,  273,  274,  275,  276,  277,
  278,  279,   -1,  281,  282,  283,  284,   -1,  286,  287,
   -1,   -1,  290,  291,  292,  293,   -1,   -1,  296,  297,
  298,   -1,   -1,   -1,   -1,   -1,    0,   -1,  306,   -1,
  308,   -1,   -1,  311,   -1,   -1,   -1,   -1,  316,   -1,
   -1,   -1,   -1,   -1,  322,  323,  324,  325,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   -1,   -1,   -1,   38,   -1,   -1,   41,   42,   -1,
   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  358,   -1,  360,  361,  362,   59,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  391,   -1,   -1,   -1,   91,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  420,  421,  422,  423,   -1,   -1,   -1,  123,
  428,  125,   -1,  431,  432,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  448,  449,  450,  451,   -1,  453,  454,  455,  456,   -1,
   -1,  459,   -1,  461,   -1,  463,  464,  465,   -1,   -1,
  468,  469,   -1,  471,  472,  473,   -1,   -1,   -1,   -1,
   -1,   -1,  480,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  508,  509,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,
   -1,  529,  530,  531,   -1,  533,  534,  535,  536,  537,
  538,  539,  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  260,  261,   -1,  263,
   -1,   -1,   -1,   -1,  268,   -1,   -1,  271,   -1,  273,
  274,  275,  276,  277,  278,  279,   -1,  281,  282,  283,
  284,   -1,  286,  287,   -1,   -1,  290,  291,  292,  293,
   -1,   -1,  296,  297,  298,   -1,   -1,   -1,   -1,   -1,
    0,   -1,  306,   -1,  308,   -1,   -1,  311,   -1,   -1,
   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,  322,  323,
  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,
   -1,   41,   42,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  358,   -1,  360,  361,  362,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  374,  375,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,   -1,   -1,
   -1,   91,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
   -1,   -1,   -1,  123,  428,  125,   -1,  431,  432,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  448,  449,  450,  451,   -1,  453,
  454,  455,  456,   -1,   -1,  459,   -1,  461,   -1,  463,
  464,  465,   -1,   -1,  468,  469,   -1,  471,  472,  473,
   -1,   -1,   -1,   -1,   -1,   -1,  480,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  508,  509,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  526,  527,   -1,  529,  530,  531,   -1,  533,
  534,  535,  536,  537,  538,  539,  540,  541,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,
   -1,  271,   -1,  273,  274,  275,  276,  277,  278,  279,
   -1,  281,  282,  283,  284,   -1,  286,  287,   -1,   -1,
  290,  291,  292,  293,   -1,   -1,  296,  297,  298,   -1,
   -1,   -1,   -1,   -1,    0,   -1,  306,   -1,  308,   -1,
   -1,  311,   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,
   -1,   -1,  322,  323,  324,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,
   -1,   -1,   38,   -1,   -1,   41,   42,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,
  360,  361,  362,   59,   60,   61,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  374,  375,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  391,   -1,   -1,   -1,   91,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  420,  421,  422,  423,   -1,   -1,   -1,  123,  428,  125,
   -1,  431,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,
  450,  451,   -1,  453,  454,  455,  456,   -1,   -1,  459,
   -1,  461,   -1,  463,  464,  465,   -1,   -1,  468,  469,
   -1,  471,  472,  473,   -1,   -1,   -1,   -1,   -1,   -1,
  480,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  508,  509,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,   -1,  529,
  530,  531,   -1,  533,  534,  535,  536,  537,  538,  539,
  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  260,  261,   -1,  263,   -1,   -1,
   -1,   -1,  268,   -1,   -1,  271,   -1,  273,  274,  275,
  276,  277,  278,  279,   -1,  281,  282,  283,  284,   -1,
  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,
  296,  297,  298,   -1,   -1,   -1,   -1,   -1,    0,   -1,
  306,   -1,  308,   -1,   -1,  311,   -1,   -1,   -1,   -1,
  316,   -1,   -1,   -1,   -1,   -1,  322,  323,  324,  325,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   -1,   41,
   42,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  358,   -1,  360,  361,  362,   59,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  391,   -1,   -1,   -1,   91,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
  416,  417,  418,  419,  420,  421,  422,  423,   -1,   -1,
   -1,  123,  428,  125,   -1,  431,  432,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  448,  449,  450,  451,   -1,  453,  454,  455,
  456,   -1,   -1,  459,   -1,  461,   -1,  463,  464,  465,
   -1,   -1,  468,  469,   -1,  471,  472,  473,   -1,   -1,
   -1,   -1,   -1,   -1,  480,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  508,  509,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  526,  527,   -1,  529,  530,  531,   -1,  533,  534,  535,
  536,  537,  538,  539,  540,  541,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,  261,
   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,   -1,  271,
   -1,  273,  274,  275,  276,  277,  278,  279,   -1,  281,
  282,  283,  284,   -1,  286,  287,   -1,   -1,  290,  291,
  292,  293,   -1,   -1,  296,  297,  298,   -1,   -1,   -1,
   -1,   -1,    0,   -1,  306,   -1,  308,   -1,   -1,  311,
   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,
  322,  323,  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,
   38,   -1,   -1,   41,   42,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,  360,  361,
  362,   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  374,  375,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,
   -1,   -1,   -1,   91,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,
  422,  423,   -1,   -1,   -1,  123,  428,  125,   -1,  431,
  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,  450,  451,
   -1,  453,  454,  455,  456,   -1,   -1,  459,   -1,  461,
   -1,  463,  464,  465,   -1,   -1,  468,  469,   -1,  471,
  472,  473,   -1,   -1,   -1,   -1,   -1,   -1,  480,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  508,  509,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  526,  527,   -1,  529,  530,  531,
   -1,  533,  534,  535,  536,  537,  538,  539,  540,  541,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,
  268,   -1,   -1,  271,   -1,  273,  274,  275,  276,  277,
  278,  279,   -1,  281,  282,  283,  284,   -1,  286,  287,
   -1,   -1,  290,  291,  292,  293,   -1,   -1,  296,  297,
  298,   -1,   -1,   -1,   -1,   -1,    0,   -1,  306,   -1,
  308,   -1,   -1,  311,   -1,   -1,   -1,   -1,  316,   -1,
   -1,   -1,   -1,   -1,  322,  323,  324,  325,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   -1,   -1,   -1,   38,   -1,   -1,   41,   42,   -1,
   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  358,   -1,  360,  361,  362,   59,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  391,   -1,   -1,   -1,   91,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  420,  421,  422,  423,   -1,   -1,   -1,  123,
  428,  125,   -1,  431,  432,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  448,  449,  450,  451,   -1,  453,  454,  455,  456,   -1,
   -1,  459,   -1,  461,   -1,  463,  464,  465,   -1,   -1,
  468,  469,   -1,  471,  472,  473,   -1,   -1,   -1,   -1,
   -1,   -1,  480,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  508,  509,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,
   -1,  529,  530,  531,   -1,  533,  534,  535,  536,  537,
  538,  539,  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  260,  261,   -1,  263,
   -1,   -1,   -1,   -1,  268,   -1,   -1,  271,   -1,  273,
  274,  275,  276,  277,  278,  279,   -1,  281,  282,  283,
  284,   -1,  286,  287,   -1,   -1,  290,  291,  292,  293,
   -1,   -1,  296,  297,  298,   -1,   -1,   -1,   -1,   -1,
    0,   -1,  306,   -1,  308,   -1,   -1,  311,   -1,   -1,
   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,  322,  323,
  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,
   -1,   41,   42,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  358,   -1,  360,  361,  362,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  374,  375,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,   -1,   -1,
   -1,   91,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
   -1,   -1,   -1,  123,  428,  125,   -1,  431,  432,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  448,  449,  450,  451,   -1,  453,
  454,  455,  456,   -1,   -1,  459,   -1,  461,   -1,  463,
  464,  465,   -1,   -1,  468,  469,   -1,  471,  472,  473,
   -1,   -1,   -1,   -1,   -1,   -1,  480,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  508,  509,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  526,  527,   -1,  529,  530,  531,   -1,  533,
  534,  535,  536,  537,  538,  539,  540,  541,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,
   -1,  271,   -1,  273,  274,  275,  276,  277,  278,  279,
   -1,  281,  282,  283,  284,   -1,  286,  287,   -1,   -1,
  290,  291,  292,  293,   -1,   -1,  296,  297,  298,   -1,
   -1,   -1,   -1,   -1,    0,   -1,  306,   -1,  308,   -1,
   -1,  311,   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,
   -1,   -1,  322,  323,  324,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,
   -1,   -1,   38,   -1,   -1,   41,   42,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,
  360,  361,  362,   59,   60,   61,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  374,  375,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  391,   -1,   -1,   -1,   91,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  420,  421,  422,  423,   -1,   -1,   -1,  123,  428,  125,
   -1,  431,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,
  450,  451,   -1,  453,  454,  455,  456,   -1,   -1,  459,
   -1,  461,   -1,  463,  464,  465,   -1,   -1,  468,  469,
   -1,  471,  472,  473,   -1,   -1,   -1,   -1,   -1,   -1,
  480,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  508,  509,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,   -1,  529,
  530,  531,   -1,  533,  534,  535,  536,  537,  538,  539,
  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  260,  261,   -1,  263,   -1,   -1,
   -1,   -1,  268,   -1,   -1,  271,   -1,  273,  274,  275,
  276,  277,  278,  279,   -1,  281,  282,  283,  284,   -1,
  286,  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,
  296,  297,  298,   -1,   -1,   -1,   -1,   -1,    0,   -1,
  306,   -1,  308,   -1,   -1,  311,   -1,   -1,   -1,   -1,
  316,   -1,   -1,   -1,   -1,   -1,  322,  323,  324,  325,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   -1,   41,
   42,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  358,   -1,  360,  361,  362,   59,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  391,   -1,   -1,   -1,   91,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
  416,  417,  418,  419,  420,  421,  422,  423,   -1,   -1,
   -1,  123,  428,  125,   -1,  431,  432,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  448,  449,  450,  451,   -1,  453,  454,  455,
  456,   -1,   -1,  459,   -1,  461,   -1,  463,  464,  465,
   -1,   -1,  468,  469,   -1,  471,  472,  473,   -1,   -1,
   -1,   -1,   -1,   -1,  480,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  508,  509,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  526,  527,   -1,  529,  530,  531,   -1,  533,  534,  535,
  536,  537,  538,  539,  540,  541,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,  261,
   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,   -1,  271,
   -1,  273,  274,  275,  276,  277,  278,  279,   -1,  281,
  282,  283,  284,   -1,  286,  287,   -1,   -1,  290,  291,
  292,  293,   -1,   -1,  296,  297,  298,   -1,   -1,   -1,
   -1,   -1,    0,   -1,  306,   -1,  308,   -1,   -1,  311,
   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,
  322,  323,  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,
   38,   -1,   -1,   41,   42,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,  360,  361,
  362,   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  374,  375,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,
   -1,   -1,   -1,   91,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,
  422,  423,   -1,   -1,   -1,  123,  428,  125,   -1,  431,
  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,  450,  451,
   -1,  453,  454,  455,  456,   -1,   -1,  459,   -1,  461,
   -1,  463,  464,  465,   -1,   -1,  468,  469,   -1,  471,
  472,  473,   -1,   -1,   -1,   -1,   -1,   -1,  480,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  508,  509,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  526,  527,   -1,  529,  530,  531,
   -1,  533,  534,  535,  536,  537,  538,  539,  540,  541,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,
  268,   -1,   -1,  271,   -1,  273,  274,  275,  276,  277,
  278,  279,   -1,  281,  282,  283,  284,   -1,  286,  287,
   -1,   -1,  290,  291,  292,  293,   -1,   -1,  296,  297,
  298,   -1,   -1,   -1,   -1,   -1,    0,   -1,  306,   -1,
  308,   -1,   -1,  311,   -1,   -1,   -1,   -1,  316,   -1,
   -1,   -1,   -1,   -1,  322,  323,  324,  325,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   -1,   -1,   -1,   38,   -1,   -1,   41,   42,   -1,
   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  358,   -1,  360,  361,  362,   59,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  391,   -1,   -1,   -1,   91,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  420,  421,  422,  423,   -1,   -1,   -1,  123,
  428,  125,   -1,  431,  432,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  448,  449,  450,  451,   -1,  453,  454,  455,  456,   -1,
   -1,  459,   -1,  461,   -1,  463,  464,  465,   -1,   -1,
  468,  469,   -1,  471,  472,  473,   -1,   -1,   -1,   -1,
   -1,   -1,  480,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  508,  509,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,
   -1,  529,  530,  531,   -1,  533,  534,  535,  536,  537,
  538,  539,  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  260,  261,   -1,  263,
   -1,   -1,   -1,   -1,  268,   -1,   -1,  271,   -1,  273,
  274,  275,  276,  277,  278,  279,   -1,  281,  282,  283,
  284,   -1,  286,  287,   -1,   -1,  290,  291,  292,  293,
   -1,   -1,  296,  297,  298,   -1,   -1,   -1,   -1,   -1,
    0,   -1,  306,   -1,  308,   -1,   -1,  311,   -1,   -1,
   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,  322,  323,
  324,  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   -1,   -1,
   40,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  358,   -1,  360,  361,  362,   59,
   -1,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  374,  375,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,   -1,   -1,
   -1,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
   -1,   -1,   -1,  123,  428,  125,   -1,  431,  432,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  448,  449,  450,  451,   -1,  453,
  454,  455,  456,   -1,   -1,  459,   -1,  461,   -1,  463,
  464,  465,   -1,   -1,  468,  469,   -1,  471,  472,  473,
   -1,   -1,   -1,   -1,   -1,   -1,  480,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  508,  509,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  526,  527,   -1,  529,  530,  531,   -1,  533,
  534,  535,  536,  537,  538,  539,  540,  541,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  260,  261,   -1,  263,   -1,   -1,  260,  261,  268,  263,
   -1,  271,   -1,  273,  274,  275,  276,  277,  278,  279,
   -1,  281,  282,  283,  284,   -1,  286,  287,   -1,   -1,
  290,  291,  292,  293,   -1,   -1,  296,  297,  298,   -1,
  294,    0,   -1,   -1,   -1,   -1,  306,   -1,  308,   -1,
   -1,  311,   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,
   -1,   -1,  322,  323,  324,  325,   -1,   -1,   -1,  323,
   -1,   -1,   -1,  327,   -1,   -1,  330,  331,   -1,   -1,
   -1,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,   -1,   -1,   -1,   -1,   -1,  358,  353,
   59,   -1,  356,   -1,   -1,   -1,   -1,   -1,   -1,  363,
   -1,   33,   -1,   -1,  374,  375,   -1,   -1,  372,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  391,   -1,   -1,   -1,   -1,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  420,  421,  422,  423,  123,   -1,  125,   -1,  428,   -1,
   -1,  431,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,
  450,  451,   -1,  453,  454,  455,  456,   -1,   -1,  459,
   -1,  461,   -1,  463,  464,  465,   -1,   -1,  468,  469,
   -1,  471,  472,  473,   -1,   -1,   -1,   -1,   -1,   -1,
  480,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  508,  509,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,   -1,  529,
  530,  531,   -1,  533,  534,  535,  536,  537,  538,  539,
  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  273,   -1,   -1,   -1,  277,  278,
  279,   -1,  281,  282,  283,  284,   -1,  286,  287,  288,
   -1,  290,  291,  292,  293,   -1,   -1,  296,  297,  298,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  270,  271,
  272,    0,   -1,  275,  276,  277,  278,  279,   -1,  281,
  282,  283,  284,  322,  286,  287,   -1,   -1,  290,  291,
  292,  293,   -1,   -1,  296,  297,  298,   -1,   -1,   -1,
  339,   -1,   -1,   -1,  306,   -1,  308,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  323,  324,  325,   -1,  364,  365,   -1,   -1,   -1,
   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   33,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,   -1,   -1,   -1,  417,  418,
  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
  429,  430,  431,  432,  123,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,
  449,  450,  451,   -1,  453,  454,  455,  456,   -1,   -1,
  459,   -1,  461,   -1,  463,  464,  465,  466,   -1,  468,
  469,   -1,  471,  472,  473,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  260,  261,   -1,  263,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  508,
  509,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,   -1,
  529,  530,  531,   -1,  533,  534,  535,  536,  537,  538,
  539,  540,  541,   33,   -1,   -1,   -1,  323,   -1,   -1,
   -1,  327,   -1,   -1,  330,  331,   -1,   -1,   -1,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  260,   -1,   -1,  263,   -1,   -1,  353,   -1,   -1,
  356,   -1,   -1,   -1,  273,   -1,   -1,  363,  277,  278,
  279,   -1,  281,  282,  283,  284,  372,  286,  287,  288,
   -1,  290,  291,  292,  293,   -1,   -1,  296,  297,  298,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  270,  271,
  272,    0,   -1,  275,  276,  277,  278,  279,   -1,  281,
  282,  283,  284,  322,  286,  287,   -1,   -1,  290,  291,
  292,  293,   -1,   -1,   -1,  297,  298,   -1,   -1,   -1,
  339,   -1,   -1,   -1,  306,   -1,  308,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  323,  324,  325,   -1,  364,  365,   -1,   -1,   -1,
   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   33,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,   -1,   -1,   -1,  417,  418,
  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
  429,  430,  431,  432,  123,   -1,  125,   -1,   -1,   91,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,
  449,  450,  451,   -1,  453,  454,  455,  456,   -1,   -1,
  459,   -1,  461,   -1,  463,  464,  465,  466,   -1,  468,
  469,  271,  471,  472,  473,  275,  276,  277,  278,  279,
   -1,  281,  282,  283,  284,   -1,  286,  287,   -1,   -1,
  290,  291,  292,  293,   -1,   -1,   -1,  297,  298,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  306,   -1,  308,  508,
  509,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  323,  324,  325,   -1,  526,  527,   -1,
  529,  530,  531,   -1,  533,  534,  535,  536,  537,  538,
  539,  540,  541,   33,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  273,   -1,   -1,   -1,  277,  278,
  279,   -1,  281,  282,  283,  284,   -1,  286,  287,  288,
   -1,  290,  291,  292,  293,   -1,   -1,  296,  297,  298,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  271,
   -1,    0,   -1,  275,  276,  277,  278,  279,   -1,  281,
  282,  283,  284,  322,  286,  287,   -1,   -1,  290,  291,
  292,  293,   -1,   -1,   -1,  297,  298,   -1,   -1,   -1,
  339,   -1,   -1,   -1,  306,   -1,  308,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  323,  324,  325,   -1,  364,  365,   -1,   -1,   -1,
   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   33,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,   -1,   -1,   -1,  417,  418,
  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
  429,  430,  431,  432,  123,   -1,  125,   -1,   -1,   91,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,
  449,  450,  451,   -1,  453,  454,  455,  456,   -1,   -1,
  459,   -1,  461,   -1,  463,  464,  465,  466,   -1,  468,
  469,  271,  471,  472,  473,  275,  276,  277,  278,  279,
   -1,  281,  282,  283,  284,   -1,  286,  287,   -1,   -1,
  290,  291,  292,  293,   -1,   -1,   -1,  297,  298,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  306,   -1,  308,  508,
  509,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  323,  324,  325,   -1,  526,  527,   -1,
  529,  530,  531,   -1,  533,  534,  535,  536,  537,  538,
  539,  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  273,   -1,   -1,   -1,  277,  278,
  279,   -1,  281,  282,  283,  284,   -1,  286,  287,  288,
   -1,  290,  291,  292,  293,   -1,   -1,  296,  297,  298,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  271,
   -1,    0,   -1,  275,  276,  277,  278,  279,   -1,  281,
  282,  283,  284,  322,  286,  287,   -1,   -1,  290,  291,
  292,  293,   -1,   -1,   -1,  297,  298,   -1,   -1,   -1,
  339,   -1,   -1,   -1,  306,   -1,  308,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  323,  324,  325,   -1,  364,  365,   -1,   -1,   -1,
   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   33,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,   -1,   -1,   -1,  417,  418,
  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
  429,  430,  431,  432,  123,   -1,  125,   -1,   -1,   91,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,
  449,  450,  451,   -1,  453,  454,  455,  456,   -1,   -1,
  459,   -1,  461,   -1,  463,  464,  465,  466,   -1,  468,
  469,   -1,  471,  472,  473,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  508,
  509,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,   -1,
  529,  530,  531,   -1,  533,  534,  535,  536,  537,  538,
  539,  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  273,   -1,   -1,   -1,  277,  278,
  279,   -1,  281,  282,  283,  284,   -1,  286,  287,  288,
   -1,  290,  291,  292,  293,   -1,   -1,  296,  297,  298,
   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,  271,
   59,   -1,   -1,  275,  276,  277,  278,  279,   -1,  281,
  282,  283,  284,  322,  286,  287,   -1,   -1,  290,  291,
  292,  293,   -1,   -1,   -1,  297,  298,   -1,   -1,   -1,
  339,   -1,   -1,   -1,  306,   -1,  308,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  323,  324,  325,   -1,  364,  365,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,   -1,   -1,   -1,  417,  418,
  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
  429,  430,  431,  432,   -1,    0,   -1,   -1,   -1,   -1,
  260,   -1,   -1,  263,   -1,   -1,   -1,   -1,   -1,  448,
  449,  450,  451,  273,  453,  454,  455,  456,   -1,   -1,
  459,   -1,  461,   -1,  463,  464,  465,  466,   -1,  468,
  469,   -1,  471,  472,  473,   -1,  296,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,  508,
  509,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  273,   -1,   -1,  526,  527,   -1,
  529,  530,  531,   -1,  533,  534,  535,  536,  537,  538,
  539,  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  391,   -1,  322,   -1,   -1,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,   -1,   -1,   -1,  417,  418,  419,
  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
  430,  431,  432,   -1,    0,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,
  450,  451,   -1,  453,  454,  455,  456,   -1,   -1,  459,
   -1,  461,   -1,  463,  464,  465,  466,   -1,  468,  469,
   -1,  471,  472,  473,   -1,   -1,   -1,   -1,   -1,   -1,
  409,   -1,  411,  412,  413,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,  423,   -1,   -1,   -1,   -1,  428,
   -1,   -1,  431,  432,   -1,   -1,   -1,   -1,  508,  509,
   -1,   -1,   -1,   -1,   -1,  260,   -1,   -1,  263,  448,
  449,  450,  451,   -1,  453,  454,  526,  527,  273,  529,
  530,  531,   -1,  533,  534,  535,  536,  537,  538,  539,
  540,  541,   -1,   -1,  473,   -1,   -1,   -1,   -1,   -1,
   -1,  296,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  322,   -1,  508,
  509,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  535,  536,  537,  538,
  539,  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  391,   -1,   -1,   -1,
   -1,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  412,  413,   -1,
   -1,   -1,  417,  418,  419,  420,  421,  422,  423,  424,
  425,  426,  427,  428,  429,  430,  431,  432,   -1,    0,
   -1,   -1,   -1,   -1,  260,   -1,   -1,  263,   -1,   -1,
   -1,   -1,   -1,  448,  449,  450,  451,  273,  453,  454,
  455,  456,   -1,   -1,  459,   -1,  461,   -1,  463,  464,
  465,  466,   -1,  468,  469,   -1,  471,  472,  473,   -1,
  296,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  322,   -1,   -1,   -1,
   -1,   -1,   -1,  508,  509,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  526,  527,   -1,  529,  530,  531,   -1,  533,  534,
  535,  536,  537,  538,  539,  540,  541,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  391,   -1,   -1,   -1,   -1,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,   -1,   -1,
   -1,  417,  418,  419,  420,  421,  422,  423,  424,  425,
  426,  427,  428,  429,  430,  431,  432,   -1,   -1,   -1,
   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  448,  449,  450,  451,   -1,  453,  454,  455,
  456,   -1,   -1,  459,   -1,  461,   -1,  463,  464,  465,
  466,   -1,  468,  469,   -1,  471,  472,  473,   -1,   -1,
   -1,   -1,   -1,   40,   41,   -1,   -1,   44,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   -1,   61,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  508,  509,   -1,   -1,   -1,   -1,   -1,  260,
   -1,   -1,  263,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  526,  527,  273,  529,  530,  531,   -1,  533,  534,  535,
  536,  537,  538,  539,  540,  541,   -1,   -1,   -1,   -1,
   -1,   -1,  294,  295,   -1,  296,   -1,   -1,  300,   -1,
  302,   -1,   -1,   -1,   -1,   -1,  123,  309,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  322,   -1,   -1,  326,  327,   42,  329,  330,  331,
  332,  333,   -1,   -1,   -1,   -1,  338,   -1,  339,  341,
   -1,   -1,   -1,   -1,   -1,  347,   -1,   -1,   -1,   -1,
  352,   -1,  354,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  366,  367,  368,  369,  370,  371,
  372,  373,   -1,   -1,   -1,   -1,   -1,  379,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  391,   -1,   -1,   -1,   -1,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,   -1,   -1,   -1,  417,  418,  419,  420,
  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
  431,  432,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  260,  261,   -1,  263,  448,  449,  450,
  451,   -1,  453,  454,  455,  456,  273,  274,  459,   -1,
  461,   -1,  463,  464,  465,  466,   -1,  468,  469,   -1,
  471,  472,  473,   -1,   40,   41,   -1,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,  311,   61,   -1,   -1,   -1,  316,
   -1,   -1,   -1,   -1,   -1,  322,   -1,  508,  509,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  526,  527,   -1,  529,  530,
  531,   -1,  533,  534,  535,  536,  537,  538,  539,  540,
  541,  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,
  276,  277,   -1,  279,  280,  281,  282,  283,  284,   -1,
  286,  287,   -1,  289,  290,  291,  292,  293,   -1,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,   -1,   -1,   -1,
  417,  418,  419,  420,  421,  422,  423,   -1,   -1,   -1,
   -1,  428,   -1,   -1,  431,  432,   -1,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  448,  449,  450,  451,   -1,  453,  454,  455,  456,
   -1,   -1,  459,   -1,  461,   -1,  463,  464,  465,   -1,
   -1,  468,  469,   -1,  471,  472,  473,   -1,   40,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   61,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  508,  509,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,  274,  526,
  527,   -1,  529,  530,  531,   -1,  533,  534,  535,  536,
  537,  538,  539,  540,  541,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  123,   -1,  125,   -1,  311,   -1,   -1,   -1,   -1,
  316,   -1,   -1,   -1,   -1,   -1,  322,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  484,  485,
   -1,  487,  488,  489,   -1,  491,  492,   -1,   -1,  495,
  496,   -1,  498,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,    0,   -1,   -1,   -1,  511,  512,  513,  514,  515,
  516,  517,  518,  519,  520,  521,  522,  523,  524,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,   -1,   -1,
   59,  417,  418,  419,  420,  421,  422,  423,   -1,   -1,
   -1,   -1,  428,   -1,   -1,  431,  432,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  448,  449,  450,  451,   -1,  453,  454,  455,
  456,  273,  274,  459,   -1,  461,   -1,  463,  464,  465,
   -1,   -1,  468,  469,   -1,  471,  472,  473,   -1,   -1,
   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  311,
   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,
  322,   -1,  508,  509,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  526,  527,   -1,  529,  530,  531,   -1,  533,  534,  535,
  536,  537,  538,  539,  540,  541,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,   -1,   -1,   -1,  417,  418,  419,  420,  421,
  422,  423,   -1,   -1,   -1,   -1,  428,   -1,   -1,  431,
  432,  260,   59,   -1,  263,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  273,   -1,  448,  449,  450,  451,
   -1,  453,  454,  455,  456,   -1,   -1,  459,   -1,  461,
   -1,  463,  464,  465,   -1,   -1,  468,  469,   -1,  471,
  472,  473,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  322,   -1,   -1,  123,   -1,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  508,  509,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  526,  527,   -1,  529,  530,  531,
   -1,  533,  534,  535,  536,  537,  538,  539,  540,  541,
   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,   -1,   -1,   -1,  417,  418,
  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
  429,  430,  431,  432,   -1,   59,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,
  449,  450,  451,   -1,  453,  454,  455,  456,   -1,   -1,
  459,   -1,  461,  260,   -1,  464,  263,   -1,   -1,   -1,
   -1,   -1,  471,  472,  473,   -1,  273,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  508,
  509,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  322,   -1,  526,  527,   -1,
  529,  530,  531,   -1,  533,  534,  535,  536,  537,  538,
  539,  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,   -1,   -1,   59,
  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
  427,  428,  429,  430,  431,  432,  260,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,
   59,  448,  449,  450,  451,   -1,  453,  454,  455,  456,
   -1,   -1,  459,   -1,  461,   -1,   -1,  464,   -1,   -1,
   -1,   -1,   -1,   -1,  471,  472,  473,   -1,   -1,   -1,
   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  322,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  508,  509,   -1,   -1,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  526,
  527,   -1,  529,  530,  531,   -1,  533,  534,  535,  536,
  537,  538,  539,  540,  541,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
   -1,   -1,   -1,  417,  418,  419,  420,  421,  422,  423,
  424,  425,  426,  427,  428,  429,  430,  431,  432,   -1,
   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  260,   -1,   -1,   -1,  448,  449,  450,  451,   -1,  453,
  454,  455,  456,  273,   -1,  459,   -1,  461,   -1,   -1,
  464,   -1,   -1,   -1,   -1,   -1,   -1,  471,  472,  473,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  273,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,
   -1,   -1,  322,   -1,  508,  509,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  526,  527,   -1,  529,  530,  531,   -1,  533,
  534,  535,  536,  537,  538,  539,  540,  541,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,   -1,   -1,   -1,  417,  418,  419,
  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
  430,  431,  432,   -1,   -1,   59,   -1,   -1,   -1,   -1,
  409,  410,  411,  412,  413,   -1,   -1,   -1,  448,  449,
  450,  451,  260,  453,  454,  455,  456,   -1,   -1,  459,
   -1,  461,  431,  432,  464,  273,   -1,   -1,   -1,   -1,
   -1,  471,  472,  473,   -1,   -1,   -1,   -1,   -1,  448,
  449,  450,  451,   -1,   -1,   -1,  455,  456,   -1,   -1,
   -1,   -1,  461,   -1,  463,  464,   -1,   -1,   -1,  123,
   -1,  125,  471,  472,   -1,   -1,   -1,   -1,  508,  509,
   -1,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,   -1,  529,
  530,  531,   -1,  533,  534,  535,  536,  537,  538,  539,
  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,   -1,
  529,  530,  531,   -1,  533,  534,  535,  536,  537,  538,
  539,  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,   -1,   -1,   59,  417,
  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
  428,  429,  430,  431,  432,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  260,   -1,   -1,   -1,
  448,  449,  450,  451,   -1,  453,  454,  455,  456,  273,
   -1,  459,   -1,  461,   -1,   -1,  464,   -1,   -1,   -1,
   -1,   -1,   -1,  471,  472,  473,   -1,   -1,   -1,   -1,
   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  322,   -1,
  508,  509,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,
   -1,  529,  530,  531,   -1,  533,  534,  535,  536,  537,
  538,  539,  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
   -1,   -1,   -1,  417,  418,  419,  420,  421,  422,  423,
  424,  425,  426,  427,  428,  429,  430,  431,  432,  260,
   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  273,   -1,  448,  449,  450,  451,   -1,  453,
  454,  455,  456,   -1,   -1,  459,   -1,  461,   -1,   -1,
  464,   -1,   -1,   -1,   -1,   -1,   -1,  471,  472,  473,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  322,   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  508,  509,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  526,  527,   -1,  529,  530,  531,   -1,  533,
  534,  535,  536,  537,  538,  539,  540,  541,   -1,   -1,
   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,   -1,   -1,   -1,  417,  418,  419,  420,
  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
  431,  432,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,  450,
  451,   -1,  453,  454,  455,  456,   -1,   -1,  459,   -1,
  461,  260,   -1,  464,  263,   -1,   -1,   -1,   -1,   -1,
  471,  472,  473,   -1,  273,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  508,  509,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  322,   -1,  526,  527,   -1,  529,  530,
  531,   -1,  533,  534,  535,  536,  537,  538,  539,  540,
  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,    0,   -1,   -1,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,   -1,   -1,   -1,  417,  418,
  419,  420,  421,  422,  423,   -1,   -1,   -1,   -1,  428,
   -1,   -1,  431,  432,  260,   -1,   -1,  263,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,   -1,  448,
  449,  450,  451,   59,  453,  454,  455,  456,   -1,   -1,
  459,   -1,  461,   -1,  463,  464,  465,   -1,   -1,  468,
  469,   -1,  471,  472,  473,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   33,   -1,   -1,  322,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  508,
  509,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,   -1,
  529,  530,  531,   -1,  533,  534,  535,  536,  537,  538,
  539,  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,   -1,   -1,
   -1,  417,  418,  419,  420,  421,  422,  423,   -1,   -1,
   -1,   -1,  428,   -1,   -1,  431,  432,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   -1,  448,  449,  450,  451,   -1,  453,  454,  455,
  456,   -1,   -1,  459,   -1,  461,   -1,  463,  464,  465,
   -1,   -1,  468,  469,   -1,  471,  472,  473,   -1,   -1,
   -1,   -1,   -1,   -1,  260,   -1,   -1,  263,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  508,  509,  123,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  526,  527,    0,  529,  530,  531,   -1,  533,  534,  535,
  536,  537,  538,  539,  540,  541,  322,   -1,   -1,   -1,
  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,    0,
   -1,  271,   -1,   -1,   -1,  275,  276,  277,  278,  279,
   -1,  281,  282,  283,  284,   -1,  286,  287,   -1,   -1,
  290,  291,  292,  293,   -1,   -1,  296,  297,  298,   -1,
   -1,   59,   -1,   -1,   -1,   -1,  306,   -1,  308,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  323,  324,  325,   -1,   -1,   59,   -1,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,   -1,   -1,
   -1,  417,  418,  419,  420,  421,  422,  423,  358,  359,
   -1,  260,  428,   -1,  263,  431,  432,  125,   -1,   -1,
   -1,   -1,   -1,   -1,  273,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  448,  449,  450,  451,   -1,  453,  454,  455,
  456,   -1,   -1,  459,  125,  461,   -1,   -1,  464,   -1,
   -1,   -1,   -1,    0,   -1,  471,  472,  473,   -1,   -1,
   -1,   -1,   -1,   -1,  414,  415,  416,   -1,   -1,   -1,
   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  508,  509,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  451,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  526,  527,   59,  529,  530,  531,   -1,  533,  534,  535,
  536,  537,  538,  539,  540,  541,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   -1,   -1,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  273,   -1,   -1,  417,  418,
  419,  420,  421,  422,  423,   -1,   -1,   -1,  125,  428,
   -1,   -1,  431,  432,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  273,   -1,   -1,   -1,    0,   -1,   -1,  448,
  449,  450,  451,   -1,  453,  454,  455,  456,   -1,  125,
  459,   -1,  461,   -1,  322,  464,   -1,   -1,   -1,   -1,
   -1,   -1,  471,  472,  473,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,  508,
  509,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,   -1,
  529,  530,  531,   -1,  533,  534,  535,  536,  537,  538,
  539,  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  409,  410,  411,  412,  413,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  423,   -1,   -1,   -1,   -1,
  428,  125,   -1,  431,  432,   -1,  273,   -1,  409,  410,
  411,  412,  413,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  448,  449,  450,  451,   -1,  453,  454,  455,  456,   -1,
  431,  432,   -1,  461,   -1,   -1,  464,  273,    0,   -1,
   -1,   -1,   -1,  471,  472,  473,   -1,  448,  449,  450,
  451,   -1,   -1,   -1,  455,  456,   -1,   -1,   -1,   -1,
  461,   -1,   -1,  464,   -1,    0,   -1,   -1,   -1,   -1,
  471,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  508,  509,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,  526,  527,
   -1,  529,  530,  531,   -1,  533,  534,  535,  536,  537,
  538,  539,  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,  526,  527,   -1,  529,  530,
  531,   -1,  533,  534,  535,  536,  537,  538,  539,  540,
  541,   -1,  409,  410,  411,  412,  413,   -1,   -1,  273,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  125,  431,  432,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  409,  410,  411,  412,  413,   -1,   -1,
   -1,  448,  449,  450,  451,   -1,   -1,   -1,  455,  456,
  125,   -1,   -1,   -1,  461,  431,  432,  464,    0,   -1,
   -1,   -1,   -1,   -1,  471,  472,   -1,   -1,   -1,   -1,
   -1,   -1,  448,  449,  450,  451,   -1,   -1,   -1,  455,
  456,   -1,   -1,   -1,   -1,  461,   -1,   -1,  464,   -1,
   -1,   -1,   -1,   -1,   -1,  471,  472,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,  526,
  527,   -1,  529,  530,  531,   -1,  533,  534,  535,  536,
  537,  538,  539,  540,  541,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  409,  410,  411,  412,  413,
  526,  527,   -1,  529,  530,  531,   -1,  533,  534,  535,
  536,  537,  538,  539,  540,  541,   -1,  431,  432,    0,
   -1,  273,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  125,  448,  449,  450,  451,   -1,   -1,
   -1,  455,  456,   -1,   -1,   -1,   -1,  461,  273,   -1,
  464,   -1,   -1,   -1,   -1,   -1,   -1,  471,  472,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  526,  527,   -1,  529,  530,  531,   -1,  533,
  534,  535,  536,  537,  538,  539,  540,  541,   -1,   -1,
    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  409,  410,  411,
  412,  413,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  431,
  432,  273,   -1,   -1,  409,  410,  411,  412,  413,   59,
   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,  450,  451,
   -1,   -1,   -1,  455,  456,   -1,  431,  432,   -1,  461,
   -1,   -1,  464,   -1,   -1,   -1,   -1,   -1,   -1,  471,
  472,   -1,   -1,  448,  449,  450,  451,   -1,   -1,   -1,
  455,  456,   -1,   -1,   -1,   -1,  461,   -1,   -1,  464,
   -1,    0,   -1,   -1,   -1,   -1,  471,  472,   -1,   -1,
   -1,   -1,  123,   -1,   -1,  125,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  526,  527,   -1,  529,  530,  531,
   -1,  533,  534,  535,  536,  537,  538,  539,  540,  541,
   -1,   -1,  273,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,  526,  527,   -1,  529,  530,  531,   -1,  533,  534,
  535,  536,  537,  538,  539,  540,  541,  409,  410,  411,
  412,  413,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  431,
  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,  450,  451,
   -1,   -1,   -1,  455,  456,   -1,  125,   -1,   -1,  461,
   -1,   -1,  464,   -1,   -1,   -1,   -1,   -1,   -1,  471,
  472,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  271,   -1,   -1,  273,   -1,  276,  277,   -1,  279,  280,
  281,  282,  283,  284,   -1,  286,  287,   -1,  289,  290,
  291,  292,  293,   -1,   -1,   -1,   -1,   -1,  409,  410,
  411,  412,  413,   -1,  526,  527,   -1,  529,  530,  531,
   -1,  533,  534,  535,  536,  537,  538,  539,  540,  541,
  431,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  335,   -1,  337,  448,  449,  450,
  451,  342,   -1,   -1,  455,  456,   -1,   -1,   -1,   -1,
  461,   40,   -1,  464,   -1,   -1,   -1,  358,   -1,   -1,
  471,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   60,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  273,   -1,   -1,   -1,   -1,   -1,
  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  409,
  410,  411,  412,  413,   -1,  526,  527,   -1,  529,  530,
  531,   -1,  533,  534,  535,  536,  537,  538,  539,  540,
  541,  431,  432,   -1,  123,   41,  125,   -1,   -1,   -1,
   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,
  450,  451,   -1,   59,   -1,  455,  456,   -1,   -1,   -1,
   -1,  461,   -1,   -1,  464,   -1,   -1,   -1,   -1,   -1,
   -1,  471,  472,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  481,   -1,  483,  484,  485,  486,  487,  488,  489,  490,
  491,  492,  493,  494,  495,  496,  497,  498,  499,   -1,
   -1,   -1,  503,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,
  409,  410,  411,  412,  413,   -1,  526,  527,   -1,  529,
  530,  531,   41,  533,  534,  535,  536,  537,  538,  539,
  540,  541,  431,  432,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,
  449,  450,  451,   -1,   -1,   -1,  455,  456,   -1,   -1,
   -1,  260,  461,   -1,  263,  464,   -1,   -1,   -1,   -1,
   -1,   -1,  471,  472,  273,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  526,  527,   -1,
  529,  530,  531,   -1,  533,  534,  535,  536,  537,  538,
  539,  540,  541,   -1,  260,   -1,   -1,  263,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
   -1,   -1,   -1,   -1,  413,   -1,   -1,   -1,  417,  418,
  419,  420,  421,  422,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  431,  432,   -1,   -1,   47,   -1,   -1,   -1,
   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,   59,  448,
  449,  450,  451,   -1,  273,   -1,   -1,   -1,   -1,   -1,
  459,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  473,  391,   -1,   -1,   -1,   -1,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,   -1,   -1,   -1,   -1,  413,   -1,   -1,
   -1,  417,  418,  419,  420,  421,  422,   -1,   -1,  508,
  509,  510,  123,   -1,  125,  431,  432,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,  448,  449,  450,  451,  535,  536,  537,  538,
  539,  540,  541,  459,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  473,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  391,   -1,   -1,   -1,   -1,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
   -1,   -1,  508,  509,  413,  123,   -1,  125,  417,  418,
  419,  420,  421,  422,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  431,  432,   59,   -1,   -1,   -1,   -1,  535,
  536,  537,  538,  539,  540,  541,   -1,   -1,   -1,  448,
  449,  450,  451,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  459,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,
   -1,   -1,  263,   -1,  473,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  508,
  509,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  535,  536,  537,  538,
  539,  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  260,   -1,   -1,  263,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  273,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,   -1,   -1,
   -1,   -1,  413,   -1,   -1,   -1,  417,  418,  419,  420,
  421,  422,   -1,   -1,   -1,  260,   -1,   -1,  263,   -1,
  431,  432,   -1,   -1,   -1,   -1,   -1,   -1,  273,  123,
   -1,  125,   -1,   -1,   -1,   -1,   -1,  448,  449,  450,
  451,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  459,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  473,   -1,   -1,   -1,   -1,   -1,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,   -1,   -1,   -1,   -1,  413,   -1,   -1,   -1,  417,
  418,  419,  420,  421,  422,   -1,   -1,  508,  509,   -1,
   -1,   -1,   -1,  431,  432,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  448,  449,  450,  451,  535,  536,  537,  538,  539,  540,
  541,  459,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  473,   -1,   -1,   -1,   -1,
   -1,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,   -1,   -1,  260,   -1,  413,  263,
   -1,   -1,  417,  418,  419,  420,  421,  422,   -1,  273,
  508,  509,   -1,   -1,   -1,   -1,  431,  432,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,
   -1,   -1,   -1,  448,  449,  450,  451,  535,  536,  537,
  538,  539,  540,  541,  459,   59,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  473,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  508,  509,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  535,  536,  537,  538,  539,  540,  541,   -1,   59,   -1,
   -1,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,   -1,   -1,   -1,   -1,  413,
   -1,   -1,   -1,  417,  418,  419,  420,  421,  422,   -1,
   -1,   -1,   -1,  260,   -1,   -1,  263,  431,  432,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  273,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  448,  449,  450,  451,   -1,   -1,
   -1,   -1,  123,   -1,  125,  459,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  473,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  508,  509,  260,   -1,   -1,  263,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  535,  536,  537,  538,  539,  540,  541,   -1,   59,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,   -1,   -1,   -1,   -1,  413,   -1,   -1,   -1,
  417,  418,  419,  420,  421,  422,   -1,   -1,   -1,  260,
   -1,   -1,  263,   -1,  431,  432,   -1,   -1,   -1,   -1,
   -1,   -1,  273,  123,   -1,  125,   -1,   -1,   -1,   -1,
   -1,  448,  449,  450,  451,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  459,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  473,   -1,   -1,   -1,
   -1,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,   -1,   -1,   -1,   -1,  413,
   -1,   -1,   -1,  417,  418,  419,  420,  421,  422,   -1,
   -1,  508,  509,   -1,   -1,   -1,   -1,  431,  432,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  448,  449,  450,  451,  535,  536,
  537,  538,  539,  540,  541,  459,   59,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  473,
   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,   59,   -1,
  260,   -1,  413,  263,   -1,   -1,  417,  418,  419,  420,
  421,  422,   -1,  273,  508,  509,   -1,   -1,   -1,   -1,
  431,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,   -1,  125,   -1,   -1,   -1,   -1,  448,  449,  450,
  451,  535,  536,  537,  538,  539,  540,  541,  459,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  473,   -1,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  508,  509,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  535,  536,  537,  538,  539,  540,
  541,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,   -1,
   -1,   -1,   -1,  413,   -1,   -1,   -1,  417,  418,  419,
  420,  421,  422,   -1,   -1,   -1,   -1,  260,   -1,   -1,
  263,  431,  432,   -1,   -1,   -1,   -1,   -1,   59,   -1,
  273,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,
  450,  451,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  459,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  273,  473,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,  508,  509,
   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  535,  536,  537,  538,  539,
  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  125,   -1,   -1,   -1,
  413,   -1,   -1,  273,  417,  418,  419,  420,  421,  422,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  431,  432,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  409,  410,
  411,  412,  413,   -1,   -1,  448,  449,  450,  451,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  459,   -1,   -1,   -1,
  431,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  473,   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,  450,
  451,   -1,  273,   -1,  455,  456,   -1,   -1,   -1,   -1,
  461,   -1,   -1,  464,   -1,   -1,   -1,   -1,   -1,   -1,
  471,  472,   -1,   -1,   -1,  508,  509,   -1,   -1,   -1,
   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  322,  535,  536,  537,  538,  539,  540,  541,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  409,
  410,  411,  412,  413,  273,  526,  527,   -1,  529,  530,
  531,   -1,  533,  534,  535,  536,  537,  538,  539,  540,
  541,  431,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,
  450,  451,   -1,   -1,   -1,  455,  456,   -1,   -1,   -1,
   -1,  461,   -1,  322,  464,   -1,   -1,   -1,   -1,   -1,
   -1,  471,  472,   -1,   -1,   -1,   -1,   -1,  409,   -1,
  411,  412,  413,   33,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  423,   -1,   -1,   -1,   -1,  428,   -1,   -1,
  431,  432,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,  449,  450,
  451,   -1,  453,  454,   -1,   -1,  526,  527,   -1,  529,
  530,  531,   -1,  533,  534,  535,  536,  537,  538,  539,
  540,  541,  473,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  409,   -1,  411,  412,  413,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  423,   -1,   -1,   -1,   -1,  428,
   -1,   -1,  431,  432,   -1,   -1,   -1,  508,  509,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  448,
  449,  450,  451,   -1,  453,  454,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  535,  536,  537,  538,  539,  540,
  541,  271,   -1,   -1,  473,  275,  276,  277,  278,  279,
   -1,  281,  282,  283,  284,   -1,  286,  287,   -1,   -1,
  290,  291,  292,  293,  294,   33,   -1,  297,  298,   -1,
   38,   -1,   -1,   -1,   42,   -1,  306,   -1,  308,  508,
  509,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,  323,  324,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,   -1,   -1,  535,  536,  537,  538,
  539,  540,  541,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   -1,   -1,  358,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  366,  367,  368,  369,
   -1,   -1,  372,   -1,   -1,   -1,  376,  377,  378,   -1,
   -1,  271,   -1,   -1,   -1,  275,  276,  277,  278,  279,
   -1,  281,  282,  283,  284,   -1,  286,  287,   -1,   -1,
  290,  291,  292,  293,  294,   -1,   -1,  297,  298,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  306,   -1,  308,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  323,  324,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,   33,   -1,   -1,   -1,   -1,   38,
   -1,   -1,   -1,   42,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,   -1,
   -1,   60,   -1,   -1,   -1,   -1,  366,  367,  368,  369,
  480,   -1,  372,   -1,   -1,   -1,  376,  377,  378,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,
  268,   -1,   -1,  271,   -1,   -1,   -1,  275,  276,  277,
  278,  279,   -1,  281,  282,  283,  284,   -1,  286,  287,
   -1,   -1,  290,  291,  292,  293,   -1,   -1,  296,  297,
  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  306,   -1,
  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  323,  324,  325,   -1,   -1,
  480,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,
   -1,   -1,   -1,   42,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  358,   60,  360,  361,  362,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   33,   -1,   -1,   -1,   -1,   38,   -1,
   -1,   -1,   42,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  260,  261,   -1,  263,   -1,  414,  415,  416,  268,
   60,   -1,  271,   -1,   -1,   -1,  275,  276,  277,  278,
  279,   -1,  281,  282,  283,  284,   -1,  286,  287,   -1,
   -1,  290,  291,  292,  293,   -1,   -1,  296,  297,  298,
   -1,   91,   -1,   -1,   -1,   -1,   -1,  306,   -1,  308,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  323,  324,  325,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,
   -1,  360,  361,  362,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  374,  375,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,   -1,   -1,
   -1,  260,  261,   -1,  263,  414,  415,  416,   -1,  268,
   -1,   -1,  271,   -1,   33,   -1,  275,  276,  277,  278,
  279,   -1,  281,  282,  283,  284,   -1,  286,  287,   -1,
   -1,  290,  291,  292,  293,   -1,   -1,  296,  297,  298,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  306,   -1,  308,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  260,  261,   -1,  263,  323,  324,  325,   -1,  268,   -1,
   -1,  271,   91,   -1,   -1,  275,  276,  277,  278,  279,
   -1,  281,  282,  283,  284,   -1,  286,  287,   -1,   -1,
  290,  291,  292,  293,   -1,   -1,  296,  297,  298,  358,
   -1,  360,  361,  362,   -1,   -1,  306,   -1,  308,   -1,
   -1,   -1,   -1,   -1,   33,  374,  375,   -1,   -1,   -1,
   -1,   -1,   -1,  323,  324,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  414,  415,  416,  358,   -1,
  360,  361,  362,  260,  261,   -1,  263,   -1,   -1,   -1,
   -1,  268,   91,   33,  271,   -1,   -1,   -1,  275,  276,
  277,  278,  279,   -1,  281,  282,  283,  284,   -1,  286,
  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,  296,
  297,  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  306,
   -1,  308,   -1,   -1,  414,  415,  416,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  323,  324,  325,   -1,
  327,   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,
   -1,   -1,  271,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  358,  281,  282,  283,  284,   -1,  286,  287,   -1,
   -1,  290,  291,  292,  293,  372,   33,  296,  297,  298,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  306,   -1,  308,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  323,  324,  325,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  414,  415,  416,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   91,   33,   -1,   -1,   -1,  358,
  359,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,
   -1,   -1,  271,   -1,   -1,   -1,  275,  276,  277,  278,
  279,   -1,  281,  282,  283,  284,   -1,  286,  287,   -1,
   -1,  290,  291,  292,  293,   -1,   -1,  296,  297,  298,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  306,   -1,  308,
   -1,   -1,   -1,   91,   -1,  414,  415,  416,   -1,   -1,
  260,  261,   -1,  263,  323,  324,  325,   -1,  268,   -1,
   -1,  271,   -1,   -1,   -1,  275,  276,  277,  278,  279,
   -1,  281,  282,  283,  284,   -1,  286,  287,   -1,   -1,
  290,  291,  292,  293,   33,   -1,  296,  297,  298,  358,
   -1,   -1,   41,   -1,   -1,   -1,  306,   -1,  308,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  323,  324,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,  414,  415,  416,  358,   -1,
   -1,   -1,   -1,  260,  261,   -1,  263,   -1,   -1,   -1,
   -1,  268,   -1,   -1,  271,   -1,   -1,   -1,  275,  276,
  277,  278,  279,   -1,  281,  282,  283,  284,   -1,  286,
  287,   -1,   -1,  290,  291,  292,  293,   -1,   -1,  296,
  297,  298,   -1,   -1,   33,   -1,   -1,   -1,   -1,  306,
   -1,  308,   -1,   -1,  414,  415,  416,   -1,   -1,   -1,
   -1,   -1,  260,  261,   -1,  263,  323,  324,  325,   -1,
  268,   -1,   -1,  271,   -1,   -1,   -1,  275,  276,  277,
  278,  279,   -1,  281,  282,  283,  284,   -1,  286,  287,
   -1,   -1,  290,  291,  292,  293,   -1,   -1,  296,  297,
  298,  358,   91,   -1,   -1,   -1,   -1,   -1,  306,   -1,
  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  323,  324,  325,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  414,  415,  416,
  358,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  271,   -1,   -1,   -1,   -1,  276,  277,  278,
  279,   -1,  281,  282,  283,  284,   -1,  286,  287,   -1,
   -1,  290,  291,  292,  293,   -1,   -1,   -1,  297,  298,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  306,   -1,  308,
   -1,   -1,   -1,   -1,   -1,   -1,  414,  415,  416,   -1,
   -1,   -1,   -1,  271,  323,  324,  325,  275,  276,  277,
  278,  279,   -1,  281,  282,  283,  284,   -1,  286,  287,
   -1,   -1,  290,  291,  292,  293,   -1,   -1,   -1,  297,
  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  306,  358,
  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  323,  324,  325,   -1,   -1,
   -1,   -1,  271,   -1,   -1,   -1,   -1,  276,  277,  278,
  279,   -1,  281,  282,  283,  284,   -1,  286,  287,   -1,
   -1,  290,  291,  292,  293,   -1,   -1,   -1,  297,  298,
  358,   -1,   -1,   -1,   -1,   -1,   -1,  306,  257,  308,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  271,   -1,  323,  324,  325,  276,  277,   -1,
  279,  280,  281,  282,  283,  284,   -1,  286,  287,   -1,
  289,  290,  291,  292,  293,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  335,   -1,  337,   -1,
   -1,   -1,   -1,  342,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  481,   -1,  483,  484,  485,  486,  487,  488,
  489,  490,  491,  492,  493,  494,  495,  496,  497,  498,
  499,   -1,   -1,   -1,  503,
};
#if YYBTYACC
static const YYINT yyctable[] = {                        -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,
};
#endif
#define YYFINAL 1
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 542
#define YYUNDFTOKEN 732
#define YYTRANSLATE(a) ((a) > YYMAXTOKEN ? YYUNDFTOKEN : (a))
#if YYDEBUG
static const char *const yyname[] = {

"$end",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"'!'",0,
0,0,0,"'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,
0,"':'","';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'{'",0,"'}'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"error","ERROR_","BAD_COMMENT_",
"BAD_LITERAL_","ID","DOTTEDNAME","QSTRING","SQSTRING","INT32","INT64","FLOAT64",
"HEXBYTE","TYPEDEF_T","TYPEDEF_M","TYPEDEF_F","TYPEDEF_TS","TYPEDEF_MR",
"TYPEDEF_CA","DCOLON","ELLIPSIS","VOID_","BOOL_","CHAR_","UNSIGNED_","INT_",
"INT8_","INT16_","INT32_","INT64_","FLOAT_","FLOAT32_","FLOAT64_","BYTEARRAY_",
"UINT_","UINT8_","UINT16_","UINT32_","UINT64_","FLAGS_","CALLCONV_","MDTOKEN_",
"OBJECT_","STRING_","NULLREF_","DEFAULT_","CDECL_","VARARG_","STDCALL_",
"THISCALL_","FASTCALL_","CLASS_","BYREFLIKE_","TYPEDREF_","UNMANAGED_",
"FINALLY_","HANDLER_","CATCH_","FILTER_","FAULT_","EXTENDS_","IMPLEMENTS_",
"TO_","AT_","TLS_","TRUE_","FALSE_","_INTERFACEIMPL","VALUE_","VALUETYPE_",
"NATIVE_","INSTANCE_","SPECIALNAME_","FORWARDER_","STATIC_","PUBLIC_",
"PRIVATE_","FAMILY_","FINAL_","SYNCHRONIZED_","INTERFACE_","SEALED_","NESTED_",
"ABSTRACT_","AUTO_","SEQUENTIAL_","EXPLICIT_","ANSI_","UNICODE_","AUTOCHAR_",
"IMPORT_","ENUM_","VIRTUAL_","NOINLINING_","AGGRESSIVEINLINING_",
"NOOPTIMIZATION_","AGGRESSIVEOPTIMIZATION_","UNMANAGEDEXP_","BEFOREFIELDINIT_",
"STRICT_","RETARGETABLE_","WINDOWSRUNTIME_","NOPLATFORM_","METHOD_","FIELD_",
"PINNED_","MODREQ_","MODOPT_","SERIALIZABLE_","PROPERTY_","TYPE_","ASSEMBLY_",
"FAMANDASSEM_","FAMORASSEM_","PRIVATESCOPE_","HIDEBYSIG_","NEWSLOT_",
"RTSPECIALNAME_","PINVOKEIMPL_","_CTOR","_CCTOR","LITERAL_","NOTSERIALIZED_",
"INITONLY_","REQSECOBJ_","CIL_","OPTIL_","MANAGED_","FORWARDREF_",
"PRESERVESIG_","RUNTIME_","INTERNALCALL_","_IMPORT","NOMANGLE_","LASTERR_",
"WINAPI_","AS_","BESTFIT_","ON_","OFF_","CHARMAPERROR_","INSTR_NONE",
"INSTR_VAR","INSTR_I","INSTR_I8","INSTR_R","INSTR_BRTARGET","INSTR_METHOD",
"INSTR_FIELD","INSTR_TYPE","INSTR_STRING","INSTR_SIG","INSTR_TOK",
"INSTR_SWITCH","_CLASS","_NAMESPACE","_METHOD","_FIELD","_DATA","_THIS","_BASE",
"_NESTER","_EMITBYTE","_TRY","_MAXSTACK","_LOCALS","_ENTRYPOINT","_ZEROINIT",
"_EVENT","_ADDON","_REMOVEON","_FIRE","_OTHER","_PROPERTY","_SET","_GET",
"_PERMISSION","_PERMISSIONSET","REQUEST_","DEMAND_","ASSERT_","DENY_",
"PERMITONLY_","LINKCHECK_","INHERITCHECK_","REQMIN_","REQOPT_","REQREFUSE_",
"PREJITGRANT_","PREJITDENY_","NONCASDEMAND_","NONCASLINKDEMAND_",
"NONCASINHERITANCE_","_LINE","P_LINE","_LANGUAGE","_CUSTOM","INIT_","_SIZE",
"_PACK","_VTABLE","_VTFIXUP","FROMUNMANAGED_","CALLMOSTDERIVED_","_VTENTRY",
"RETAINAPPDOMAIN_","_FILE","NOMETADATA_","_HASH","_ASSEMBLY","_PUBLICKEY",
"_PUBLICKEYTOKEN","ALGORITHM_","_VER","_LOCALE","EXTERN_","_MRESOURCE",
"_MODULE","_EXPORT","LEGACY_","LIBRARY_","X86_","AMD64_","ARM_","ARM64_",
"MARSHAL_","CUSTOM_","SYSSTRING_","FIXED_","VARIANT_","CURRENCY_","SYSCHAR_",
"DECIMAL_","DATE_","BSTR_","TBSTR_","LPSTR_","LPWSTR_","LPTSTR_","OBJECTREF_",
"IUNKNOWN_","IDISPATCH_","STRUCT_","SAFEARRAY_","BYVALSTR_","LPVOID_","ANY_",
"ARRAY_","LPSTRUCT_","IIDPARAM_","IN_","OUT_","OPT_","_PARAM","_OVERRIDE",
"WITH_","NULL_","HRESULT_","CARRAY_","USERDEFINED_","RECORD_","FILETIME_",
"BLOB_","STREAM_","STORAGE_","STREAMED_OBJECT_","STORED_OBJECT_","BLOB_OBJECT_",
"CF_","CLSID_","VECTOR_","_SUBSYSTEM","_CORFLAGS","ALIGNMENT_","_IMAGEBASE",
"_STACKRESERVE","_TYPEDEF","_TEMPLATE","_TYPELIST","_MSCORLIB","P_DEFINE",
"P_UNDEF","P_IFDEF","P_IFNDEF","P_ELSE","P_ENDIF","P_INCLUDE","CONSTRAINT_",
"$accept","decls","dottedName","id","methodName","atOpt","slashedName","labels",
"callConv","callKind","int32","customHead","customHeadWithOwner","vtfixupAttr",
"paramAttr","ddItemCount","variantType","repeatOpt","truefalse","typarAttrib",
"typarAttribs","conTyparAttrib","conTyparAttribs","iidParamIndex","genArity",
"genArityNotEmpty","float64","int64","sigArgs0","sigArgs1","sigArg","type",
"bound","bounds1","bytes","hexbytes","nativeType","marshalBlob","initOpt",
"compQstring","caValue","marshalClause","fieldInit","serInit","fieldSerInit",
"constTypeArg","f32seq","f64seq","i8seq","i16seq","i32seq","i64seq","boolSeq",
"sqstringSeq","classSeq","objSeq","simpleType","tyArgs0","tyArgs1","tyArgs2",
"typeList","typeListNotEmpty","tyBound","customBlobDescr","serializType",
"customBlobArgs","customBlobNVPairs","secAttrBlob","secAttrSetBlob",
"fieldOrProp","intOrWildcard","typarsRest","typars","typarsClause","className",
"typeSpec","ownerType","customType","memberRef","methodRef","mdtoken",
"classAttr","methAttr","fieldAttr","implAttr","eventAttr","propAttr","pinvAttr",
"nameValPairs","nameValPair","secAction","psetHead","fileAttr","fileEntry",
"asmAttr","exptAttr","manresAttr","customDescr","customDescrWithOwner",
"instr_none","instr_var","instr_i","instr_i8","instr_r","instr_brtarget",
"instr_method","instr_field","instr_type","instr_string","instr_sig",
"instr_tok","instr_switch","instr_r_head","decl","classHead","classDecls",
"nameSpaceHead","methodHead","methodDecls","fieldDecl","dataDecl","vtableDecl",
"vtfixupDecl","extSourceSpec","fileDecl","assemblyHead","assemblyDecls",
"assemblyRefHead","assemblyRefDecls","exptypeHead","exptypeDecls",
"manifestResHead","manifestResDecls","moduleHead","secDecl","customAttrDecl",
"languageDecl","typedefDecl","compControl","classNameSeq","vtableHead","_class",
"classHeadBegin","extendsClause","implClause","implList","classDecl",
"eventHead","eventDecls","propHead","propDecls","exportHead","methodSpec",
"eventDecl","propDecl","methodHeadPart1","marshalBlobHead","localsHead",
"methodDecl","sehBlock","instr","scopeBlock","scopeOpen","tryBlock",
"sehClauses","sehClause","tryHead","catchClause","handlerBlock","filterClause",
"finallyClause","faultClause","filterHead","ddHead","ddBody","tls","ddItemList",
"ddItem","bytearrayhead","esHead","hashHead","assemblyDecl","asmOrRefDecl",
"publicKeyHead","localeHead","publicKeyTokenHead","assemblyRefDecl",
"exptypeDecl","manifestResDecl","illegal-symbol",
};
static const char *const yyrule[] = {
"$accept : decls",
"decls :",
"decls : decls decl",
"decl : classHead '{' classDecls '}'",
"decl : nameSpaceHead '{' decls '}'",
"decl : methodHead methodDecls '}'",
"decl : fieldDecl",
"decl : dataDecl",
"decl : vtableDecl",
"decl : vtfixupDecl",
"decl : extSourceSpec",
"decl : fileDecl",
"decl : assemblyHead '{' assemblyDecls '}'",
"decl : assemblyRefHead '{' assemblyRefDecls '}'",
"decl : exptypeHead '{' exptypeDecls '}'",
"decl : manifestResHead '{' manifestResDecls '}'",
"decl : moduleHead",
"decl : secDecl",
"decl : customAttrDecl",
"decl : _SUBSYSTEM int32",
"decl : _CORFLAGS int32",
"decl : _FILE ALIGNMENT_ int32",
"decl : _IMAGEBASE int64",
"decl : _STACKRESERVE int64",
"decl : languageDecl",
"decl : typedefDecl",
"decl : compControl",
"decl : _TYPELIST '{' classNameSeq '}'",
"decl : _MSCORLIB",
"classNameSeq :",
"classNameSeq : className classNameSeq",
"compQstring : QSTRING",
"compQstring : compQstring '+' QSTRING",
"languageDecl : _LANGUAGE SQSTRING",
"languageDecl : _LANGUAGE SQSTRING ',' SQSTRING",
"languageDecl : _LANGUAGE SQSTRING ',' SQSTRING ',' SQSTRING",
"id : ID",
"id : SQSTRING",
"dottedName : id",
"dottedName : DOTTEDNAME",
"dottedName : dottedName '.' dottedName",
"int32 : INT32",
"int64 : INT64",
"int64 : INT32",
"float64 : FLOAT64",
"float64 : FLOAT32_ '(' int32 ')'",
"float64 : FLOAT64_ '(' int64 ')'",
"typedefDecl : _TYPEDEF type AS_ dottedName",
"typedefDecl : _TYPEDEF className AS_ dottedName",
"typedefDecl : _TYPEDEF memberRef AS_ dottedName",
"typedefDecl : _TYPEDEF customDescr AS_ dottedName",
"typedefDecl : _TYPEDEF customDescrWithOwner AS_ dottedName",
"compControl : P_DEFINE dottedName",
"compControl : P_DEFINE dottedName compQstring",
"compControl : P_UNDEF dottedName",
"compControl : P_IFDEF dottedName",
"compControl : P_IFNDEF dottedName",
"compControl : P_ELSE",
"compControl : P_ENDIF",
"compControl : P_INCLUDE QSTRING",
"compControl : ';'",
"customDescr : _CUSTOM customType",
"customDescr : _CUSTOM customType '=' compQstring",
"customDescr : _CUSTOM customType '=' '{' customBlobDescr '}'",
"customDescr : customHead bytes ')'",
"customDescrWithOwner : _CUSTOM '(' ownerType ')' customType",
"customDescrWithOwner : _CUSTOM '(' ownerType ')' customType '=' compQstring",
"customDescrWithOwner : _CUSTOM '(' ownerType ')' customType '=' '{' customBlobDescr '}'",
"customDescrWithOwner : customHeadWithOwner bytes ')'",
"customHead : _CUSTOM customType '=' '('",
"customHeadWithOwner : _CUSTOM '(' ownerType ')' customType '=' '('",
"customType : methodRef",
"ownerType : typeSpec",
"ownerType : memberRef",
"customBlobDescr : customBlobArgs customBlobNVPairs",
"customBlobArgs :",
"customBlobArgs : customBlobArgs serInit",
"customBlobArgs : customBlobArgs compControl",
"customBlobNVPairs :",
"customBlobNVPairs : customBlobNVPairs fieldOrProp serializType dottedName '=' serInit",
"customBlobNVPairs : customBlobNVPairs compControl",
"fieldOrProp : FIELD_",
"fieldOrProp : PROPERTY_",
"customAttrDecl : customDescr",
"customAttrDecl : customDescrWithOwner",
"customAttrDecl : TYPEDEF_CA",
"serializType : simpleType",
"serializType : TYPE_",
"serializType : OBJECT_",
"serializType : ENUM_ CLASS_ SQSTRING",
"serializType : ENUM_ className",
"serializType : serializType '[' ']'",
"moduleHead : _MODULE",
"moduleHead : _MODULE dottedName",
"moduleHead : _MODULE EXTERN_ dottedName",
"vtfixupDecl : _VTFIXUP '[' int32 ']' vtfixupAttr AT_ id",
"vtfixupAttr :",
"vtfixupAttr : vtfixupAttr INT32_",
"vtfixupAttr : vtfixupAttr INT64_",
"vtfixupAttr : vtfixupAttr FROMUNMANAGED_",
"vtfixupAttr : vtfixupAttr CALLMOSTDERIVED_",
"vtfixupAttr : vtfixupAttr RETAINAPPDOMAIN_",
"vtableDecl : vtableHead bytes ')'",
"vtableHead : _VTABLE '=' '('",
"nameSpaceHead : _NAMESPACE dottedName",
"_class : _CLASS",
"classHeadBegin : _class classAttr dottedName typarsClause",
"classHead : classHeadBegin extendsClause implClause",
"classAttr :",
"classAttr : classAttr PUBLIC_",
"classAttr : classAttr PRIVATE_",
"classAttr : classAttr VALUE_",
"classAttr : classAttr ENUM_",
"classAttr : classAttr INTERFACE_",
"classAttr : classAttr SEALED_",
"classAttr : classAttr ABSTRACT_",
"classAttr : classAttr AUTO_",
"classAttr : classAttr SEQUENTIAL_",
"classAttr : classAttr EXPLICIT_",
"classAttr : classAttr ANSI_",
"classAttr : classAttr UNICODE_",
"classAttr : classAttr AUTOCHAR_",
"classAttr : classAttr IMPORT_",
"classAttr : classAttr SERIALIZABLE_",
"classAttr : classAttr WINDOWSRUNTIME_",
"classAttr : classAttr NESTED_ PUBLIC_",
"classAttr : classAttr NESTED_ PRIVATE_",
"classAttr : classAttr NESTED_ FAMILY_",
"classAttr : classAttr NESTED_ ASSEMBLY_",
"classAttr : classAttr NESTED_ FAMANDASSEM_",
"classAttr : classAttr NESTED_ FAMORASSEM_",
"classAttr : classAttr BEFOREFIELDINIT_",
"classAttr : classAttr SPECIALNAME_",
"classAttr : classAttr RTSPECIALNAME_",
"classAttr : classAttr FLAGS_ '(' int32 ')'",
"extendsClause :",
"extendsClause : EXTENDS_ typeSpec",
"implClause :",
"implClause : IMPLEMENTS_ implList",
"classDecls :",
"classDecls : classDecls classDecl",
"implList : implList ',' typeSpec",
"implList : typeSpec",
"typeList :",
"typeList : typeListNotEmpty",
"typeListNotEmpty : typeSpec",
"typeListNotEmpty : typeListNotEmpty ',' typeSpec",
"typarsClause :",
"typarsClause : '<' typars '>'",
"typarAttrib : '+'",
"typarAttrib : '-'",
"typarAttrib : CLASS_",
"typarAttrib : VALUETYPE_",
"typarAttrib : BYREFLIKE_",
"typarAttrib : _CTOR",
"typarAttrib : FLAGS_ '(' int32 ')'",
"typarAttribs :",
"typarAttribs : typarAttrib typarAttribs",
"conTyparAttrib : FLAGS_ '(' int32 ')'",
"conTyparAttribs :",
"conTyparAttribs : conTyparAttrib conTyparAttribs",
"typars : LITERAL_ conTyparAttribs type tyBound dottedName typarsRest",
"typars : LITERAL_ conTyparAttribs type dottedName typarsRest",
"typars : typarAttribs tyBound dottedName typarsRest",
"typars : typarAttribs dottedName typarsRest",
"typarsRest :",
"typarsRest : ',' typars",
"tyBound : '(' typeList ')'",
"genArity :",
"genArity : genArityNotEmpty",
"genArityNotEmpty : '<' '[' int32 ']' '>'",
"classDecl : methodHead methodDecls '}'",
"classDecl : classHead '{' classDecls '}'",
"classDecl : eventHead '{' eventDecls '}'",
"classDecl : propHead '{' propDecls '}'",
"classDecl : fieldDecl",
"classDecl : dataDecl",
"classDecl : secDecl",
"classDecl : extSourceSpec",
"classDecl : customAttrDecl",
"classDecl : _SIZE int32",
"classDecl : _PACK int32",
"classDecl : exportHead '{' exptypeDecls '}'",
"classDecl : _OVERRIDE typeSpec DCOLON methodName WITH_ callConv type typeSpec DCOLON methodName '(' sigArgs0 ')'",
"classDecl : _OVERRIDE METHOD_ callConv type typeSpec DCOLON methodName genArity '(' sigArgs0 ')' WITH_ METHOD_ callConv type typeSpec DCOLON methodName genArity '(' sigArgs0 ')'",
"classDecl : languageDecl",
"classDecl : compControl",
"classDecl : _PARAM TYPE_ '[' int32 ']'",
"classDecl : _PARAM TYPE_ dottedName",
"classDecl : _PARAM CONSTRAINT_ '[' int32 ']' ',' typeSpec",
"classDecl : _PARAM CONSTRAINT_ dottedName ',' typeSpec",
"classDecl : _INTERFACEIMPL TYPE_ typeSpec customDescr",
"fieldDecl : _FIELD repeatOpt fieldAttr type dottedName atOpt initOpt",
"fieldAttr :",
"fieldAttr : fieldAttr STATIC_",
"fieldAttr : fieldAttr PUBLIC_",
"fieldAttr : fieldAttr PRIVATE_",
"fieldAttr : fieldAttr FAMILY_",
"fieldAttr : fieldAttr INITONLY_",
"fieldAttr : fieldAttr RTSPECIALNAME_",
"fieldAttr : fieldAttr SPECIALNAME_",
"fieldAttr : fieldAttr MARSHAL_ '(' marshalBlob ')'",
"fieldAttr : fieldAttr ASSEMBLY_",
"fieldAttr : fieldAttr FAMANDASSEM_",
"fieldAttr : fieldAttr FAMORASSEM_",
"fieldAttr : fieldAttr PRIVATESCOPE_",
"fieldAttr : fieldAttr LITERAL_",
"fieldAttr : fieldAttr NOTSERIALIZED_",
"fieldAttr : fieldAttr FLAGS_ '(' int32 ')'",
"atOpt :",
"atOpt : AT_ id",
"initOpt :",
"initOpt : '=' fieldInit",
"repeatOpt :",
"repeatOpt : '[' int32 ']'",
"methodRef : callConv type typeSpec DCOLON methodName tyArgs0 '(' sigArgs0 ')'",
"methodRef : callConv type typeSpec DCOLON methodName genArityNotEmpty '(' sigArgs0 ')'",
"methodRef : callConv type methodName tyArgs0 '(' sigArgs0 ')'",
"methodRef : callConv type methodName genArityNotEmpty '(' sigArgs0 ')'",
"methodRef : mdtoken",
"methodRef : TYPEDEF_M",
"methodRef : TYPEDEF_MR",
"callConv : INSTANCE_ callConv",
"callConv : EXPLICIT_ callConv",
"callConv : callKind",
"callConv : CALLCONV_ '(' int32 ')'",
"callKind :",
"callKind : DEFAULT_",
"callKind : VARARG_",
"callKind : UNMANAGED_ CDECL_",
"callKind : UNMANAGED_ STDCALL_",
"callKind : UNMANAGED_ THISCALL_",
"callKind : UNMANAGED_ FASTCALL_",
"callKind : UNMANAGED_",
"mdtoken : MDTOKEN_ '(' int32 ')'",
"memberRef : methodSpec methodRef",
"memberRef : FIELD_ type typeSpec DCOLON dottedName",
"memberRef : FIELD_ type dottedName",
"memberRef : FIELD_ TYPEDEF_F",
"memberRef : FIELD_ TYPEDEF_MR",
"memberRef : mdtoken",
"eventHead : _EVENT eventAttr typeSpec dottedName",
"eventHead : _EVENT eventAttr dottedName",
"eventAttr :",
"eventAttr : eventAttr RTSPECIALNAME_",
"eventAttr : eventAttr SPECIALNAME_",
"eventDecls :",
"eventDecls : eventDecls eventDecl",
"eventDecl : _ADDON methodRef",
"eventDecl : _REMOVEON methodRef",
"eventDecl : _FIRE methodRef",
"eventDecl : _OTHER methodRef",
"eventDecl : extSourceSpec",
"eventDecl : customAttrDecl",
"eventDecl : languageDecl",
"eventDecl : compControl",
"propHead : _PROPERTY propAttr callConv type dottedName '(' sigArgs0 ')' initOpt",
"propAttr :",
"propAttr : propAttr RTSPECIALNAME_",
"propAttr : propAttr SPECIALNAME_",
"propDecls :",
"propDecls : propDecls propDecl",
"propDecl : _SET methodRef",
"propDecl : _GET methodRef",
"propDecl : _OTHER methodRef",
"propDecl : customAttrDecl",
"propDecl : extSourceSpec",
"propDecl : languageDecl",
"propDecl : compControl",
"methodHeadPart1 : _METHOD",
"marshalClause :",
"marshalClause : MARSHAL_ '(' marshalBlob ')'",
"marshalBlob : nativeType",
"marshalBlob : marshalBlobHead hexbytes '}'",
"marshalBlobHead : '{'",
"methodHead : methodHeadPart1 methAttr callConv paramAttr type marshalClause methodName typarsClause '(' sigArgs0 ')' implAttr '{'",
"methAttr :",
"methAttr : methAttr STATIC_",
"methAttr : methAttr PUBLIC_",
"methAttr : methAttr PRIVATE_",
"methAttr : methAttr FAMILY_",
"methAttr : methAttr FINAL_",
"methAttr : methAttr SPECIALNAME_",
"methAttr : methAttr VIRTUAL_",
"methAttr : methAttr STRICT_",
"methAttr : methAttr ABSTRACT_",
"methAttr : methAttr ASSEMBLY_",
"methAttr : methAttr FAMANDASSEM_",
"methAttr : methAttr FAMORASSEM_",
"methAttr : methAttr PRIVATESCOPE_",
"methAttr : methAttr HIDEBYSIG_",
"methAttr : methAttr NEWSLOT_",
"methAttr : methAttr RTSPECIALNAME_",
"methAttr : methAttr UNMANAGEDEXP_",
"methAttr : methAttr REQSECOBJ_",
"methAttr : methAttr FLAGS_ '(' int32 ')'",
"methAttr : methAttr PINVOKEIMPL_ '(' compQstring AS_ compQstring pinvAttr ')'",
"methAttr : methAttr PINVOKEIMPL_ '(' compQstring pinvAttr ')'",
"methAttr : methAttr PINVOKEIMPL_ '(' pinvAttr ')'",
"pinvAttr :",
"pinvAttr : pinvAttr NOMANGLE_",
"pinvAttr : pinvAttr ANSI_",
"pinvAttr : pinvAttr UNICODE_",
"pinvAttr : pinvAttr AUTOCHAR_",
"pinvAttr : pinvAttr LASTERR_",
"pinvAttr : pinvAttr WINAPI_",
"pinvAttr : pinvAttr CDECL_",
"pinvAttr : pinvAttr STDCALL_",
"pinvAttr : pinvAttr THISCALL_",
"pinvAttr : pinvAttr FASTCALL_",
"pinvAttr : pinvAttr BESTFIT_ ':' ON_",
"pinvAttr : pinvAttr BESTFIT_ ':' OFF_",
"pinvAttr : pinvAttr CHARMAPERROR_ ':' ON_",
"pinvAttr : pinvAttr CHARMAPERROR_ ':' OFF_",
"pinvAttr : pinvAttr FLAGS_ '(' int32 ')'",
"methodName : _CTOR",
"methodName : _CCTOR",
"methodName : dottedName",
"paramAttr :",
"paramAttr : paramAttr '[' IN_ ']'",
"paramAttr : paramAttr '[' OUT_ ']'",
"paramAttr : paramAttr '[' OPT_ ']'",
"paramAttr : paramAttr '[' int32 ']'",
"implAttr :",
"implAttr : implAttr NATIVE_",
"implAttr : implAttr CIL_",
"implAttr : implAttr OPTIL_",
"implAttr : implAttr MANAGED_",
"implAttr : implAttr UNMANAGED_",
"implAttr : implAttr FORWARDREF_",
"implAttr : implAttr PRESERVESIG_",
"implAttr : implAttr RUNTIME_",
"implAttr : implAttr INTERNALCALL_",
"implAttr : implAttr SYNCHRONIZED_",
"implAttr : implAttr NOINLINING_",
"implAttr : implAttr AGGRESSIVEINLINING_",
"implAttr : implAttr NOOPTIMIZATION_",
"implAttr : implAttr AGGRESSIVEOPTIMIZATION_",
"implAttr : implAttr FLAGS_ '(' int32 ')'",
"localsHead : _LOCALS",
"methodDecls :",
"methodDecls : methodDecls methodDecl",
"methodDecl : _EMITBYTE int32",
"methodDecl : sehBlock",
"methodDecl : _MAXSTACK int32",
"methodDecl : localsHead '(' sigArgs0 ')'",
"methodDecl : localsHead INIT_ '(' sigArgs0 ')'",
"methodDecl : _ENTRYPOINT",
"methodDecl : _ZEROINIT",
"methodDecl : dataDecl",
"methodDecl : instr",
"methodDecl : id ':'",
"methodDecl : secDecl",
"methodDecl : extSourceSpec",
"methodDecl : languageDecl",
"methodDecl : customAttrDecl",
"methodDecl : compControl",
"methodDecl : _EXPORT '[' int32 ']'",
"methodDecl : _EXPORT '[' int32 ']' AS_ id",
"methodDecl : _VTENTRY int32 ':' int32",
"methodDecl : _OVERRIDE typeSpec DCOLON methodName",
"methodDecl : _OVERRIDE METHOD_ callConv type typeSpec DCOLON methodName genArity '(' sigArgs0 ')'",
"methodDecl : scopeBlock",
"methodDecl : _PARAM TYPE_ '[' int32 ']'",
"methodDecl : _PARAM TYPE_ dottedName",
"methodDecl : _PARAM CONSTRAINT_ '[' int32 ']' ',' typeSpec",
"methodDecl : _PARAM CONSTRAINT_ dottedName ',' typeSpec",
"methodDecl : _PARAM '[' int32 ']' initOpt",
"scopeBlock : scopeOpen methodDecls '}'",
"scopeOpen : '{'",
"sehBlock : tryBlock sehClauses",
"sehClauses : sehClause sehClauses",
"sehClauses : sehClause",
"tryBlock : tryHead scopeBlock",
"tryBlock : tryHead id TO_ id",
"tryBlock : tryHead int32 TO_ int32",
"tryHead : _TRY",
"sehClause : catchClause handlerBlock",
"sehClause : filterClause handlerBlock",
"sehClause : finallyClause handlerBlock",
"sehClause : faultClause handlerBlock",
"filterClause : filterHead scopeBlock",
"filterClause : filterHead id",
"filterClause : filterHead int32",
"filterHead : FILTER_",
"catchClause : CATCH_ typeSpec",
"finallyClause : FINALLY_",
"faultClause : FAULT_",
"handlerBlock : scopeBlock",
"handlerBlock : HANDLER_ id TO_ id",
"handlerBlock : HANDLER_ int32 TO_ int32",
"dataDecl : ddHead ddBody",
"ddHead : _DATA tls id '='",
"ddHead : _DATA tls",
"tls :",
"tls : TLS_",
"tls : CIL_",
"ddBody : '{' ddItemList '}'",
"ddBody : ddItem",
"ddItemList : ddItem ',' ddItemList",
"ddItemList : ddItem",
"ddItemCount :",
"ddItemCount : '[' int32 ']'",
"ddItem : CHAR_ '*' '(' compQstring ')'",
"ddItem : '&' '(' id ')'",
"ddItem : bytearrayhead bytes ')'",
"ddItem : FLOAT32_ '(' float64 ')' ddItemCount",
"ddItem : FLOAT64_ '(' float64 ')' ddItemCount",
"ddItem : INT64_ '(' int64 ')' ddItemCount",
"ddItem : INT32_ '(' int32 ')' ddItemCount",
"ddItem : INT16_ '(' int32 ')' ddItemCount",
"ddItem : INT8_ '(' int32 ')' ddItemCount",
"ddItem : FLOAT32_ ddItemCount",
"ddItem : FLOAT64_ ddItemCount",
"ddItem : INT64_ ddItemCount",
"ddItem : INT32_ ddItemCount",
"ddItem : INT16_ ddItemCount",
"ddItem : INT8_ ddItemCount",
"fieldSerInit : FLOAT32_ '(' float64 ')'",
"fieldSerInit : FLOAT64_ '(' float64 ')'",
"fieldSerInit : FLOAT32_ '(' int32 ')'",
"fieldSerInit : FLOAT64_ '(' int64 ')'",
"fieldSerInit : INT64_ '(' int64 ')'",
"fieldSerInit : INT32_ '(' int32 ')'",
"fieldSerInit : INT16_ '(' int32 ')'",
"fieldSerInit : INT8_ '(' int32 ')'",
"fieldSerInit : UNSIGNED_ INT64_ '(' int64 ')'",
"fieldSerInit : UNSIGNED_ INT32_ '(' int32 ')'",
"fieldSerInit : UNSIGNED_ INT16_ '(' int32 ')'",
"fieldSerInit : UNSIGNED_ INT8_ '(' int32 ')'",
"fieldSerInit : UINT64_ '(' int64 ')'",
"fieldSerInit : UINT32_ '(' int32 ')'",
"fieldSerInit : UINT16_ '(' int32 ')'",
"fieldSerInit : UINT8_ '(' int32 ')'",
"fieldSerInit : CHAR_ '(' int32 ')'",
"fieldSerInit : BOOL_ '(' truefalse ')'",
"fieldSerInit : bytearrayhead bytes ')'",
"bytearrayhead : BYTEARRAY_ '('",
"bytes :",
"bytes : hexbytes",
"hexbytes : HEXBYTE",
"hexbytes : hexbytes HEXBYTE",
"fieldInit : fieldSerInit",
"fieldInit : compQstring",
"fieldInit : NULLREF_",
"serInit : fieldSerInit",
"serInit : STRING_ '(' NULLREF_ ')'",
"serInit : STRING_ '(' SQSTRING ')'",
"serInit : TYPE_ '(' CLASS_ SQSTRING ')'",
"serInit : TYPE_ '(' className ')'",
"serInit : TYPE_ '(' NULLREF_ ')'",
"serInit : OBJECT_ '(' serInit ')'",
"serInit : FLOAT32_ '[' int32 ']' '(' f32seq ')'",
"serInit : FLOAT64_ '[' int32 ']' '(' f64seq ')'",
"serInit : INT64_ '[' int32 ']' '(' i64seq ')'",
"serInit : INT32_ '[' int32 ']' '(' i32seq ')'",
"serInit : INT16_ '[' int32 ']' '(' i16seq ')'",
"serInit : INT8_ '[' int32 ']' '(' i8seq ')'",
"serInit : UINT64_ '[' int32 ']' '(' i64seq ')'",
"serInit : UINT32_ '[' int32 ']' '(' i32seq ')'",
"serInit : UINT16_ '[' int32 ']' '(' i16seq ')'",
"serInit : UINT8_ '[' int32 ']' '(' i8seq ')'",
"serInit : UNSIGNED_ INT64_ '[' int32 ']' '(' i64seq ')'",
"serInit : UNSIGNED_ INT32_ '[' int32 ']' '(' i32seq ')'",
"serInit : UNSIGNED_ INT16_ '[' int32 ']' '(' i16seq ')'",
"serInit : UNSIGNED_ INT8_ '[' int32 ']' '(' i8seq ')'",
"serInit : CHAR_ '[' int32 ']' '(' i16seq ')'",
"serInit : BOOL_ '[' int32 ']' '(' boolSeq ')'",
"serInit : STRING_ '[' int32 ']' '(' sqstringSeq ')'",
"serInit : TYPE_ '[' int32 ']' '(' classSeq ')'",
"serInit : OBJECT_ '[' int32 ']' '(' objSeq ')'",
"constTypeArg : FLOAT32_ '(' float64 ')'",
"constTypeArg : FLOAT64_ '(' float64 ')'",
"constTypeArg : FLOAT32_ '(' int32 ')'",
"constTypeArg : FLOAT64_ '(' int64 ')'",
"constTypeArg : INT64_ '(' int64 ')'",
"constTypeArg : INT32_ '(' int32 ')'",
"constTypeArg : INT16_ '(' int32 ')'",
"constTypeArg : INT8_ '(' int32 ')'",
"constTypeArg : UNSIGNED_ INT64_ '(' int64 ')'",
"constTypeArg : UNSIGNED_ INT32_ '(' int32 ')'",
"constTypeArg : UNSIGNED_ INT16_ '(' int32 ')'",
"constTypeArg : UNSIGNED_ INT8_ '(' int32 ')'",
"constTypeArg : UINT64_ '(' int64 ')'",
"constTypeArg : UINT32_ '(' int32 ')'",
"constTypeArg : UINT16_ '(' int32 ')'",
"constTypeArg : UINT8_ '(' int32 ')'",
"constTypeArg : CHAR_ '(' int32 ')'",
"constTypeArg : BOOL_ '(' truefalse ')'",
"constTypeArg : STRING_ '(' compQstring ')'",
"constTypeArg : VALUETYPE_ className '(' bytearrayhead bytes ')' ')'",
"f32seq :",
"f32seq : f32seq float64",
"f32seq : f32seq int32",
"f64seq :",
"f64seq : f64seq float64",
"f64seq : f64seq int64",
"i64seq :",
"i64seq : i64seq int64",
"i32seq :",
"i32seq : i32seq int32",
"i16seq :",
"i16seq : i16seq int32",
"i8seq :",
"i8seq : i8seq int32",
"boolSeq :",
"boolSeq : boolSeq truefalse",
"sqstringSeq :",
"sqstringSeq : sqstringSeq NULLREF_",
"sqstringSeq : sqstringSeq SQSTRING",
"classSeq :",
"classSeq : classSeq NULLREF_",
"classSeq : classSeq CLASS_ SQSTRING",
"classSeq : classSeq className",
"objSeq :",
"objSeq : objSeq serInit",
"methodSpec : METHOD_",
"instr_none : INSTR_NONE",
"instr_var : INSTR_VAR",
"instr_i : INSTR_I",
"instr_i8 : INSTR_I8",
"instr_r : INSTR_R",
"instr_brtarget : INSTR_BRTARGET",
"instr_method : INSTR_METHOD",
"instr_field : INSTR_FIELD",
"instr_type : INSTR_TYPE",
"instr_string : INSTR_STRING",
"instr_sig : INSTR_SIG",
"instr_tok : INSTR_TOK",
"instr_switch : INSTR_SWITCH",
"instr_r_head : instr_r '('",
"instr : instr_none",
"instr : instr_var int32",
"instr : instr_var id",
"instr : instr_i int32",
"instr : instr_i8 int64",
"instr : instr_r float64",
"instr : instr_r int64",
"instr : instr_r_head bytes ')'",
"instr : instr_brtarget int32",
"instr : instr_brtarget id",
"instr : instr_method methodRef",
"instr : instr_field type typeSpec DCOLON dottedName",
"instr : instr_field type dottedName",
"instr : instr_field mdtoken",
"instr : instr_field TYPEDEF_F",
"instr : instr_field TYPEDEF_MR",
"instr : instr_type typeSpec",
"instr : instr_string compQstring",
"instr : instr_string ANSI_ '(' compQstring ')'",
"instr : instr_string bytearrayhead bytes ')'",
"instr : instr_sig callConv type '(' sigArgs0 ')'",
"instr : instr_tok ownerType",
"instr : instr_switch '(' labels ')'",
"labels :",
"labels : id ',' labels",
"labels : int32 ',' labels",
"labels : id",
"labels : int32",
"tyArgs0 :",
"tyArgs0 : '<' tyArgs1 '>'",
"tyArgs1 :",
"tyArgs1 : tyArgs2",
"tyArgs2 : type",
"tyArgs2 : tyArgs2 ',' type",
"sigArgs0 :",
"sigArgs0 : sigArgs1",
"sigArgs1 : sigArg",
"sigArgs1 : sigArgs1 ',' sigArg",
"sigArg : ELLIPSIS",
"sigArg : paramAttr type marshalClause",
"sigArg : paramAttr type marshalClause id",
"className : '[' dottedName ']' slashedName",
"className : '[' mdtoken ']' slashedName",
"className : '[' '*' ']' slashedName",
"className : '[' _MODULE dottedName ']' slashedName",
"className : slashedName",
"className : mdtoken",
"className : TYPEDEF_T",
"className : _THIS",
"className : _BASE",
"className : _NESTER",
"slashedName : dottedName",
"slashedName : slashedName '/' dottedName",
"typeSpec : className",
"typeSpec : '[' dottedName ']'",
"typeSpec : '[' _MODULE dottedName ']'",
"typeSpec : type",
"nativeType :",
"nativeType : CUSTOM_ '(' compQstring ',' compQstring ',' compQstring ',' compQstring ')'",
"nativeType : CUSTOM_ '(' compQstring ',' compQstring ')'",
"nativeType : FIXED_ SYSSTRING_ '[' int32 ']'",
"nativeType : FIXED_ ARRAY_ '[' int32 ']' nativeType",
"nativeType : VARIANT_",
"nativeType : CURRENCY_",
"nativeType : SYSCHAR_",
"nativeType : VOID_",
"nativeType : BOOL_",
"nativeType : INT8_",
"nativeType : INT16_",
"nativeType : INT32_",
"nativeType : INT64_",
"nativeType : FLOAT32_",
"nativeType : FLOAT64_",
"nativeType : ERROR_",
"nativeType : UNSIGNED_ INT8_",
"nativeType : UNSIGNED_ INT16_",
"nativeType : UNSIGNED_ INT32_",
"nativeType : UNSIGNED_ INT64_",
"nativeType : UINT8_",
"nativeType : UINT16_",
"nativeType : UINT32_",
"nativeType : UINT64_",
"nativeType : nativeType '*'",
"nativeType : nativeType '[' ']'",
"nativeType : nativeType '[' int32 ']'",
"nativeType : nativeType '[' int32 '+' int32 ']'",
"nativeType : nativeType '[' '+' int32 ']'",
"nativeType : DECIMAL_",
"nativeType : DATE_",
"nativeType : BSTR_",
"nativeType : LPSTR_",
"nativeType : LPWSTR_",
"nativeType : LPTSTR_",
"nativeType : OBJECTREF_",
"nativeType : IUNKNOWN_ iidParamIndex",
"nativeType : IDISPATCH_ iidParamIndex",
"nativeType : STRUCT_",
"nativeType : INTERFACE_ iidParamIndex",
"nativeType : SAFEARRAY_ variantType",
"nativeType : SAFEARRAY_ variantType ',' compQstring",
"nativeType : INT_",
"nativeType : UNSIGNED_ INT_",
"nativeType : UINT_",
"nativeType : NESTED_ STRUCT_",
"nativeType : BYVALSTR_",
"nativeType : ANSI_ BSTR_",
"nativeType : TBSTR_",
"nativeType : VARIANT_ BOOL_",
"nativeType : METHOD_",
"nativeType : AS_ ANY_",
"nativeType : LPSTRUCT_",
"nativeType : TYPEDEF_TS",
"iidParamIndex :",
"iidParamIndex : '(' IIDPARAM_ '=' int32 ')'",
"variantType :",
"variantType : NULL_",
"variantType : VARIANT_",
"variantType : CURRENCY_",
"variantType : VOID_",
"variantType : BOOL_",
"variantType : INT8_",
"variantType : INT16_",
"variantType : INT32_",
"variantType : INT64_",
"variantType : FLOAT32_",
"variantType : FLOAT64_",
"variantType : UNSIGNED_ INT8_",
"variantType : UNSIGNED_ INT16_",
"variantType : UNSIGNED_ INT32_",
"variantType : UNSIGNED_ INT64_",
"variantType : UINT8_",
"variantType : UINT16_",
"variantType : UINT32_",
"variantType : UINT64_",
"variantType : '*'",
"variantType : variantType '[' ']'",
"variantType : variantType VECTOR_",
"variantType : variantType '&'",
"variantType : DECIMAL_",
"variantType : DATE_",
"variantType : BSTR_",
"variantType : LPSTR_",
"variantType : LPWSTR_",
"variantType : IUNKNOWN_",
"variantType : IDISPATCH_",
"variantType : SAFEARRAY_",
"variantType : INT_",
"variantType : UNSIGNED_ INT_",
"variantType : UINT_",
"variantType : ERROR_",
"variantType : HRESULT_",
"variantType : CARRAY_",
"variantType : USERDEFINED_",
"variantType : RECORD_",
"variantType : FILETIME_",
"variantType : BLOB_",
"variantType : STREAM_",
"variantType : STORAGE_",
"variantType : STREAMED_OBJECT_",
"variantType : STORED_OBJECT_",
"variantType : BLOB_OBJECT_",
"variantType : CF_",
"variantType : CLSID_",
"type : CLASS_ className",
"type : OBJECT_",
"type : VALUE_ CLASS_ className",
"type : VALUETYPE_ className",
"type : constTypeArg",
"type : type '[' ']'",
"type : type '[' bounds1 ']'",
"type : type '&'",
"type : type '*'",
"type : type PINNED_",
"type : type MODREQ_ '(' typeSpec ')'",
"type : type MODOPT_ '(' typeSpec ')'",
"type : methodSpec callConv type '*' '(' sigArgs0 ')'",
"type : type '<' tyArgs1 '>'",
"type : '!' '!' int32",
"type : '!' int32",
"type : '!' '!' dottedName",
"type : '!' dottedName",
"type : TYPEDREF_",
"type : VOID_",
"type : NATIVE_ INT_",
"type : NATIVE_ UNSIGNED_ INT_",
"type : NATIVE_ UINT_",
"type : simpleType",
"type : ELLIPSIS type",
"simpleType : CHAR_",
"simpleType : STRING_",
"simpleType : BOOL_",
"simpleType : INT8_",
"simpleType : INT16_",
"simpleType : INT32_",
"simpleType : INT64_",
"simpleType : FLOAT32_",
"simpleType : FLOAT64_",
"simpleType : UNSIGNED_ INT8_",
"simpleType : UNSIGNED_ INT16_",
"simpleType : UNSIGNED_ INT32_",
"simpleType : UNSIGNED_ INT64_",
"simpleType : UINT8_",
"simpleType : UINT16_",
"simpleType : UINT32_",
"simpleType : UINT64_",
"simpleType : TYPEDEF_TS",
"bounds1 : bound",
"bounds1 : bounds1 ',' bound",
"bound :",
"bound : ELLIPSIS",
"bound : int32",
"bound : int32 ELLIPSIS int32",
"bound : int32 ELLIPSIS",
"secDecl : _PERMISSION secAction typeSpec '(' nameValPairs ')'",
"secDecl : _PERMISSION secAction typeSpec '=' '{' customBlobDescr '}'",
"secDecl : _PERMISSION secAction typeSpec",
"secDecl : psetHead bytes ')'",
"secDecl : _PERMISSIONSET secAction compQstring",
"secDecl : _PERMISSIONSET secAction '=' '{' secAttrSetBlob '}'",
"secAttrSetBlob :",
"secAttrSetBlob : secAttrBlob",
"secAttrSetBlob : secAttrBlob ',' secAttrSetBlob",
"secAttrBlob : typeSpec '=' '{' customBlobNVPairs '}'",
"secAttrBlob : CLASS_ SQSTRING '=' '{' customBlobNVPairs '}'",
"psetHead : _PERMISSIONSET secAction '=' '('",
"psetHead : _PERMISSIONSET secAction BYTEARRAY_ '('",
"nameValPairs : nameValPair",
"nameValPairs : nameValPair ',' nameValPairs",
"nameValPair : compQstring '=' caValue",
"truefalse : TRUE_",
"truefalse : FALSE_",
"caValue : truefalse",
"caValue : int32",
"caValue : INT32_ '(' int32 ')'",
"caValue : compQstring",
"caValue : className '(' INT8_ ':' int32 ')'",
"caValue : className '(' INT16_ ':' int32 ')'",
"caValue : className '(' INT32_ ':' int32 ')'",
"caValue : className '(' int32 ')'",
"secAction : REQUEST_",
"secAction : DEMAND_",
"secAction : ASSERT_",
"secAction : DENY_",
"secAction : PERMITONLY_",
"secAction : LINKCHECK_",
"secAction : INHERITCHECK_",
"secAction : REQMIN_",
"secAction : REQOPT_",
"secAction : REQREFUSE_",
"secAction : PREJITGRANT_",
"secAction : PREJITDENY_",
"secAction : NONCASDEMAND_",
"secAction : NONCASLINKDEMAND_",
"secAction : NONCASINHERITANCE_",
"esHead : _LINE",
"esHead : P_LINE",
"extSourceSpec : esHead int32 SQSTRING",
"extSourceSpec : esHead int32",
"extSourceSpec : esHead int32 ':' int32 SQSTRING",
"extSourceSpec : esHead int32 ':' int32",
"extSourceSpec : esHead int32 ':' int32 ',' int32 SQSTRING",
"extSourceSpec : esHead int32 ':' int32 ',' int32",
"extSourceSpec : esHead int32 ',' int32 ':' int32 SQSTRING",
"extSourceSpec : esHead int32 ',' int32 ':' int32",
"extSourceSpec : esHead int32 ',' int32 ':' int32 ',' int32 SQSTRING",
"extSourceSpec : esHead int32 ',' int32 ':' int32 ',' int32",
"extSourceSpec : esHead int32 QSTRING",
"fileDecl : _FILE fileAttr dottedName fileEntry hashHead bytes ')' fileEntry",
"fileDecl : _FILE fileAttr dottedName fileEntry",
"fileAttr :",
"fileAttr : fileAttr NOMETADATA_",
"fileEntry :",
"fileEntry : _ENTRYPOINT",
"hashHead : _HASH '=' '('",
"assemblyHead : _ASSEMBLY asmAttr dottedName",
"asmAttr :",
"asmAttr : asmAttr RETARGETABLE_",
"asmAttr : asmAttr WINDOWSRUNTIME_",
"asmAttr : asmAttr NOPLATFORM_",
"asmAttr : asmAttr LEGACY_ LIBRARY_",
"asmAttr : asmAttr CIL_",
"asmAttr : asmAttr X86_",
"asmAttr : asmAttr AMD64_",
"asmAttr : asmAttr ARM_",
"asmAttr : asmAttr ARM64_",
"assemblyDecls :",
"assemblyDecls : assemblyDecls assemblyDecl",
"assemblyDecl : _HASH ALGORITHM_ int32",
"assemblyDecl : secDecl",
"assemblyDecl : asmOrRefDecl",
"intOrWildcard : int32",
"intOrWildcard : '*'",
"asmOrRefDecl : publicKeyHead bytes ')'",
"asmOrRefDecl : _VER intOrWildcard ':' intOrWildcard ':' intOrWildcard ':' intOrWildcard",
"asmOrRefDecl : _LOCALE compQstring",
"asmOrRefDecl : localeHead bytes ')'",
"asmOrRefDecl : customAttrDecl",
"asmOrRefDecl : compControl",
"publicKeyHead : _PUBLICKEY '=' '('",
"publicKeyTokenHead : _PUBLICKEYTOKEN '=' '('",
"localeHead : _LOCALE '=' '('",
"assemblyRefHead : _ASSEMBLY EXTERN_ asmAttr dottedName",
"assemblyRefHead : _ASSEMBLY EXTERN_ asmAttr dottedName AS_ dottedName",
"assemblyRefDecls :",
"assemblyRefDecls : assemblyRefDecls assemblyRefDecl",
"assemblyRefDecl : hashHead bytes ')'",
"assemblyRefDecl : asmOrRefDecl",
"assemblyRefDecl : publicKeyTokenHead bytes ')'",
"assemblyRefDecl : AUTO_",
"exptypeHead : _CLASS EXTERN_ exptAttr dottedName",
"exportHead : _EXPORT exptAttr dottedName",
"exptAttr :",
"exptAttr : exptAttr PRIVATE_",
"exptAttr : exptAttr PUBLIC_",
"exptAttr : exptAttr FORWARDER_",
"exptAttr : exptAttr NESTED_ PUBLIC_",
"exptAttr : exptAttr NESTED_ PRIVATE_",
"exptAttr : exptAttr NESTED_ FAMILY_",
"exptAttr : exptAttr NESTED_ ASSEMBLY_",
"exptAttr : exptAttr NESTED_ FAMANDASSEM_",
"exptAttr : exptAttr NESTED_ FAMORASSEM_",
"exptypeDecls :",
"exptypeDecls : exptypeDecls exptypeDecl",
"exptypeDecl : _FILE dottedName",
"exptypeDecl : _CLASS EXTERN_ slashedName",
"exptypeDecl : _ASSEMBLY EXTERN_ dottedName",
"exptypeDecl : MDTOKEN_ '(' int32 ')'",
"exptypeDecl : _CLASS int32",
"exptypeDecl : customAttrDecl",
"exptypeDecl : compControl",
"manifestResHead : _MRESOURCE manresAttr dottedName",
"manifestResHead : _MRESOURCE manresAttr dottedName AS_ dottedName",
"manresAttr :",
"manresAttr : manresAttr PUBLIC_",
"manresAttr : manresAttr PRIVATE_",
"manifestResDecls :",
"manifestResDecls : manifestResDecls manifestResDecl",
"manifestResDecl : _FILE dottedName AT_ int32",
"manifestResDecl : _ASSEMBLY EXTERN_ dottedName",
"manifestResDecl : customAttrDecl",
"manifestResDecl : compControl",

};
#endif

#if YYDEBUG
int      yydebug;
#endif

int      yyerrflag;
int      yychar;
YYSTYPE  yyval;
YYSTYPE  yylval;
int      yynerrs;

#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
YYLTYPE  yyloc; /* position returned by actions */
YYLTYPE  yylloc; /* position from the lexer */
#endif

#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
#ifndef YYLLOC_DEFAULT
#define YYLLOC_DEFAULT(loc, rhs, n) \
do \
{ \
    if (n == 0) \
    { \
        (loc).first_line   = YYRHSLOC(rhs, 0).last_line; \
        (loc).first_column = YYRHSLOC(rhs, 0).last_column; \
        (loc).last_line    = YYRHSLOC(rhs, 0).last_line; \
        (loc).last_column  = YYRHSLOC(rhs, 0).last_column; \
    } \
    else \
    { \
        (loc).first_line   = YYRHSLOC(rhs, 1).first_line; \
        (loc).first_column = YYRHSLOC(rhs, 1).first_column; \
        (loc).last_line    = YYRHSLOC(rhs, n).last_line; \
        (loc).last_column  = YYRHSLOC(rhs, n).last_column; \
    } \
} while (0)
#endif /* YYLLOC_DEFAULT */
#endif /* defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED) */
#if YYBTYACC

#ifndef YYLVQUEUEGROWTH
#define YYLVQUEUEGROWTH 32
#endif
#endif /* YYBTYACC */

/* define the initial stack-sizes */
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH  YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 10000
#define YYMAXDEPTH  10000
#endif
#endif

#ifndef YYINITSTACKSIZE
#define YYINITSTACKSIZE 200
#endif

typedef struct {
    unsigned stacksize;
    YYINT    *s_base;
    YYINT    *s_mark;
    YYINT    *s_last;
    YYSTYPE  *l_base;
    YYSTYPE  *l_mark;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    YYLTYPE  *p_base;
    YYLTYPE  *p_mark;
#endif
} YYSTACKDATA;
#if YYBTYACC

struct YYParseState_s
{
    struct YYParseState_s *save;    /* Previously saved parser state */
    YYSTACKDATA            yystack; /* saved parser stack */
    int                    state;   /* saved parser state */
    int                    errflag; /* saved error recovery status */
    int                    lexeme;  /* saved index of the conflict lexeme in the lexical queue */
    YYINT                  ctry;    /* saved index in yyctable[] for this conflict */
};
typedef struct YYParseState_s YYParseState;
#endif /* YYBTYACC */
/* variables for the parser stack */
static YYSTACKDATA yystack;
#if YYBTYACC

/* Current parser state */
static YYParseState *yyps = 0;

/* yypath != NULL: do the full parse, starting at *yypath parser state. */
static YYParseState *yypath = 0;

/* Base of the lexical value queue */
static YYSTYPE *yylvals = 0;

/* Current position at lexical value queue */
static YYSTYPE *yylvp = 0;

/* End position of lexical value queue */
static YYSTYPE *yylve = 0;

/* The last allocated position at the lexical value queue */
static YYSTYPE *yylvlim = 0;

#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
/* Base of the lexical position queue */
static YYLTYPE *yylpsns = 0;

/* Current position at lexical position queue */
static YYLTYPE *yylpp = 0;

/* End position of lexical position queue */
static YYLTYPE *yylpe = 0;

/* The last allocated position at the lexical position queue */
static YYLTYPE *yylplim = 0;
#endif

/* Current position at lexical token queue */
static YYINT  *yylexp = 0;

static YYINT  *yylexemes = 0;
#endif /* YYBTYACC */
#line 2119 "asmparse.y"


#include "grammar_after.cpp"
#line 8636 "asmparse.cpp"

/* For use in generated program */
#define yydepth (int)(yystack.s_mark - yystack.s_base)
#if YYBTYACC
#define yytrial (yyps->save)
#endif /* YYBTYACC */

#if YYDEBUG
#include <stdio.h>	/* needed for printf */
#endif

#include <stdlib.h>	/* needed for malloc, etc */
#include <string.h>	/* needed for memset */

/* allocate initial stack or double stack size, up to YYMAXDEPTH */
static int yygrowstack(YYSTACKDATA *data)
{
    int i;
    unsigned newsize;
    YYINT *newss;
    YYSTYPE *newvs;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    YYLTYPE *newps;
#endif

    if ((newsize = data->stacksize) == 0)
        newsize = YYINITSTACKSIZE;
    else if (newsize >= YYMAXDEPTH)
        return YYENOMEM;
    else if ((newsize *= 2) > YYMAXDEPTH)
        newsize = YYMAXDEPTH;

    i = (int) (data->s_mark - data->s_base);
    newss = (YYINT *)realloc(data->s_base, newsize * sizeof(*newss));
    if (newss == 0)
        return YYENOMEM;

    data->s_base = newss;
    data->s_mark = newss + i;

    newvs = (YYSTYPE *)realloc(data->l_base, newsize * sizeof(*newvs));
    if (newvs == 0)
        return YYENOMEM;

    data->l_base = newvs;
    data->l_mark = newvs + i;

#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    newps = (YYLTYPE *)realloc(data->p_base, newsize * sizeof(*newps));
    if (newps == 0)
        return YYENOMEM;

    data->p_base = newps;
    data->p_mark = newps + i;
#endif

    data->stacksize = newsize;
    data->s_last = data->s_base + newsize - 1;

#if YYDEBUG
    if (yydebug)
        fprintf(stderr, "%sdebug: stack size increased to %d\n", YYPREFIX, newsize);
#endif
    return 0;
}

#if YYPURE || defined(YY_NO_LEAKS)
static void yyfreestack(YYSTACKDATA *data)
{
    free(data->s_base);
    free(data->l_base);
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    free(data->p_base);
#endif
    memset(data, 0, sizeof(*data));
}
#else
#define yyfreestack(data) /* nothing */
#endif /* YYPURE || defined(YY_NO_LEAKS) */
#if YYBTYACC

static YYParseState *
yyNewState(unsigned size)
{
    YYParseState *p = (YYParseState *) malloc(sizeof(YYParseState));
    if (p == NULL) return NULL;

    p->yystack.stacksize = size;
    if (size == 0)
    {
        p->yystack.s_base = NULL;
        p->yystack.l_base = NULL;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
        p->yystack.p_base = NULL;
#endif
        return p;
    }
    p->yystack.s_base    = (YYINT *) malloc(size * sizeof(YYINT));
    if (p->yystack.s_base == NULL) return NULL;
    p->yystack.l_base    = (YYSTYPE *) malloc(size * sizeof(YYSTYPE));
    if (p->yystack.l_base == NULL) return NULL;
    memset(p->yystack.l_base, 0, size * sizeof(YYSTYPE));
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    p->yystack.p_base    = (YYLTYPE *) malloc(size * sizeof(YYLTYPE));
    if (p->yystack.p_base == NULL) return NULL;
    memset(p->yystack.p_base, 0, size * sizeof(YYLTYPE));
#endif

    return p;
}

static void
yyFreeState(YYParseState *p)
{
    yyfreestack(&p->yystack);
    free(p);
}
#endif /* YYBTYACC */

#define YYABORT  goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#if YYBTYACC
#define YYVALID        do { if (yyps->save)            goto yyvalid; } while(0)
#define YYVALID_NESTED do { if (yyps->save && \
                                yyps->save->save == 0) goto yyvalid; } while(0)
#endif /* YYBTYACC */

int
YYPARSE_DECL()
{
    int yym, yyn, yystate, yyresult;
#if YYBTYACC
    int yynewerrflag;
    YYParseState *yyerrctx = NULL;
#endif /* YYBTYACC */
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    YYLTYPE  yyerror_loc_range[3]; /* position of error start/end (0 unused) */
#endif
#if YYDEBUG
    const char *yys;

    if ((yys = getenv("YYDEBUG")) != 0)
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
    if (yydebug)
        fprintf(stderr, "%sdebug[<# of symbols on state stack>]\n", YYPREFIX);
#endif
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    memset(yyerror_loc_range, 0, sizeof(yyerror_loc_range));
#endif

#if YYBTYACC
    yyps = yyNewState(0); if (yyps == 0) goto yyenomem;
    yyps->save = 0;
#endif /* YYBTYACC */
    yym = 0;
    /* yyn is set below */
    yynerrs = 0;
    yyerrflag = 0;
    yychar = YYEMPTY;
    yystate = 0;

#if YYPURE
    memset(&yystack, 0, sizeof(yystack));
#endif

    if (yystack.s_base == NULL && yygrowstack(&yystack) == YYENOMEM) goto yyoverflow;
    yystack.s_mark = yystack.s_base;
    yystack.l_mark = yystack.l_base;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    yystack.p_mark = yystack.p_base;
#endif
    yystate = 0;
    *yystack.s_mark = 0;

yyloop:
    if ((yyn = yydefred[yystate]) != 0) goto yyreduce;
    if (yychar < 0)
    {
#if YYBTYACC
        do {
        if (yylvp < yylve)
        {
            /* we're currently re-reading tokens */
            yylval = *yylvp++;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
            yylloc = *yylpp++;
#endif
            yychar = *yylexp++;
            break;
        }
        if (yyps->save)
        {
            /* in trial mode; save scanner results for future parse attempts */
            if (yylvp == yylvlim)
            {   /* Enlarge lexical value queue */
                size_t p = (size_t) (yylvp - yylvals);
                size_t s = (size_t) (yylvlim - yylvals);

                s += YYLVQUEUEGROWTH;
                if ((yylexemes = (YYINT *)realloc(yylexemes, s * sizeof(YYINT))) == NULL) goto yyenomem;
                if ((yylvals   = (YYSTYPE *)realloc(yylvals, s * sizeof(YYSTYPE))) == NULL) goto yyenomem;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                if ((yylpsns   = (YYLTYPE *)realloc(yylpsns, s * sizeof(YYLTYPE))) == NULL) goto yyenomem;
#endif
                yylvp   = yylve = yylvals + p;
                yylvlim = yylvals + s;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                yylpp   = yylpe = yylpsns + p;
                yylplim = yylpsns + s;
#endif
                yylexp  = yylexemes + p;
            }
            *yylexp = (YYINT) YYLEX;
            *yylvp++ = yylval;
            yylve++;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
            *yylpp++ = yylloc;
            yylpe++;
#endif
            yychar = *yylexp++;
            break;
        }
        /* normal operation, no conflict encountered */
#endif /* YYBTYACC */
        yychar = YYLEX;
#if YYBTYACC
        } while (0);
#endif /* YYBTYACC */
        if (yychar < 0) yychar = YYEOF;
#if YYDEBUG
        if (yydebug)
        {
            if ((yys = yyname[YYTRANSLATE(yychar)]) == NULL) yys = yyname[YYUNDFTOKEN];
            fprintf(stderr, "%s[%d]: state %d, reading token %d (%s)",
                            YYDEBUGSTR, yydepth, yystate, yychar, yys);
#ifdef YYSTYPE_TOSTRING
#if YYBTYACC
            if (!yytrial)
#endif /* YYBTYACC */
                fprintf(stderr, " <%s>", YYSTYPE_TOSTRING(yychar, yylval));
#endif
            fputc('\n', stderr);
        }
#endif
    }
#if YYBTYACC

    /* Do we have a conflict? */
    if (((yyn = yycindex[yystate]) != 0) && (yyn += yychar) >= 0 &&
        yyn <= YYTABLESIZE && yycheck[yyn] == (YYINT) yychar)
    {
        YYINT ctry;

        if (yypath)
        {
            YYParseState *save;
#if YYDEBUG
            if (yydebug)
                fprintf(stderr, "%s[%d]: CONFLICT in state %d: following successful trial parse\n",
                                YYDEBUGSTR, yydepth, yystate);
#endif
            /* Switch to the next conflict context */
            save = yypath;
            yypath = save->save;
            save->save = NULL;
            ctry = save->ctry;
            if (save->state != yystate) YYABORT;
            yyFreeState(save);

        }
        else
        {

            /* Unresolved conflict - start/continue trial parse */
            YYParseState *save;
#if YYDEBUG
            if (yydebug)
            {
                fprintf(stderr, "%s[%d]: CONFLICT in state %d. ", YYDEBUGSTR, yydepth, yystate);
                if (yyps->save)
                    fputs("ALREADY in conflict, continuing trial parse.\n", stderr);
                else
                    fputs("Starting trial parse.\n", stderr);
            }
#endif
            save                  = yyNewState((unsigned)(yystack.s_mark - yystack.s_base + 1));
            if (save == NULL) goto yyenomem;
            save->save            = yyps->save;
            save->state           = yystate;
            save->errflag         = yyerrflag;
            save->yystack.s_mark  = save->yystack.s_base + (yystack.s_mark - yystack.s_base);
            memcpy (save->yystack.s_base, yystack.s_base, (size_t) (yystack.s_mark - yystack.s_base + 1) * sizeof(YYINT));
            save->yystack.l_mark  = save->yystack.l_base + (yystack.l_mark - yystack.l_base);
            memcpy (save->yystack.l_base, yystack.l_base, (size_t) (yystack.l_mark - yystack.l_base + 1) * sizeof(YYSTYPE));
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
            save->yystack.p_mark  = save->yystack.p_base + (yystack.p_mark - yystack.p_base);
            memcpy (save->yystack.p_base, yystack.p_base, (size_t) (yystack.p_mark - yystack.p_base + 1) * sizeof(YYLTYPE));
#endif
            ctry                  = yytable[yyn];
            if (yyctable[ctry] == -1)
            {
#if YYDEBUG
                if (yydebug && yychar >= YYEOF)
                    fprintf(stderr, "%s[%d]: backtracking 1 token\n", YYDEBUGSTR, yydepth);
#endif
                ctry++;
            }
            save->ctry = ctry;
            if (yyps->save == NULL)
            {
                /* If this is a first conflict in the stack, start saving lexemes */
                if (!yylexemes)
                {
                    yylexemes = (YYINT *) malloc((YYLVQUEUEGROWTH) * sizeof(YYINT));
                    if (yylexemes == NULL) goto yyenomem;
                    yylvals   = (YYSTYPE *) malloc((YYLVQUEUEGROWTH) * sizeof(YYSTYPE));
                    if (yylvals == NULL) goto yyenomem;
                    yylvlim   = yylvals + YYLVQUEUEGROWTH;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                    yylpsns   = (YYLTYPE *) malloc((YYLVQUEUEGROWTH) * sizeof(YYLTYPE));
                    if (yylpsns == NULL) goto yyenomem;
                    yylplim   = yylpsns + YYLVQUEUEGROWTH;
#endif
                }
                if (yylvp == yylve)
                {
                    yylvp  = yylve = yylvals;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                    yylpp  = yylpe = yylpsns;
#endif
                    yylexp = yylexemes;
                    if (yychar >= YYEOF)
                    {
                        *yylve++ = yylval;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                        *yylpe++ = yylloc;
#endif
                        *yylexp  = (YYINT) yychar;
                        yychar   = YYEMPTY;
                    }
                }
            }
            if (yychar >= YYEOF)
            {
                yylvp--;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                yylpp--;
#endif
                yylexp--;
                yychar = YYEMPTY;
            }
            save->lexeme = (int) (yylvp - yylvals);
            yyps->save   = save;
        }
        if (yytable[yyn] == ctry)
        {
#if YYDEBUG
            if (yydebug)
                fprintf(stderr, "%s[%d]: state %d, shifting to state %d\n",
                                YYDEBUGSTR, yydepth, yystate, yyctable[ctry]);
#endif
            if (yychar < 0)
            {
                yylvp++;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                yylpp++;
#endif
                yylexp++;
            }
            if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack) == YYENOMEM)
                goto yyoverflow;
            yystate = yyctable[ctry];
            *++yystack.s_mark = (YYINT) yystate;
            *++yystack.l_mark = yylval;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
            *++yystack.p_mark = yylloc;
#endif
            yychar  = YYEMPTY;
            if (yyerrflag > 0) --yyerrflag;
            goto yyloop;
        }
        else
        {
            yyn = yyctable[ctry];
            goto yyreduce;
        }
    } /* End of code dealing with conflicts */
#endif /* YYBTYACC */
    if (((yyn = yysindex[yystate]) != 0) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == (YYINT) yychar)
    {
#if YYDEBUG
        if (yydebug)
            fprintf(stderr, "%s[%d]: state %d, shifting to state %d\n",
                            YYDEBUGSTR, yydepth, yystate, yytable[yyn]);
#endif
        if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack) == YYENOMEM) goto yyoverflow;
        yystate = yytable[yyn];
        *++yystack.s_mark = yytable[yyn];
        *++yystack.l_mark = yylval;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
        *++yystack.p_mark = yylloc;
#endif
        yychar = YYEMPTY;
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if (((yyn = yyrindex[yystate]) != 0) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == (YYINT) yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag != 0) goto yyinrecovery;
#if YYBTYACC

    yynewerrflag = 1;
    goto yyerrhandler;
    goto yyerrlab; /* redundant goto avoids 'unused label' warning */

yyerrlab:
    /* explicit YYERROR from an action -- pop the rhs of the rule reduced
     * before looking for error recovery */
    yystack.s_mark -= yym;
    yystate = *yystack.s_mark;
    yystack.l_mark -= yym;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    yystack.p_mark -= yym;
#endif

    yynewerrflag = 0;
yyerrhandler:
    while (yyps->save)
    {
        int ctry;
        YYParseState *save = yyps->save;
#if YYDEBUG
        if (yydebug)
            fprintf(stderr, "%s[%d]: ERROR in state %d, CONFLICT BACKTRACKING to state %d, %d tokens\n",
                            YYDEBUGSTR, yydepth, yystate, yyps->save->state,
                    (int)(yylvp - yylvals - yyps->save->lexeme));
#endif
        /* Memorize most forward-looking error state in case it's really an error. */
        if (yyerrctx == NULL || yyerrctx->lexeme < yylvp - yylvals)
        {
            /* Free old saved error context state */
            if (yyerrctx) yyFreeState(yyerrctx);
            /* Create and fill out new saved error context state */
            yyerrctx                 = yyNewState((unsigned)(yystack.s_mark - yystack.s_base + 1));
            if (yyerrctx == NULL) goto yyenomem;
            yyerrctx->save           = yyps->save;
            yyerrctx->state          = yystate;
            yyerrctx->errflag        = yyerrflag;
            yyerrctx->yystack.s_mark = yyerrctx->yystack.s_base + (yystack.s_mark - yystack.s_base);
            memcpy (yyerrctx->yystack.s_base, yystack.s_base, (size_t) (yystack.s_mark - yystack.s_base + 1) * sizeof(YYINT));
            yyerrctx->yystack.l_mark = yyerrctx->yystack.l_base + (yystack.l_mark - yystack.l_base);
            memcpy (yyerrctx->yystack.l_base, yystack.l_base, (size_t) (yystack.l_mark - yystack.l_base + 1) * sizeof(YYSTYPE));
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
            yyerrctx->yystack.p_mark = yyerrctx->yystack.p_base + (yystack.p_mark - yystack.p_base);
            memcpy (yyerrctx->yystack.p_base, yystack.p_base, (size_t) (yystack.p_mark - yystack.p_base + 1) * sizeof(YYLTYPE));
#endif
            yyerrctx->lexeme         = (int) (yylvp - yylvals);
        }
        yylvp          = yylvals   + save->lexeme;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
        yylpp          = yylpsns   + save->lexeme;
#endif
        yylexp         = yylexemes + save->lexeme;
        yychar         = YYEMPTY;
        yystack.s_mark = yystack.s_base + (save->yystack.s_mark - save->yystack.s_base);
        memcpy (yystack.s_base, save->yystack.s_base, (size_t) (yystack.s_mark - yystack.s_base + 1) * sizeof(YYINT));
        yystack.l_mark = yystack.l_base + (save->yystack.l_mark - save->yystack.l_base);
        memcpy (yystack.l_base, save->yystack.l_base, (size_t) (yystack.l_mark - yystack.l_base + 1) * sizeof(YYSTYPE));
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
        yystack.p_mark = yystack.p_base + (save->yystack.p_mark - save->yystack.p_base);
        memcpy (yystack.p_base, save->yystack.p_base, (size_t) (yystack.p_mark - yystack.p_base + 1) * sizeof(YYLTYPE));
#endif
        ctry           = ++save->ctry;
        yystate        = save->state;
        /* We tried shift, try reduce now */
        if ((yyn = yyctable[ctry]) >= 0) goto yyreduce;
        yyps->save     = save->save;
        save->save     = NULL;
        yyFreeState(save);

        /* Nothing left on the stack -- error */
        if (!yyps->save)
        {
#if YYDEBUG
            if (yydebug)
                fprintf(stderr, "%sdebug[%d,trial]: trial parse FAILED, entering ERROR mode\n",
                                YYPREFIX, yydepth);
#endif
            /* Restore state as it was in the most forward-advanced error */
            yylvp          = yylvals   + yyerrctx->lexeme;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
            yylpp          = yylpsns   + yyerrctx->lexeme;
#endif
            yylexp         = yylexemes + yyerrctx->lexeme;
            yychar         = yylexp[-1];
            yylval         = yylvp[-1];
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
            yylloc         = yylpp[-1];
#endif
            yystack.s_mark = yystack.s_base + (yyerrctx->yystack.s_mark - yyerrctx->yystack.s_base);
            memcpy (yystack.s_base, yyerrctx->yystack.s_base, (size_t) (yystack.s_mark - yystack.s_base + 1) * sizeof(YYINT));
            yystack.l_mark = yystack.l_base + (yyerrctx->yystack.l_mark - yyerrctx->yystack.l_base);
            memcpy (yystack.l_base, yyerrctx->yystack.l_base, (size_t) (yystack.l_mark - yystack.l_base + 1) * sizeof(YYSTYPE));
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
            yystack.p_mark = yystack.p_base + (yyerrctx->yystack.p_mark - yyerrctx->yystack.p_base);
            memcpy (yystack.p_base, yyerrctx->yystack.p_base, (size_t) (yystack.p_mark - yystack.p_base + 1) * sizeof(YYLTYPE));
#endif
            yystate        = yyerrctx->state;
            yyFreeState(yyerrctx);
            yyerrctx       = NULL;
        }
        yynewerrflag = 1;
    }
    if (yynewerrflag == 0) goto yyinrecovery;
#endif /* YYBTYACC */

    YYERROR_CALL("syntax error");
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    yyerror_loc_range[1] = yylloc; /* lookahead position is error start position */
#endif

#if !YYBTYACC
    goto yyerrlab; /* redundant goto avoids 'unused label' warning */
yyerrlab:
#endif
    ++yynerrs;

yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if (((yyn = yysindex[*yystack.s_mark]) != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == (YYINT) YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    fprintf(stderr, "%s[%d]: state %d, error recovery shifting to state %d\n",
                                    YYDEBUGSTR, yydepth, *yystack.s_mark, yytable[yyn]);
#endif
                if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack) == YYENOMEM) goto yyoverflow;
                yystate = yytable[yyn];
                *++yystack.s_mark = yytable[yyn];
                *++yystack.l_mark = yylval;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                /* lookahead position is error end position */
                yyerror_loc_range[2] = yylloc;
                YYLLOC_DEFAULT(yyloc, yyerror_loc_range, 2); /* position of error span */
                *++yystack.p_mark = yyloc;
#endif
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    fprintf(stderr, "%s[%d]: error recovery discarding state %d\n",
                                    YYDEBUGSTR, yydepth, *yystack.s_mark);
#endif
                if (yystack.s_mark <= yystack.s_base) goto yyabort;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                /* the current TOS position is the error start position */
                yyerror_loc_range[1] = *yystack.p_mark;
#endif
#if defined(YYDESTRUCT_CALL)
#if YYBTYACC
                if (!yytrial)
#endif /* YYBTYACC */
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                    YYDESTRUCT_CALL("error: discarding state",
                                    yystos[*yystack.s_mark], yystack.l_mark, yystack.p_mark);
#else
                    YYDESTRUCT_CALL("error: discarding state",
                                    yystos[*yystack.s_mark], yystack.l_mark);
#endif /* defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED) */
#endif /* defined(YYDESTRUCT_CALL) */
                --yystack.s_mark;
                --yystack.l_mark;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                --yystack.p_mark;
#endif
            }
        }
    }
    else
    {
        if (yychar == YYEOF) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            if ((yys = yyname[YYTRANSLATE(yychar)]) == NULL) yys = yyname[YYUNDFTOKEN];
            fprintf(stderr, "%s[%d]: state %d, error recovery discarding token %d (%s)\n",
                            YYDEBUGSTR, yydepth, yystate, yychar, yys);
        }
#endif
#if defined(YYDESTRUCT_CALL)
#if YYBTYACC
        if (!yytrial)
#endif /* YYBTYACC */
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
            YYDESTRUCT_CALL("error: discarding token", yychar, &yylval, &yylloc);
#else
            YYDESTRUCT_CALL("error: discarding token", yychar, &yylval);
#endif /* defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED) */
#endif /* defined(YYDESTRUCT_CALL) */
        yychar = YYEMPTY;
        goto yyloop;
    }

yyreduce:
    yym = yylen[yyn];
#if YYDEBUG
    if (yydebug)
    {
        fprintf(stderr, "%s[%d]: state %d, reducing by rule %d (%s)",
                        YYDEBUGSTR, yydepth, yystate, yyn, yyrule[yyn]);
#ifdef YYSTYPE_TOSTRING
#if YYBTYACC
        if (!yytrial)
#endif /* YYBTYACC */
            if (yym > 0)
            {
                int i;
                fputc('<', stderr);
                for (i = yym; i > 0; i--)
                {
                    if (i != yym) fputs(", ", stderr);
                    fputs(YYSTYPE_TOSTRING(yystos[yystack.s_mark[1-i]],
                                           yystack.l_mark[1-i]), stderr);
                }
                fputc('>', stderr);
            }
#endif
        fputc('\n', stderr);
    }
#endif
    if (yym > 0)
        yyval = yystack.l_mark[1-yym];
    else
        memset(&yyval, 0, sizeof yyval);
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)

    /* Perform position reduction */
    memset(&yyloc, 0, sizeof(yyloc));
#if YYBTYACC
    if (!yytrial)
#endif /* YYBTYACC */
    {
        YYLLOC_DEFAULT(yyloc, &yystack.p_mark[-yym], yym);
        /* just in case YYERROR is invoked within the action, save
           the start of the rhs as the error start position */
        yyerror_loc_range[1] = yystack.p_mark[1-yym];
    }
#endif

    switch (yyn)
    {
case 3:
#line 194 "asmparse.y"
	{ PASM->EndClass(); }
#line 9309 "asmparse.cpp"
break;
case 4:
#line 195 "asmparse.y"
	{ PASM->EndNameSpace(); }
#line 9314 "asmparse.cpp"
break;
case 5:
#line 196 "asmparse.y"
	{ if(PASM->m_pCurMethod->m_ulLines[1] ==0)
                                                                                  {  PASM->m_pCurMethod->m_ulLines[1] = PASM->m_ulCurLine;
                                                                                     PASM->m_pCurMethod->m_ulColumns[1]=PASM->m_ulCurColumn;}
                                                                                  PASM->EndMethod(); }
#line 9322 "asmparse.cpp"
break;
case 12:
#line 206 "asmparse.y"
	{ PASMM->EndAssembly(); }
#line 9327 "asmparse.cpp"
break;
case 13:
#line 207 "asmparse.y"
	{ PASMM->EndAssembly(); }
#line 9332 "asmparse.cpp"
break;
case 14:
#line 208 "asmparse.y"
	{ PASMM->EndComType(); }
#line 9337 "asmparse.cpp"
break;
case 15:
#line 209 "asmparse.y"
	{ PASMM->EndManifestRes(); }
#line 9342 "asmparse.cpp"
break;
case 19:
#line 213 "asmparse.y"
	{
#ifdef _PREFAST_
#pragma warning(push)
#pragma warning(disable:22011) /* Suppress PREFast warning about integer overflow/underflow*/
#endif
                                                                                  PASM->m_dwSubsystem = yystack.l_mark[0].int32;
#ifdef _PREFAST_
#pragma warning(pop)
#endif
                                                                                }
#line 9356 "asmparse.cpp"
break;
case 20:
#line 223 "asmparse.y"
	{ PASM->m_dwComImageFlags = yystack.l_mark[0].int32; }
#line 9361 "asmparse.cpp"
break;
case 21:
#line 224 "asmparse.y"
	{ PASM->m_dwFileAlignment = yystack.l_mark[0].int32;
                                                                                  if((yystack.l_mark[0].int32 & (yystack.l_mark[0].int32 - 1))||(yystack.l_mark[0].int32 < 0x200)||(yystack.l_mark[0].int32 > 0x10000))
                                                                                    PASM->report->error("Invalid file alignment, must be power of 2 from 0x200 to 0x10000\n");}
#line 9368 "asmparse.cpp"
break;
case 22:
#line 227 "asmparse.y"
	{ PASM->m_stBaseAddress = (ULONGLONG)(*(yystack.l_mark[0].int64)); delete yystack.l_mark[0].int64;
                                                                                  if(PASM->m_stBaseAddress & 0xFFFF)
                                                                                    PASM->report->error("Invalid image base, must be 0x10000-aligned\n");}
#line 9375 "asmparse.cpp"
break;
case 23:
#line 230 "asmparse.y"
	{ PASM->m_stSizeOfStackReserve = (size_t)(*(yystack.l_mark[0].int64)); delete yystack.l_mark[0].int64; }
#line 9380 "asmparse.cpp"
break;
case 28:
#line 235 "asmparse.y"
	{ PASM->m_fIsMscorlib = TRUE; }
#line 9385 "asmparse.cpp"
break;
case 31:
#line 242 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[0].binstr; }
#line 9390 "asmparse.cpp"
break;
case 32:
#line 243 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-2].binstr; yyval.binstr->append(yystack.l_mark[0].binstr); delete yystack.l_mark[0].binstr; }
#line 9395 "asmparse.cpp"
break;
case 33:
#line 246 "asmparse.y"
	{ LPCSTRToGuid(yystack.l_mark[0].string,&(PASM->m_guidLang)); }
#line 9400 "asmparse.cpp"
break;
case 34:
#line 247 "asmparse.y"
	{ LPCSTRToGuid(yystack.l_mark[-2].string,&(PASM->m_guidLang));
                                                                                  LPCSTRToGuid(yystack.l_mark[0].string,&(PASM->m_guidLangVendor));}
#line 9406 "asmparse.cpp"
break;
case 35:
#line 249 "asmparse.y"
	{ LPCSTRToGuid(yystack.l_mark[-4].string,&(PASM->m_guidLang));
                                                                                  LPCSTRToGuid(yystack.l_mark[-2].string,&(PASM->m_guidLangVendor));
                                                                                  LPCSTRToGuid(yystack.l_mark[-2].string,&(PASM->m_guidDoc));}
#line 9413 "asmparse.cpp"
break;
case 36:
#line 254 "asmparse.y"
	{ yyval.string = yystack.l_mark[0].string; }
#line 9418 "asmparse.cpp"
break;
case 37:
#line 255 "asmparse.y"
	{ yyval.string = yystack.l_mark[0].string; }
#line 9423 "asmparse.cpp"
break;
case 38:
#line 258 "asmparse.y"
	{ yyval.string = yystack.l_mark[0].string; }
#line 9428 "asmparse.cpp"
break;
case 39:
#line 259 "asmparse.y"
	{ yyval.string = yystack.l_mark[0].string; }
#line 9433 "asmparse.cpp"
break;
case 40:
#line 260 "asmparse.y"
	{ yyval.string = newStringWDel(yystack.l_mark[-2].string, '.', yystack.l_mark[0].string); }
#line 9438 "asmparse.cpp"
break;
case 41:
#line 263 "asmparse.y"
	{ yyval.int32 = yystack.l_mark[0].int32; }
#line 9443 "asmparse.cpp"
break;
case 42:
#line 266 "asmparse.y"
	{ yyval.int64 = yystack.l_mark[0].int64; }
#line 9448 "asmparse.cpp"
break;
case 43:
#line 267 "asmparse.y"
	{ yyval.int64 = neg ? new __int64(yystack.l_mark[0].int32) : new __int64((unsigned)yystack.l_mark[0].int32); }
#line 9453 "asmparse.cpp"
break;
case 44:
#line 270 "asmparse.y"
	{ yyval.float64 = yystack.l_mark[0].float64; }
#line 9458 "asmparse.cpp"
break;
case 45:
#line 271 "asmparse.y"
	{ float f; *((__int32*) (&f)) = yystack.l_mark[-1].int32; yyval.float64 = new double(f); }
#line 9463 "asmparse.cpp"
break;
case 46:
#line 272 "asmparse.y"
	{ yyval.float64 = (double*) yystack.l_mark[-1].int64; }
#line 9468 "asmparse.cpp"
break;
case 47:
#line 276 "asmparse.y"
	{ PASM->AddTypeDef(yystack.l_mark[-2].binstr,yystack.l_mark[0].string); }
#line 9473 "asmparse.cpp"
break;
case 48:
#line 277 "asmparse.y"
	{ PASM->AddTypeDef(yystack.l_mark[-2].token,yystack.l_mark[0].string); }
#line 9478 "asmparse.cpp"
break;
case 49:
#line 278 "asmparse.y"
	{ PASM->AddTypeDef(yystack.l_mark[-2].token,yystack.l_mark[0].string); }
#line 9483 "asmparse.cpp"
break;
case 50:
#line 279 "asmparse.y"
	{ yystack.l_mark[-2].cad->tkOwner = 0; PASM->AddTypeDef(yystack.l_mark[-2].cad,yystack.l_mark[0].string); }
#line 9488 "asmparse.cpp"
break;
case 51:
#line 280 "asmparse.y"
	{ PASM->AddTypeDef(yystack.l_mark[-2].cad,yystack.l_mark[0].string); }
#line 9493 "asmparse.cpp"
break;
case 52:
#line 285 "asmparse.y"
	{ DefineVar(yystack.l_mark[0].string, NULL); }
#line 9498 "asmparse.cpp"
break;
case 53:
#line 286 "asmparse.y"
	{ DefineVar(yystack.l_mark[-1].string, yystack.l_mark[0].binstr); }
#line 9503 "asmparse.cpp"
break;
case 54:
#line 287 "asmparse.y"
	{ UndefVar(yystack.l_mark[0].string); }
#line 9508 "asmparse.cpp"
break;
case 55:
#line 288 "asmparse.y"
	{ SkipToken = !IsVarDefined(yystack.l_mark[0].string);
                                                                                  IfEndif++;
                                                                                }
#line 9515 "asmparse.cpp"
break;
case 56:
#line 291 "asmparse.y"
	{ SkipToken = IsVarDefined(yystack.l_mark[0].string);
                                                                                  IfEndif++;
                                                                                }
#line 9522 "asmparse.cpp"
break;
case 57:
#line 294 "asmparse.y"
	{ if(IfEndif == 1) SkipToken = !SkipToken;}
#line 9527 "asmparse.cpp"
break;
case 58:
#line 295 "asmparse.y"
	{ if(IfEndif == 0)
                                                                                    PASM->report->error("Unmatched #endif\n");
                                                                                  else IfEndif--;
                                                                                }
#line 9535 "asmparse.cpp"
break;
case 59:
#line 299 "asmparse.y"
	{ _ASSERTE(!"yylex should have dealt with this"); }
#line 9540 "asmparse.cpp"
break;
case 60:
#line 300 "asmparse.y"
	{ }
#line 9545 "asmparse.cpp"
break;
case 61:
#line 304 "asmparse.y"
	{ yyval.cad = new CustomDescr(PASM->m_tkCurrentCVOwner, yystack.l_mark[0].token, NULL); }
#line 9550 "asmparse.cpp"
break;
case 62:
#line 305 "asmparse.y"
	{ yyval.cad = new CustomDescr(PASM->m_tkCurrentCVOwner, yystack.l_mark[-2].token, yystack.l_mark[0].binstr); }
#line 9555 "asmparse.cpp"
break;
case 63:
#line 306 "asmparse.y"
	{ yyval.cad = new CustomDescr(PASM->m_tkCurrentCVOwner, yystack.l_mark[-4].token, yystack.l_mark[-1].binstr); }
#line 9560 "asmparse.cpp"
break;
case 64:
#line 307 "asmparse.y"
	{ yyval.cad = new CustomDescr(PASM->m_tkCurrentCVOwner, yystack.l_mark[-2].int32, yystack.l_mark[-1].binstr); }
#line 9565 "asmparse.cpp"
break;
case 65:
#line 310 "asmparse.y"
	{ yyval.cad = new CustomDescr(yystack.l_mark[-2].token, yystack.l_mark[0].token, NULL); }
#line 9570 "asmparse.cpp"
break;
case 66:
#line 311 "asmparse.y"
	{ yyval.cad = new CustomDescr(yystack.l_mark[-4].token, yystack.l_mark[-2].token, yystack.l_mark[0].binstr); }
#line 9575 "asmparse.cpp"
break;
case 67:
#line 313 "asmparse.y"
	{ yyval.cad = new CustomDescr(yystack.l_mark[-6].token, yystack.l_mark[-4].token, yystack.l_mark[-1].binstr); }
#line 9580 "asmparse.cpp"
break;
case 68:
#line 314 "asmparse.y"
	{ yyval.cad = new CustomDescr(PASM->m_tkCurrentCVOwner, yystack.l_mark[-2].int32, yystack.l_mark[-1].binstr); }
#line 9585 "asmparse.cpp"
break;
case 69:
#line 317 "asmparse.y"
	{ yyval.int32 = yystack.l_mark[-2].token; bParsingByteArray = TRUE; }
#line 9590 "asmparse.cpp"
break;
case 70:
#line 321 "asmparse.y"
	{ PASM->m_pCustomDescrList = NULL;
                                                                                  PASM->m_tkCurrentCVOwner = yystack.l_mark[-4].token;
                                                                                  yyval.int32 = yystack.l_mark[-2].token; bParsingByteArray = TRUE; }
#line 9597 "asmparse.cpp"
break;
case 71:
#line 326 "asmparse.y"
	{ yyval.token = yystack.l_mark[0].token; }
#line 9602 "asmparse.cpp"
break;
case 72:
#line 329 "asmparse.y"
	{ yyval.token = yystack.l_mark[0].token; }
#line 9607 "asmparse.cpp"
break;
case 73:
#line 330 "asmparse.y"
	{ yyval.token = yystack.l_mark[0].token; }
#line 9612 "asmparse.cpp"
break;
case 74:
#line 334 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr;
                                                                                  yyval.binstr->appendInt16(VAL16(nCustomBlobNVPairs));
                                                                                  yyval.binstr->append(yystack.l_mark[0].binstr);
                                                                                  nCustomBlobNVPairs = 0; }
#line 9620 "asmparse.cpp"
break;
case 75:
#line 340 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt16(VAL16(0x0001)); }
#line 9625 "asmparse.cpp"
break;
case 76:
#line 341 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr;
                                                                                  AppendFieldToCustomBlob(yyval.binstr,yystack.l_mark[0].binstr); }
#line 9631 "asmparse.cpp"
break;
case 77:
#line 343 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; }
#line 9636 "asmparse.cpp"
break;
case 78:
#line 346 "asmparse.y"
	{ yyval.binstr = new BinStr(); }
#line 9641 "asmparse.cpp"
break;
case 79:
#line 348 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-5].binstr; yyval.binstr->appendInt8(yystack.l_mark[-4].int32);
                                                                                  yyval.binstr->append(yystack.l_mark[-3].binstr);
                                                                                  AppendStringWithLength(yyval.binstr,yystack.l_mark[-2].string);
                                                                                  AppendFieldToCustomBlob(yyval.binstr,yystack.l_mark[0].binstr);
                                                                                  nCustomBlobNVPairs++; }
#line 9650 "asmparse.cpp"
break;
case 80:
#line 353 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; }
#line 9655 "asmparse.cpp"
break;
case 81:
#line 356 "asmparse.y"
	{ yyval.int32 = SERIALIZATION_TYPE_FIELD; }
#line 9660 "asmparse.cpp"
break;
case 82:
#line 357 "asmparse.y"
	{ yyval.int32 = SERIALIZATION_TYPE_PROPERTY; }
#line 9665 "asmparse.cpp"
break;
case 83:
#line 360 "asmparse.y"
	{ if(yystack.l_mark[0].cad->tkOwner && !yystack.l_mark[0].cad->tkInterfacePair)
                                                                                    PASM->DefineCV(yystack.l_mark[0].cad);
                                                                                  else if(PASM->m_pCustomDescrList)
                                                                                    PASM->m_pCustomDescrList->PUSH(yystack.l_mark[0].cad); }
#line 9673 "asmparse.cpp"
break;
case 84:
#line 364 "asmparse.y"
	{ PASM->DefineCV(yystack.l_mark[0].cad); }
#line 9678 "asmparse.cpp"
break;
case 85:
#line 365 "asmparse.y"
	{ CustomDescr* pNew = new CustomDescr(yystack.l_mark[0].tdd->m_pCA);
                                                                                  if(pNew->tkOwner == 0) pNew->tkOwner = PASM->m_tkCurrentCVOwner;
                                                                                  if(pNew->tkOwner)
                                                                                    PASM->DefineCV(pNew);
                                                                                  else if(PASM->m_pCustomDescrList)
                                                                                    PASM->m_pCustomDescrList->PUSH(pNew); }
#line 9688 "asmparse.cpp"
break;
case 86:
#line 373 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[0].binstr; }
#line 9693 "asmparse.cpp"
break;
case 87:
#line 374 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_TYPE); }
#line 9698 "asmparse.cpp"
break;
case 88:
#line 375 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_TAGGED_OBJECT); }
#line 9703 "asmparse.cpp"
break;
case 89:
#line 376 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                AppendStringWithLength(yyval.binstr,yystack.l_mark[0].string); }
#line 9709 "asmparse.cpp"
break;
case 90:
#line 378 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                AppendStringWithLength(yyval.binstr,PASM->ReflectionNotation(yystack.l_mark[0].token)); }
#line 9715 "asmparse.cpp"
break;
case 91:
#line 380 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-2].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 9720 "asmparse.cpp"
break;
case 92:
#line 385 "asmparse.y"
	{ PASMM->SetModuleName(NULL); PASM->m_tkCurrentCVOwner=1; }
#line 9725 "asmparse.cpp"
break;
case 93:
#line 386 "asmparse.y"
	{ PASMM->SetModuleName(yystack.l_mark[0].string); PASM->m_tkCurrentCVOwner=1; }
#line 9730 "asmparse.cpp"
break;
case 94:
#line 387 "asmparse.y"
	{ BinStr* pbs = new BinStr();
                                                                                  unsigned L = (unsigned)strlen(yystack.l_mark[0].string);
                                                                                  memcpy((char*)(pbs->getBuff(L)),yystack.l_mark[0].string,L);
                                                                                  PASM->EmitImport(pbs); delete pbs;}
#line 9738 "asmparse.cpp"
break;
case 95:
#line 394 "asmparse.y"
	{ /*PASM->SetDataSection(); PASM->EmitDataLabel($7);*/
                                                                                  PASM->m_VTFList.PUSH(new VTFEntry((USHORT)yystack.l_mark[-4].int32, (USHORT)yystack.l_mark[-2].int32, yystack.l_mark[0].string)); }
#line 9744 "asmparse.cpp"
break;
case 96:
#line 398 "asmparse.y"
	{ yyval.int32 = 0; }
#line 9749 "asmparse.cpp"
break;
case 97:
#line 399 "asmparse.y"
	{ yyval.int32 = yystack.l_mark[-1].int32 | COR_VTABLE_32BIT; }
#line 9754 "asmparse.cpp"
break;
case 98:
#line 400 "asmparse.y"
	{ yyval.int32 = yystack.l_mark[-1].int32 | COR_VTABLE_64BIT; }
#line 9759 "asmparse.cpp"
break;
case 99:
#line 401 "asmparse.y"
	{ yyval.int32 = yystack.l_mark[-1].int32 | COR_VTABLE_FROM_UNMANAGED; }
#line 9764 "asmparse.cpp"
break;
case 100:
#line 402 "asmparse.y"
	{ yyval.int32 = yystack.l_mark[-1].int32 | COR_VTABLE_CALL_MOST_DERIVED; }
#line 9769 "asmparse.cpp"
break;
case 101:
#line 403 "asmparse.y"
	{ yyval.int32 = yystack.l_mark[-1].int32 | COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN; }
#line 9774 "asmparse.cpp"
break;
case 102:
#line 406 "asmparse.y"
	{ PASM->m_pVTable = yystack.l_mark[-1].binstr; }
#line 9779 "asmparse.cpp"
break;
case 103:
#line 409 "asmparse.y"
	{ bParsingByteArray = TRUE; }
#line 9784 "asmparse.cpp"
break;
case 104:
#line 413 "asmparse.y"
	{ PASM->StartNameSpace(yystack.l_mark[0].string); }
#line 9789 "asmparse.cpp"
break;
case 105:
#line 416 "asmparse.y"
	{ newclass = TRUE; }
#line 9794 "asmparse.cpp"
break;
case 106:
#line 419 "asmparse.y"
	{ if(yystack.l_mark[0].typarlist) FixupConstraints();
                                                                                  PASM->StartClass(yystack.l_mark[-1].string, yystack.l_mark[-2].classAttr, yystack.l_mark[0].typarlist);
                                                                                  TyParFixupList.RESET(false);
                                                                                  newclass = FALSE;
                                                                                }
#line 9803 "asmparse.cpp"
break;
case 107:
#line 425 "asmparse.y"
	{ PASM->AddClass(); }
#line 9808 "asmparse.cpp"
break;
case 108:
#line 428 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) 0; }
#line 9813 "asmparse.cpp"
break;
case 109:
#line 429 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) ((yystack.l_mark[-1].classAttr & ~tdVisibilityMask) | tdPublic); }
#line 9818 "asmparse.cpp"
break;
case 110:
#line 430 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) ((yystack.l_mark[-1].classAttr & ~tdVisibilityMask) | tdNotPublic); }
#line 9823 "asmparse.cpp"
break;
case 111:
#line 431 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) (yystack.l_mark[-1].classAttr | 0x80000000 | tdSealed); }
#line 9828 "asmparse.cpp"
break;
case 112:
#line 432 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) (yystack.l_mark[-1].classAttr | 0x40000000); }
#line 9833 "asmparse.cpp"
break;
case 113:
#line 433 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) (yystack.l_mark[-1].classAttr | tdInterface | tdAbstract); }
#line 9838 "asmparse.cpp"
break;
case 114:
#line 434 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) (yystack.l_mark[-1].classAttr | tdSealed); }
#line 9843 "asmparse.cpp"
break;
case 115:
#line 435 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) (yystack.l_mark[-1].classAttr | tdAbstract); }
#line 9848 "asmparse.cpp"
break;
case 116:
#line 436 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) ((yystack.l_mark[-1].classAttr & ~tdLayoutMask) | tdAutoLayout); }
#line 9853 "asmparse.cpp"
break;
case 117:
#line 437 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) ((yystack.l_mark[-1].classAttr & ~tdLayoutMask) | tdSequentialLayout); }
#line 9858 "asmparse.cpp"
break;
case 118:
#line 438 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) ((yystack.l_mark[-1].classAttr & ~tdLayoutMask) | tdExplicitLayout); }
#line 9863 "asmparse.cpp"
break;
case 119:
#line 439 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) ((yystack.l_mark[-1].classAttr & ~tdStringFormatMask) | tdAnsiClass); }
#line 9868 "asmparse.cpp"
break;
case 120:
#line 440 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) ((yystack.l_mark[-1].classAttr & ~tdStringFormatMask) | tdUnicodeClass); }
#line 9873 "asmparse.cpp"
break;
case 121:
#line 441 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) ((yystack.l_mark[-1].classAttr & ~tdStringFormatMask) | tdAutoClass); }
#line 9878 "asmparse.cpp"
break;
case 122:
#line 442 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) (yystack.l_mark[-1].classAttr | tdImport); }
#line 9883 "asmparse.cpp"
break;
case 123:
#line 443 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) (yystack.l_mark[-1].classAttr | tdSerializable); }
#line 9888 "asmparse.cpp"
break;
case 124:
#line 444 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) (yystack.l_mark[-1].classAttr | tdWindowsRuntime); }
#line 9893 "asmparse.cpp"
break;
case 125:
#line 445 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) ((yystack.l_mark[-2].classAttr & ~tdVisibilityMask) | tdNestedPublic); }
#line 9898 "asmparse.cpp"
break;
case 126:
#line 446 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) ((yystack.l_mark[-2].classAttr & ~tdVisibilityMask) | tdNestedPrivate); }
#line 9903 "asmparse.cpp"
break;
case 127:
#line 447 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) ((yystack.l_mark[-2].classAttr & ~tdVisibilityMask) | tdNestedFamily); }
#line 9908 "asmparse.cpp"
break;
case 128:
#line 448 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) ((yystack.l_mark[-2].classAttr & ~tdVisibilityMask) | tdNestedAssembly); }
#line 9913 "asmparse.cpp"
break;
case 129:
#line 449 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) ((yystack.l_mark[-2].classAttr & ~tdVisibilityMask) | tdNestedFamANDAssem); }
#line 9918 "asmparse.cpp"
break;
case 130:
#line 450 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) ((yystack.l_mark[-2].classAttr & ~tdVisibilityMask) | tdNestedFamORAssem); }
#line 9923 "asmparse.cpp"
break;
case 131:
#line 451 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) (yystack.l_mark[-1].classAttr | tdBeforeFieldInit); }
#line 9928 "asmparse.cpp"
break;
case 132:
#line 452 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) (yystack.l_mark[-1].classAttr | tdSpecialName); }
#line 9933 "asmparse.cpp"
break;
case 133:
#line 453 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) (yystack.l_mark[-1].classAttr); }
#line 9938 "asmparse.cpp"
break;
case 134:
#line 454 "asmparse.y"
	{ yyval.classAttr = (CorRegTypeAttr) (yystack.l_mark[-1].int32); }
#line 9943 "asmparse.cpp"
break;
case 136:
#line 458 "asmparse.y"
	{ PASM->m_crExtends = yystack.l_mark[0].token; }
#line 9948 "asmparse.cpp"
break;
case 141:
#line 469 "asmparse.y"
	{ PASM->AddToImplList(yystack.l_mark[0].token); }
#line 9953 "asmparse.cpp"
break;
case 142:
#line 470 "asmparse.y"
	{ PASM->AddToImplList(yystack.l_mark[0].token); }
#line 9958 "asmparse.cpp"
break;
case 143:
#line 474 "asmparse.y"
	{ yyval.binstr = new BinStr(); }
#line 9963 "asmparse.cpp"
break;
case 144:
#line 475 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[0].binstr; }
#line 9968 "asmparse.cpp"
break;
case 145:
#line 478 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt32(yystack.l_mark[0].token); }
#line 9973 "asmparse.cpp"
break;
case 146:
#line 479 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-2].binstr; yyval.binstr->appendInt32(yystack.l_mark[0].token); }
#line 9978 "asmparse.cpp"
break;
case 147:
#line 482 "asmparse.y"
	{ yyval.typarlist = NULL; PASM->m_TyParList = NULL;}
#line 9983 "asmparse.cpp"
break;
case 148:
#line 483 "asmparse.y"
	{ PASM->m_TyParList = yystack.l_mark[-1].typarlist; ResolveTyParList(PASM->m_TyParList); yyval.typarlist = PASM->m_TyParList; }
#line 9988 "asmparse.cpp"
break;
case 149:
#line 486 "asmparse.y"
	{ yyval.int32 = gpCovariant; }
#line 9993 "asmparse.cpp"
break;
case 150:
#line 487 "asmparse.y"
	{ yyval.int32 = gpContravariant; }
#line 9998 "asmparse.cpp"
break;
case 151:
#line 488 "asmparse.y"
	{ yyval.int32 = gpReferenceTypeConstraint; }
#line 10003 "asmparse.cpp"
break;
case 152:
#line 489 "asmparse.y"
	{ yyval.int32 = gpNotNullableValueTypeConstraint; }
#line 10008 "asmparse.cpp"
break;
case 153:
#line 490 "asmparse.y"
	{ yyval.int32 = gpAcceptByRefLike; }
#line 10013 "asmparse.cpp"
break;
case 154:
#line 491 "asmparse.y"
	{ yyval.int32 = gpDefaultConstructorConstraint; }
#line 10018 "asmparse.cpp"
break;
case 155:
#line 492 "asmparse.y"
	{ yyval.int32 = (CorGenericParamAttr)yystack.l_mark[-1].int32; }
#line 10023 "asmparse.cpp"
break;
case 156:
#line 495 "asmparse.y"
	{ yyval.int32 = 0; }
#line 10028 "asmparse.cpp"
break;
case 157:
#line 496 "asmparse.y"
	{ yyval.int32 = yystack.l_mark[-1].int32 | yystack.l_mark[0].int32; }
#line 10033 "asmparse.cpp"
break;
case 158:
#line 499 "asmparse.y"
	{ yyval.int32 = (CorGenericParamAttr)yystack.l_mark[-1].int32; }
#line 10038 "asmparse.cpp"
break;
case 159:
#line 502 "asmparse.y"
	{ yyval.int32 = 0; }
#line 10043 "asmparse.cpp"
break;
case 160:
#line 503 "asmparse.y"
	{ yyval.int32 = yystack.l_mark[-1].int32 | yystack.l_mark[0].int32; }
#line 10048 "asmparse.cpp"
break;
case 161:
#line 506 "asmparse.y"
	{yyval.typarlist = new TyParList(yystack.l_mark[-4].int32, yystack.l_mark[-3].binstr, yystack.l_mark[-2].binstr, yystack.l_mark[-1].string, yystack.l_mark[0].typarlist); }
#line 10053 "asmparse.cpp"
break;
case 162:
#line 507 "asmparse.y"
	{yyval.typarlist = new TyParList(yystack.l_mark[-3].int32, yystack.l_mark[-2].binstr, NULL, yystack.l_mark[-1].string, yystack.l_mark[0].typarlist); }
#line 10058 "asmparse.cpp"
break;
case 163:
#line 508 "asmparse.y"
	{yyval.typarlist = new TyParList(yystack.l_mark[-3].int32, yystack.l_mark[-2].binstr, yystack.l_mark[-1].string, yystack.l_mark[0].typarlist);}
#line 10063 "asmparse.cpp"
break;
case 164:
#line 509 "asmparse.y"
	{yyval.typarlist = new TyParList(yystack.l_mark[-2].int32, NULL, yystack.l_mark[-1].string, yystack.l_mark[0].typarlist);}
#line 10068 "asmparse.cpp"
break;
case 165:
#line 512 "asmparse.y"
	{ yyval.typarlist = NULL; }
#line 10073 "asmparse.cpp"
break;
case 166:
#line 513 "asmparse.y"
	{ yyval.typarlist = yystack.l_mark[0].typarlist; }
#line 10078 "asmparse.cpp"
break;
case 167:
#line 516 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; }
#line 10083 "asmparse.cpp"
break;
case 168:
#line 519 "asmparse.y"
	{ yyval.int32= 0; }
#line 10088 "asmparse.cpp"
break;
case 169:
#line 520 "asmparse.y"
	{ yyval.int32 = yystack.l_mark[0].int32; }
#line 10093 "asmparse.cpp"
break;
case 170:
#line 523 "asmparse.y"
	{ yyval.int32 = yystack.l_mark[-2].int32; }
#line 10098 "asmparse.cpp"
break;
case 171:
#line 527 "asmparse.y"
	{ if(PASM->m_pCurMethod->m_ulLines[1] ==0)
                                                              {  PASM->m_pCurMethod->m_ulLines[1] = PASM->m_ulCurLine;
                                                                 PASM->m_pCurMethod->m_ulColumns[1]=PASM->m_ulCurColumn;}
                                                              PASM->EndMethod(); }
#line 10106 "asmparse.cpp"
break;
case 172:
#line 531 "asmparse.y"
	{ PASM->EndClass(); }
#line 10111 "asmparse.cpp"
break;
case 173:
#line 532 "asmparse.y"
	{ PASM->EndEvent(); }
#line 10116 "asmparse.cpp"
break;
case 174:
#line 533 "asmparse.y"
	{ PASM->EndProp(); }
#line 10121 "asmparse.cpp"
break;
case 180:
#line 539 "asmparse.y"
	{ PASM->m_pCurClass->m_ulSize = yystack.l_mark[0].int32; }
#line 10126 "asmparse.cpp"
break;
case 181:
#line 540 "asmparse.y"
	{ PASM->m_pCurClass->m_ulPack = yystack.l_mark[0].int32; }
#line 10131 "asmparse.cpp"
break;
case 182:
#line 541 "asmparse.y"
	{ PASMM->EndComType(); }
#line 10136 "asmparse.cpp"
break;
case 183:
#line 543 "asmparse.y"
	{ BinStr *sig1 = parser->MakeSig(yystack.l_mark[-7].int32, yystack.l_mark[-6].binstr, yystack.l_mark[-1].binstr);
                                                                  BinStr *sig2 = new BinStr(); sig2->append(sig1);
                                                                  PASM->AddMethodImpl(yystack.l_mark[-11].token,yystack.l_mark[-9].string,sig1,yystack.l_mark[-5].token,yystack.l_mark[-3].string,sig2);
                                                                  PASM->ResetArgNameList();
                                                                }
#line 10145 "asmparse.cpp"
break;
case 184:
#line 549 "asmparse.y"
	{ PASM->AddMethodImpl(yystack.l_mark[-17].token,yystack.l_mark[-15].string,
                                                                      (yystack.l_mark[-14].int32==0 ? parser->MakeSig(yystack.l_mark[-19].int32,yystack.l_mark[-18].binstr,yystack.l_mark[-12].binstr) :
                                                                      parser->MakeSig(yystack.l_mark[-19].int32| IMAGE_CEE_CS_CALLCONV_GENERIC,yystack.l_mark[-18].binstr,yystack.l_mark[-12].binstr,yystack.l_mark[-14].int32)),
                                                                      yystack.l_mark[-6].token,yystack.l_mark[-4].string,
                                                                      (yystack.l_mark[-3].int32==0 ? parser->MakeSig(yystack.l_mark[-8].int32,yystack.l_mark[-7].binstr,yystack.l_mark[-1].binstr) :
                                                                      parser->MakeSig(yystack.l_mark[-8].int32| IMAGE_CEE_CS_CALLCONV_GENERIC,yystack.l_mark[-7].binstr,yystack.l_mark[-1].binstr,yystack.l_mark[-3].int32)));
                                                                   PASM->ResetArgNameList();
                                                                 }
#line 10157 "asmparse.cpp"
break;
case 187:
#line 559 "asmparse.y"
	{ if((yystack.l_mark[-1].int32 > 0) && (yystack.l_mark[-1].int32 <= (int)PASM->m_pCurClass->m_NumTyPars))
                                                                PASM->m_pCustomDescrList = PASM->m_pCurClass->m_TyPars[yystack.l_mark[-1].int32-1].CAList();
                                                              else
                                                                PASM->report->error("Type parameter index out of range\n");
                                                            }
#line 10166 "asmparse.cpp"
break;
case 188:
#line 564 "asmparse.y"
	{ int n = PASM->m_pCurClass->FindTyPar(yystack.l_mark[0].string);
                                                              if(n >= 0)
                                                                PASM->m_pCustomDescrList = PASM->m_pCurClass->m_TyPars[n].CAList();
                                                              else
                                                                PASM->report->error("Type parameter '%s' undefined\n",yystack.l_mark[0].string);
                                                            }
#line 10176 "asmparse.cpp"
break;
case 189:
#line 570 "asmparse.y"
	{ PASM->AddGenericParamConstraint(yystack.l_mark[-3].int32, 0, yystack.l_mark[0].token); }
#line 10181 "asmparse.cpp"
break;
case 190:
#line 571 "asmparse.y"
	{ PASM->AddGenericParamConstraint(0, yystack.l_mark[-2].string, yystack.l_mark[0].token); }
#line 10186 "asmparse.cpp"
break;
case 191:
#line 572 "asmparse.y"
	{ yystack.l_mark[0].cad->tkInterfacePair = yystack.l_mark[-1].token;
                                                                        if(PASM->m_pCustomDescrList)
                                                                            PASM->m_pCustomDescrList->PUSH(yystack.l_mark[0].cad);
                                                                      }
#line 10194 "asmparse.cpp"
break;
case 192:
#line 580 "asmparse.y"
	{ yystack.l_mark[-3].binstr->insertInt8(IMAGE_CEE_CS_CALLCONV_FIELD);
                                                              PASM->AddField(yystack.l_mark[-2].string, yystack.l_mark[-3].binstr, yystack.l_mark[-4].fieldAttr, yystack.l_mark[-1].string, yystack.l_mark[0].binstr, yystack.l_mark[-5].int32); }
#line 10200 "asmparse.cpp"
break;
case 193:
#line 584 "asmparse.y"
	{ yyval.fieldAttr = (CorFieldAttr) 0; }
#line 10205 "asmparse.cpp"
break;
case 194:
#line 585 "asmparse.y"
	{ yyval.fieldAttr = (CorFieldAttr) (yystack.l_mark[-1].fieldAttr | fdStatic); }
#line 10210 "asmparse.cpp"
break;
case 195:
#line 586 "asmparse.y"
	{ yyval.fieldAttr = (CorFieldAttr) ((yystack.l_mark[-1].fieldAttr & ~mdMemberAccessMask) | fdPublic); }
#line 10215 "asmparse.cpp"
break;
case 196:
#line 587 "asmparse.y"
	{ yyval.fieldAttr = (CorFieldAttr) ((yystack.l_mark[-1].fieldAttr & ~mdMemberAccessMask) | fdPrivate); }
#line 10220 "asmparse.cpp"
break;
case 197:
#line 588 "asmparse.y"
	{ yyval.fieldAttr = (CorFieldAttr) ((yystack.l_mark[-1].fieldAttr & ~mdMemberAccessMask) | fdFamily); }
#line 10225 "asmparse.cpp"
break;
case 198:
#line 589 "asmparse.y"
	{ yyval.fieldAttr = (CorFieldAttr) (yystack.l_mark[-1].fieldAttr | fdInitOnly); }
#line 10230 "asmparse.cpp"
break;
case 199:
#line 590 "asmparse.y"
	{ yyval.fieldAttr = yystack.l_mark[-1].fieldAttr; }
#line 10235 "asmparse.cpp"
break;
case 200:
#line 591 "asmparse.y"
	{ yyval.fieldAttr = (CorFieldAttr) (yystack.l_mark[-1].fieldAttr | fdSpecialName); }
#line 10240 "asmparse.cpp"
break;
case 201:
#line 604 "asmparse.y"
	{ PASM->m_pMarshal = yystack.l_mark[-1].binstr; }
#line 10245 "asmparse.cpp"
break;
case 202:
#line 605 "asmparse.y"
	{ yyval.fieldAttr = (CorFieldAttr) ((yystack.l_mark[-1].fieldAttr & ~mdMemberAccessMask) | fdAssembly); }
#line 10250 "asmparse.cpp"
break;
case 203:
#line 606 "asmparse.y"
	{ yyval.fieldAttr = (CorFieldAttr) ((yystack.l_mark[-1].fieldAttr & ~mdMemberAccessMask) | fdFamANDAssem); }
#line 10255 "asmparse.cpp"
break;
case 204:
#line 607 "asmparse.y"
	{ yyval.fieldAttr = (CorFieldAttr) ((yystack.l_mark[-1].fieldAttr & ~mdMemberAccessMask) | fdFamORAssem); }
#line 10260 "asmparse.cpp"
break;
case 205:
#line 608 "asmparse.y"
	{ yyval.fieldAttr = (CorFieldAttr) ((yystack.l_mark[-1].fieldAttr & ~mdMemberAccessMask) | fdPrivateScope); }
#line 10265 "asmparse.cpp"
break;
case 206:
#line 609 "asmparse.y"
	{ yyval.fieldAttr = (CorFieldAttr) (yystack.l_mark[-1].fieldAttr | fdLiteral); }
#line 10270 "asmparse.cpp"
break;
case 207:
#line 610 "asmparse.y"
	{ yyval.fieldAttr = (CorFieldAttr) (yystack.l_mark[-1].fieldAttr | fdNotSerialized); }
#line 10275 "asmparse.cpp"
break;
case 208:
#line 611 "asmparse.y"
	{ yyval.fieldAttr = (CorFieldAttr) (yystack.l_mark[-1].int32); }
#line 10280 "asmparse.cpp"
break;
case 209:
#line 614 "asmparse.y"
	{ yyval.string = 0; }
#line 10285 "asmparse.cpp"
break;
case 210:
#line 615 "asmparse.y"
	{ yyval.string = yystack.l_mark[0].string; }
#line 10290 "asmparse.cpp"
break;
case 211:
#line 618 "asmparse.y"
	{ yyval.binstr = NULL; }
#line 10295 "asmparse.cpp"
break;
case 212:
#line 619 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[0].binstr; }
#line 10300 "asmparse.cpp"
break;
case 213:
#line 622 "asmparse.y"
	{ yyval.int32 = 0xFFFFFFFF; }
#line 10305 "asmparse.cpp"
break;
case 214:
#line 623 "asmparse.y"
	{ yyval.int32 = yystack.l_mark[-1].int32; }
#line 10310 "asmparse.cpp"
break;
case 215:
#line 628 "asmparse.y"
	{ PASM->ResetArgNameList();
                                                               if (yystack.l_mark[-3].binstr == NULL)
                                                               {
                                                                 if((iCallConv)&&((yystack.l_mark[-8].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n");
                                                                 yyval.token = PASM->MakeMemberRef(yystack.l_mark[-6].token, yystack.l_mark[-4].string, parser->MakeSig(yystack.l_mark[-8].int32|iCallConv, yystack.l_mark[-7].binstr, yystack.l_mark[-1].binstr));
                                                               }
                                                               else
                                                               {
                                                                 mdToken mr;
                                                                 if((iCallConv)&&((yystack.l_mark[-8].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n");
                                                                 mr = PASM->MakeMemberRef(yystack.l_mark[-6].token, yystack.l_mark[-4].string,
                                                                   parser->MakeSig(yystack.l_mark[-8].int32 | IMAGE_CEE_CS_CALLCONV_GENERIC|iCallConv, yystack.l_mark[-7].binstr, yystack.l_mark[-1].binstr, corCountArgs(yystack.l_mark[-3].binstr)));
                                                                 yyval.token = PASM->MakeMethodSpec(mr,
                                                                   parser->MakeSig(IMAGE_CEE_CS_CALLCONV_INSTANTIATION, 0, yystack.l_mark[-3].binstr));
                                                               }
                                                             }
#line 10330 "asmparse.cpp"
break;
case 216:
#line 645 "asmparse.y"
	{ PASM->ResetArgNameList();
                                                               if((iCallConv)&&((yystack.l_mark[-8].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n");
                                                               yyval.token = PASM->MakeMemberRef(yystack.l_mark[-6].token, yystack.l_mark[-4].string,
                                                                 parser->MakeSig(yystack.l_mark[-8].int32 | IMAGE_CEE_CS_CALLCONV_GENERIC|iCallConv, yystack.l_mark[-7].binstr, yystack.l_mark[-1].binstr, yystack.l_mark[-3].int32));
                                                             }
#line 10339 "asmparse.cpp"
break;
case 217:
#line 651 "asmparse.y"
	{ PASM->ResetArgNameList();
                                                               if (yystack.l_mark[-3].binstr == NULL)
                                                               {
                                                                 if((iCallConv)&&((yystack.l_mark[-6].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n");
                                                                 yyval.token = PASM->MakeMemberRef(mdTokenNil, yystack.l_mark[-4].string, parser->MakeSig(yystack.l_mark[-6].int32|iCallConv, yystack.l_mark[-5].binstr, yystack.l_mark[-1].binstr));
                                                               }
                                                               else
                                                               {
                                                                 mdToken mr;
                                                                 if((iCallConv)&&((yystack.l_mark[-6].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n");
                                                                 mr = PASM->MakeMemberRef(mdTokenNil, yystack.l_mark[-4].string, parser->MakeSig(yystack.l_mark[-6].int32 | IMAGE_CEE_CS_CALLCONV_GENERIC|iCallConv, yystack.l_mark[-5].binstr, yystack.l_mark[-1].binstr, corCountArgs(yystack.l_mark[-3].binstr)));
                                                                 yyval.token = PASM->MakeMethodSpec(mr,
                                                                   parser->MakeSig(IMAGE_CEE_CS_CALLCONV_INSTANTIATION, 0, yystack.l_mark[-3].binstr));
                                                               }
                                                             }
#line 10358 "asmparse.cpp"
break;
case 218:
#line 667 "asmparse.y"
	{ PASM->ResetArgNameList();
                                                               if((iCallConv)&&((yystack.l_mark[-6].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n");
                                                               yyval.token = PASM->MakeMemberRef(mdTokenNil, yystack.l_mark[-4].string, parser->MakeSig(yystack.l_mark[-6].int32 | IMAGE_CEE_CS_CALLCONV_GENERIC|iCallConv, yystack.l_mark[-5].binstr, yystack.l_mark[-1].binstr, yystack.l_mark[-3].int32));
                                                             }
#line 10366 "asmparse.cpp"
break;
case 219:
#line 671 "asmparse.y"
	{ yyval.token = yystack.l_mark[0].token; }
#line 10371 "asmparse.cpp"
break;
case 220:
#line 672 "asmparse.y"
	{ yyval.token = yystack.l_mark[0].tdd->m_tkTypeSpec; }
#line 10376 "asmparse.cpp"
break;
case 221:
#line 673 "asmparse.y"
	{ yyval.token = yystack.l_mark[0].tdd->m_tkTypeSpec; }
#line 10381 "asmparse.cpp"
break;
case 222:
#line 676 "asmparse.y"
	{ yyval.int32 = (yystack.l_mark[0].int32 | IMAGE_CEE_CS_CALLCONV_HASTHIS); }
#line 10386 "asmparse.cpp"
break;
case 223:
#line 677 "asmparse.y"
	{ yyval.int32 = (yystack.l_mark[0].int32 | IMAGE_CEE_CS_CALLCONV_EXPLICITTHIS); }
#line 10391 "asmparse.cpp"
break;
case 224:
#line 678 "asmparse.y"
	{ yyval.int32 = yystack.l_mark[0].int32; }
#line 10396 "asmparse.cpp"
break;
case 225:
#line 679 "asmparse.y"
	{ yyval.int32 = yystack.l_mark[-1].int32; }
#line 10401 "asmparse.cpp"
break;
case 226:
#line 682 "asmparse.y"
	{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_DEFAULT; }
#line 10406 "asmparse.cpp"
break;
case 227:
#line 683 "asmparse.y"
	{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_DEFAULT; }
#line 10411 "asmparse.cpp"
break;
case 228:
#line 684 "asmparse.y"
	{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_VARARG; }
#line 10416 "asmparse.cpp"
break;
case 229:
#line 685 "asmparse.y"
	{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_C; }
#line 10421 "asmparse.cpp"
break;
case 230:
#line 686 "asmparse.y"
	{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_STDCALL; }
#line 10426 "asmparse.cpp"
break;
case 231:
#line 687 "asmparse.y"
	{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_THISCALL; }
#line 10431 "asmparse.cpp"
break;
case 232:
#line 688 "asmparse.y"
	{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_FASTCALL; }
#line 10436 "asmparse.cpp"
break;
case 233:
#line 689 "asmparse.y"
	{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_UNMANAGED; }
#line 10441 "asmparse.cpp"
break;
case 234:
#line 692 "asmparse.y"
	{ yyval.token = yystack.l_mark[-1].int32; }
#line 10446 "asmparse.cpp"
break;
case 235:
#line 695 "asmparse.y"
	{ yyval.token = yystack.l_mark[0].token;
                                                               PASM->delArgNameList(PASM->m_firstArgName);
                                                               PASM->m_firstArgName = parser->m_ANSFirst.POP();
                                                               PASM->m_lastArgName = parser->m_ANSLast.POP();
                                                               PASM->SetMemberRefFixup(yystack.l_mark[0].token,iOpcodeLen); }
#line 10455 "asmparse.cpp"
break;
case 236:
#line 701 "asmparse.y"
	{ yystack.l_mark[-3].binstr->insertInt8(IMAGE_CEE_CS_CALLCONV_FIELD);
                                                               yyval.token = PASM->MakeMemberRef(yystack.l_mark[-2].token, yystack.l_mark[0].string, yystack.l_mark[-3].binstr);
                                                               PASM->SetMemberRefFixup(yyval.token,iOpcodeLen); }
#line 10462 "asmparse.cpp"
break;
case 237:
#line 705 "asmparse.y"
	{ yystack.l_mark[-1].binstr->insertInt8(IMAGE_CEE_CS_CALLCONV_FIELD);
                                                               yyval.token = PASM->MakeMemberRef(NULL, yystack.l_mark[0].string, yystack.l_mark[-1].binstr);
                                                               PASM->SetMemberRefFixup(yyval.token,iOpcodeLen); }
#line 10469 "asmparse.cpp"
break;
case 238:
#line 708 "asmparse.y"
	{ yyval.token = yystack.l_mark[0].tdd->m_tkTypeSpec;
                                                               PASM->SetMemberRefFixup(yyval.token,iOpcodeLen); }
#line 10475 "asmparse.cpp"
break;
case 239:
#line 710 "asmparse.y"
	{ yyval.token = yystack.l_mark[0].tdd->m_tkTypeSpec;
                                                               PASM->SetMemberRefFixup(yyval.token,iOpcodeLen); }
#line 10481 "asmparse.cpp"
break;
case 240:
#line 712 "asmparse.y"
	{ yyval.token = yystack.l_mark[0].token;
                                                               PASM->SetMemberRefFixup(yyval.token,iOpcodeLen); }
#line 10487 "asmparse.cpp"
break;
case 241:
#line 717 "asmparse.y"
	{ PASM->ResetEvent(yystack.l_mark[0].string, yystack.l_mark[-1].token, yystack.l_mark[-2].eventAttr); }
#line 10492 "asmparse.cpp"
break;
case 242:
#line 718 "asmparse.y"
	{ PASM->ResetEvent(yystack.l_mark[0].string, mdTypeRefNil, yystack.l_mark[-1].eventAttr); }
#line 10497 "asmparse.cpp"
break;
case 243:
#line 722 "asmparse.y"
	{ yyval.eventAttr = (CorEventAttr) 0; }
#line 10502 "asmparse.cpp"
break;
case 244:
#line 723 "asmparse.y"
	{ yyval.eventAttr = yystack.l_mark[-1].eventAttr; }
#line 10507 "asmparse.cpp"
break;
case 245:
#line 724 "asmparse.y"
	{ yyval.eventAttr = (CorEventAttr) (yystack.l_mark[-1].eventAttr | evSpecialName); }
#line 10512 "asmparse.cpp"
break;
case 248:
#line 731 "asmparse.y"
	{ PASM->SetEventMethod(0, yystack.l_mark[0].token); }
#line 10517 "asmparse.cpp"
break;
case 249:
#line 732 "asmparse.y"
	{ PASM->SetEventMethod(1, yystack.l_mark[0].token); }
#line 10522 "asmparse.cpp"
break;
case 250:
#line 733 "asmparse.y"
	{ PASM->SetEventMethod(2, yystack.l_mark[0].token); }
#line 10527 "asmparse.cpp"
break;
case 251:
#line 734 "asmparse.y"
	{ PASM->SetEventMethod(3, yystack.l_mark[0].token); }
#line 10532 "asmparse.cpp"
break;
case 256:
#line 743 "asmparse.y"
	{ PASM->ResetProp(yystack.l_mark[-4].string,
                                                              parser->MakeSig((IMAGE_CEE_CS_CALLCONV_PROPERTY |
                                                              (yystack.l_mark[-6].int32 & IMAGE_CEE_CS_CALLCONV_HASTHIS)),yystack.l_mark[-5].binstr,yystack.l_mark[-2].binstr), yystack.l_mark[-7].propAttr, yystack.l_mark[0].binstr);}
#line 10539 "asmparse.cpp"
break;
case 257:
#line 748 "asmparse.y"
	{ yyval.propAttr = (CorPropertyAttr) 0; }
#line 10544 "asmparse.cpp"
break;
case 258:
#line 749 "asmparse.y"
	{ yyval.propAttr = yystack.l_mark[-1].propAttr; }
#line 10549 "asmparse.cpp"
break;
case 259:
#line 750 "asmparse.y"
	{ yyval.propAttr = (CorPropertyAttr) (yystack.l_mark[-1].propAttr | prSpecialName); }
#line 10554 "asmparse.cpp"
break;
case 262:
#line 758 "asmparse.y"
	{ PASM->SetPropMethod(0, yystack.l_mark[0].token); }
#line 10559 "asmparse.cpp"
break;
case 263:
#line 759 "asmparse.y"
	{ PASM->SetPropMethod(1, yystack.l_mark[0].token); }
#line 10564 "asmparse.cpp"
break;
case 264:
#line 760 "asmparse.y"
	{ PASM->SetPropMethod(2, yystack.l_mark[0].token); }
#line 10569 "asmparse.cpp"
break;
case 269:
#line 768 "asmparse.y"
	{ PASM->ResetForNextMethod();
                                                              uMethodBeginLine = PASM->m_ulCurLine;
                                                              uMethodBeginColumn=PASM->m_ulCurColumn;
                                                            }
#line 10577 "asmparse.cpp"
break;
case 270:
#line 774 "asmparse.y"
	{ yyval.binstr = NULL; }
#line 10582 "asmparse.cpp"
break;
case 271:
#line 775 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; }
#line 10587 "asmparse.cpp"
break;
case 272:
#line 778 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[0].binstr; }
#line 10592 "asmparse.cpp"
break;
case 273:
#line 779 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; }
#line 10597 "asmparse.cpp"
break;
case 274:
#line 782 "asmparse.y"
	{ bParsingByteArray = TRUE; }
#line 10602 "asmparse.cpp"
break;
case 275:
#line 786 "asmparse.y"
	{ BinStr* sig;
                                                              if (yystack.l_mark[-5].typarlist == NULL) sig = parser->MakeSig(yystack.l_mark[-10].int32, yystack.l_mark[-8].binstr, yystack.l_mark[-3].binstr);
                                                              else {
                                                               FixupTyPars(yystack.l_mark[-8].binstr);
                                                               sig = parser->MakeSig(yystack.l_mark[-10].int32 | IMAGE_CEE_CS_CALLCONV_GENERIC, yystack.l_mark[-8].binstr, yystack.l_mark[-3].binstr, yystack.l_mark[-5].typarlist->Count());
                                                               FixupConstraints();
                                                              }
                                                              PASM->StartMethod(yystack.l_mark[-6].string, sig, yystack.l_mark[-11].methAttr, yystack.l_mark[-7].binstr, yystack.l_mark[-9].int32, yystack.l_mark[-5].typarlist);
                                                              TyParFixupList.RESET(false);
                                                              PASM->SetImplAttr((USHORT)yystack.l_mark[-1].implAttr);
                                                              PASM->m_pCurMethod->m_ulLines[0] = uMethodBeginLine;
                                                              PASM->m_pCurMethod->m_ulColumns[0]=uMethodBeginColumn;
                                                            }
#line 10619 "asmparse.cpp"
break;
case 276:
#line 801 "asmparse.y"
	{ yyval.methAttr = (CorMethodAttr) 0; }
#line 10624 "asmparse.cpp"
break;
case 277:
#line 802 "asmparse.y"
	{ yyval.methAttr = (CorMethodAttr) (yystack.l_mark[-1].methAttr | mdStatic); }
#line 10629 "asmparse.cpp"
break;
case 278:
#line 803 "asmparse.y"
	{ yyval.methAttr = (CorMethodAttr) ((yystack.l_mark[-1].methAttr & ~mdMemberAccessMask) | mdPublic); }
#line 10634 "asmparse.cpp"
break;
case 279:
#line 804 "asmparse.y"
	{ yyval.methAttr = (CorMethodAttr) ((yystack.l_mark[-1].methAttr & ~mdMemberAccessMask) | mdPrivate); }
#line 10639 "asmparse.cpp"
break;
case 280:
#line 805 "asmparse.y"
	{ yyval.methAttr = (CorMethodAttr) ((yystack.l_mark[-1].methAttr & ~mdMemberAccessMask) | mdFamily); }
#line 10644 "asmparse.cpp"
break;
case 281:
#line 806 "asmparse.y"
	{ yyval.methAttr = (CorMethodAttr) (yystack.l_mark[-1].methAttr | mdFinal); }
#line 10649 "asmparse.cpp"
break;
case 282:
#line 807 "asmparse.y"
	{ yyval.methAttr = (CorMethodAttr) (yystack.l_mark[-1].methAttr | mdSpecialName); }
#line 10654 "asmparse.cpp"
break;
case 283:
#line 808 "asmparse.y"
	{ yyval.methAttr = (CorMethodAttr) (yystack.l_mark[-1].methAttr | mdVirtual); }
#line 10659 "asmparse.cpp"
break;
case 284:
#line 809 "asmparse.y"
	{ yyval.methAttr = (CorMethodAttr) (yystack.l_mark[-1].methAttr | mdCheckAccessOnOverride); }
#line 10664 "asmparse.cpp"
break;
case 285:
#line 810 "asmparse.y"
	{ yyval.methAttr = (CorMethodAttr) (yystack.l_mark[-1].methAttr | mdAbstract); }
#line 10669 "asmparse.cpp"
break;
case 286:
#line 811 "asmparse.y"
	{ yyval.methAttr = (CorMethodAttr) ((yystack.l_mark[-1].methAttr & ~mdMemberAccessMask) | mdAssem); }
#line 10674 "asmparse.cpp"
break;
case 287:
#line 812 "asmparse.y"
	{ yyval.methAttr = (CorMethodAttr) ((yystack.l_mark[-1].methAttr & ~mdMemberAccessMask) | mdFamANDAssem); }
#line 10679 "asmparse.cpp"
break;
case 288:
#line 813 "asmparse.y"
	{ yyval.methAttr = (CorMethodAttr) ((yystack.l_mark[-1].methAttr & ~mdMemberAccessMask) | mdFamORAssem); }
#line 10684 "asmparse.cpp"
break;
case 289:
#line 814 "asmparse.y"
	{ yyval.methAttr = (CorMethodAttr) ((yystack.l_mark[-1].methAttr & ~mdMemberAccessMask) | mdPrivateScope); }
#line 10689 "asmparse.cpp"
break;
case 290:
#line 815 "asmparse.y"
	{ yyval.methAttr = (CorMethodAttr) (yystack.l_mark[-1].methAttr | mdHideBySig); }
#line 10694 "asmparse.cpp"
break;
case 291:
#line 816 "asmparse.y"
	{ yyval.methAttr = (CorMethodAttr) (yystack.l_mark[-1].methAttr | mdNewSlot); }
#line 10699 "asmparse.cpp"
break;
case 292:
#line 817 "asmparse.y"
	{ yyval.methAttr = yystack.l_mark[-1].methAttr; }
#line 10704 "asmparse.cpp"
break;
case 293:
#line 818 "asmparse.y"
	{ yyval.methAttr = (CorMethodAttr) (yystack.l_mark[-1].methAttr | mdUnmanagedExport); }
#line 10709 "asmparse.cpp"
break;
case 294:
#line 819 "asmparse.y"
	{ yyval.methAttr = (CorMethodAttr) (yystack.l_mark[-1].methAttr | mdRequireSecObject); }
#line 10714 "asmparse.cpp"
break;
case 295:
#line 820 "asmparse.y"
	{ yyval.methAttr = (CorMethodAttr) (yystack.l_mark[-1].int32); }
#line 10719 "asmparse.cpp"
break;
case 296:
#line 822 "asmparse.y"
	{ PASM->SetPinvoke(yystack.l_mark[-4].binstr,0,yystack.l_mark[-2].binstr,yystack.l_mark[-1].pinvAttr);
                                                              yyval.methAttr = (CorMethodAttr) (yystack.l_mark[-7].methAttr | mdPinvokeImpl); }
#line 10725 "asmparse.cpp"
break;
case 297:
#line 825 "asmparse.y"
	{ PASM->SetPinvoke(yystack.l_mark[-2].binstr,0,NULL,yystack.l_mark[-1].pinvAttr);
                                                              yyval.methAttr = (CorMethodAttr) (yystack.l_mark[-5].methAttr | mdPinvokeImpl); }
#line 10731 "asmparse.cpp"
break;
case 298:
#line 828 "asmparse.y"
	{ PASM->SetPinvoke(new BinStr(),0,NULL,yystack.l_mark[-1].pinvAttr);
                                                              yyval.methAttr = (CorMethodAttr) (yystack.l_mark[-4].methAttr | mdPinvokeImpl); }
#line 10737 "asmparse.cpp"
break;
case 299:
#line 832 "asmparse.y"
	{ yyval.pinvAttr = (CorPinvokeMap) 0; }
#line 10742 "asmparse.cpp"
break;
case 300:
#line 833 "asmparse.y"
	{ yyval.pinvAttr = (CorPinvokeMap) (yystack.l_mark[-1].pinvAttr | pmNoMangle); }
#line 10747 "asmparse.cpp"
break;
case 301:
#line 834 "asmparse.y"
	{ yyval.pinvAttr = (CorPinvokeMap) (yystack.l_mark[-1].pinvAttr | pmCharSetAnsi); }
#line 10752 "asmparse.cpp"
break;
case 302:
#line 835 "asmparse.y"
	{ yyval.pinvAttr = (CorPinvokeMap) (yystack.l_mark[-1].pinvAttr | pmCharSetUnicode); }
#line 10757 "asmparse.cpp"
break;
case 303:
#line 836 "asmparse.y"
	{ yyval.pinvAttr = (CorPinvokeMap) (yystack.l_mark[-1].pinvAttr | pmCharSetAuto); }
#line 10762 "asmparse.cpp"
break;
case 304:
#line 837 "asmparse.y"
	{ yyval.pinvAttr = (CorPinvokeMap) (yystack.l_mark[-1].pinvAttr | pmSupportsLastError); }
#line 10767 "asmparse.cpp"
break;
case 305:
#line 838 "asmparse.y"
	{ yyval.pinvAttr = (CorPinvokeMap) (yystack.l_mark[-1].pinvAttr | pmCallConvWinapi); }
#line 10772 "asmparse.cpp"
break;
case 306:
#line 839 "asmparse.y"
	{ yyval.pinvAttr = (CorPinvokeMap) (yystack.l_mark[-1].pinvAttr | pmCallConvCdecl); }
#line 10777 "asmparse.cpp"
break;
case 307:
#line 840 "asmparse.y"
	{ yyval.pinvAttr = (CorPinvokeMap) (yystack.l_mark[-1].pinvAttr | pmCallConvStdcall); }
#line 10782 "asmparse.cpp"
break;
case 308:
#line 841 "asmparse.y"
	{ yyval.pinvAttr = (CorPinvokeMap) (yystack.l_mark[-1].pinvAttr | pmCallConvThiscall); }
#line 10787 "asmparse.cpp"
break;
case 309:
#line 842 "asmparse.y"
	{ yyval.pinvAttr = (CorPinvokeMap) (yystack.l_mark[-1].pinvAttr | pmCallConvFastcall); }
#line 10792 "asmparse.cpp"
break;
case 310:
#line 843 "asmparse.y"
	{ yyval.pinvAttr = (CorPinvokeMap) (yystack.l_mark[-3].pinvAttr | pmBestFitEnabled); }
#line 10797 "asmparse.cpp"
break;
case 311:
#line 844 "asmparse.y"
	{ yyval.pinvAttr = (CorPinvokeMap) (yystack.l_mark[-3].pinvAttr | pmBestFitDisabled); }
#line 10802 "asmparse.cpp"
break;
case 312:
#line 845 "asmparse.y"
	{ yyval.pinvAttr = (CorPinvokeMap) (yystack.l_mark[-3].pinvAttr | pmThrowOnUnmappableCharEnabled); }
#line 10807 "asmparse.cpp"
break;
case 313:
#line 846 "asmparse.y"
	{ yyval.pinvAttr = (CorPinvokeMap) (yystack.l_mark[-3].pinvAttr | pmThrowOnUnmappableCharDisabled); }
#line 10812 "asmparse.cpp"
break;
case 314:
#line 847 "asmparse.y"
	{ yyval.pinvAttr = (CorPinvokeMap) (yystack.l_mark[-1].int32); }
#line 10817 "asmparse.cpp"
break;
case 315:
#line 850 "asmparse.y"
	{ yyval.string = newString(COR_CTOR_METHOD_NAME); }
#line 10822 "asmparse.cpp"
break;
case 316:
#line 851 "asmparse.y"
	{ yyval.string = newString(COR_CCTOR_METHOD_NAME); }
#line 10827 "asmparse.cpp"
break;
case 317:
#line 852 "asmparse.y"
	{ yyval.string = yystack.l_mark[0].string; }
#line 10832 "asmparse.cpp"
break;
case 318:
#line 855 "asmparse.y"
	{ yyval.int32 = 0; }
#line 10837 "asmparse.cpp"
break;
case 319:
#line 856 "asmparse.y"
	{ yyval.int32 = yystack.l_mark[-3].int32 | pdIn; }
#line 10842 "asmparse.cpp"
break;
case 320:
#line 857 "asmparse.y"
	{ yyval.int32 = yystack.l_mark[-3].int32 | pdOut; }
#line 10847 "asmparse.cpp"
break;
case 321:
#line 858 "asmparse.y"
	{ yyval.int32 = yystack.l_mark[-3].int32 | pdOptional; }
#line 10852 "asmparse.cpp"
break;
case 322:
#line 859 "asmparse.y"
	{ yyval.int32 = yystack.l_mark[-1].int32 + 1; }
#line 10857 "asmparse.cpp"
break;
case 323:
#line 862 "asmparse.y"
	{ yyval.implAttr = (CorMethodImpl) (miIL | miManaged); }
#line 10862 "asmparse.cpp"
break;
case 324:
#line 863 "asmparse.y"
	{ yyval.implAttr = (CorMethodImpl) ((yystack.l_mark[-1].implAttr & 0xFFF4) | miNative); }
#line 10867 "asmparse.cpp"
break;
case 325:
#line 864 "asmparse.y"
	{ yyval.implAttr = (CorMethodImpl) ((yystack.l_mark[-1].implAttr & 0xFFF4) | miIL); }
#line 10872 "asmparse.cpp"
break;
case 326:
#line 865 "asmparse.y"
	{ yyval.implAttr = (CorMethodImpl) ((yystack.l_mark[-1].implAttr & 0xFFF4) | miOPTIL); }
#line 10877 "asmparse.cpp"
break;
case 327:
#line 866 "asmparse.y"
	{ yyval.implAttr = (CorMethodImpl) ((yystack.l_mark[-1].implAttr & 0xFFFB) | miManaged); }
#line 10882 "asmparse.cpp"
break;
case 328:
#line 867 "asmparse.y"
	{ yyval.implAttr = (CorMethodImpl) ((yystack.l_mark[-1].implAttr & 0xFFFB) | miUnmanaged); }
#line 10887 "asmparse.cpp"
break;
case 329:
#line 868 "asmparse.y"
	{ yyval.implAttr = (CorMethodImpl) (yystack.l_mark[-1].implAttr | miForwardRef); }
#line 10892 "asmparse.cpp"
break;
case 330:
#line 869 "asmparse.y"
	{ yyval.implAttr = (CorMethodImpl) (yystack.l_mark[-1].implAttr | miPreserveSig); }
#line 10897 "asmparse.cpp"
break;
case 331:
#line 870 "asmparse.y"
	{ yyval.implAttr = (CorMethodImpl) (yystack.l_mark[-1].implAttr | miRuntime); }
#line 10902 "asmparse.cpp"
break;
case 332:
#line 871 "asmparse.y"
	{ yyval.implAttr = (CorMethodImpl) (yystack.l_mark[-1].implAttr | miInternalCall); }
#line 10907 "asmparse.cpp"
break;
case 333:
#line 872 "asmparse.y"
	{ yyval.implAttr = (CorMethodImpl) (yystack.l_mark[-1].implAttr | miSynchronized); }
#line 10912 "asmparse.cpp"
break;
case 334:
#line 873 "asmparse.y"
	{ yyval.implAttr = (CorMethodImpl) (yystack.l_mark[-1].implAttr | miNoInlining); }
#line 10917 "asmparse.cpp"
break;
case 335:
#line 874 "asmparse.y"
	{ yyval.implAttr = (CorMethodImpl) (yystack.l_mark[-1].implAttr | miAggressiveInlining); }
#line 10922 "asmparse.cpp"
break;
case 336:
#line 875 "asmparse.y"
	{ yyval.implAttr = (CorMethodImpl) (yystack.l_mark[-1].implAttr | miNoOptimization); }
#line 10927 "asmparse.cpp"
break;
case 337:
#line 876 "asmparse.y"
	{ yyval.implAttr = (CorMethodImpl) (yystack.l_mark[-1].implAttr | miAggressiveOptimization); }
#line 10932 "asmparse.cpp"
break;
case 338:
#line 877 "asmparse.y"
	{ yyval.implAttr = (CorMethodImpl) (yystack.l_mark[-1].int32); }
#line 10937 "asmparse.cpp"
break;
case 339:
#line 880 "asmparse.y"
	{ PASM->delArgNameList(PASM->m_firstArgName); PASM->m_firstArgName = NULL;PASM->m_lastArgName = NULL;
                                                            }
#line 10943 "asmparse.cpp"
break;
case 342:
#line 888 "asmparse.y"
	{ PASM->EmitByte(yystack.l_mark[0].int32); }
#line 10948 "asmparse.cpp"
break;
case 343:
#line 889 "asmparse.y"
	{ delete PASM->m_SEHD; PASM->m_SEHD = PASM->m_SEHDstack.POP(); }
#line 10953 "asmparse.cpp"
break;
case 344:
#line 890 "asmparse.y"
	{ PASM->EmitMaxStack(yystack.l_mark[0].int32); }
#line 10958 "asmparse.cpp"
break;
case 345:
#line 891 "asmparse.y"
	{ PASM->EmitLocals(parser->MakeSig(IMAGE_CEE_CS_CALLCONV_LOCAL_SIG, 0, yystack.l_mark[-1].binstr));
                                                            }
#line 10964 "asmparse.cpp"
break;
case 346:
#line 893 "asmparse.y"
	{ PASM->EmitZeroInit();
                                                              PASM->EmitLocals(parser->MakeSig(IMAGE_CEE_CS_CALLCONV_LOCAL_SIG, 0, yystack.l_mark[-1].binstr));
                                                            }
#line 10971 "asmparse.cpp"
break;
case 347:
#line 896 "asmparse.y"
	{ PASM->EmitEntryPoint(); }
#line 10976 "asmparse.cpp"
break;
case 348:
#line 897 "asmparse.y"
	{ PASM->EmitZeroInit(); }
#line 10981 "asmparse.cpp"
break;
case 351:
#line 900 "asmparse.y"
	{ PASM->AddLabel(PASM->m_CurPC,yystack.l_mark[-1].string); /*PASM->EmitLabel($1);*/ }
#line 10986 "asmparse.cpp"
break;
case 357:
#line 906 "asmparse.y"
	{ if(PASM->m_pCurMethod->m_dwExportOrdinal == 0xFFFFFFFF)
                                                              {
                                                                PASM->m_pCurMethod->m_dwExportOrdinal = yystack.l_mark[-1].int32;
                                                                PASM->m_pCurMethod->m_szExportAlias = NULL;
                                                                if(PASM->m_pCurMethod->m_wVTEntry == 0) PASM->m_pCurMethod->m_wVTEntry = 1;
                                                                if(PASM->m_pCurMethod->m_wVTSlot  == 0) PASM->m_pCurMethod->m_wVTSlot = (WORD)(yystack.l_mark[-1].int32 + 0x8000);
                                                              }
                                                              else
                                                                PASM->report->warn("Duplicate .export directive, ignored\n");
                                                            }
#line 11000 "asmparse.cpp"
break;
case 358:
#line 916 "asmparse.y"
	{ if(PASM->m_pCurMethod->m_dwExportOrdinal == 0xFFFFFFFF)
                                                              {
                                                                PASM->m_pCurMethod->m_dwExportOrdinal = yystack.l_mark[-3].int32;
                                                                PASM->m_pCurMethod->m_szExportAlias = yystack.l_mark[0].string;
                                                                if(PASM->m_pCurMethod->m_wVTEntry == 0) PASM->m_pCurMethod->m_wVTEntry = 1;
                                                                if(PASM->m_pCurMethod->m_wVTSlot  == 0) PASM->m_pCurMethod->m_wVTSlot = (WORD)(yystack.l_mark[-3].int32 + 0x8000);
                                                              }
                                                              else
                                                                PASM->report->warn("Duplicate .export directive, ignored\n");
                                                            }
#line 11014 "asmparse.cpp"
break;
case 359:
#line 926 "asmparse.y"
	{ PASM->m_pCurMethod->m_wVTEntry = (WORD)yystack.l_mark[-2].int32;
                                                              PASM->m_pCurMethod->m_wVTSlot = (WORD)yystack.l_mark[0].int32; }
#line 11020 "asmparse.cpp"
break;
case 360:
#line 929 "asmparse.y"
	{ PASM->AddMethodImpl(yystack.l_mark[-2].token,yystack.l_mark[0].string,NULL,NULL,NULL,NULL); }
#line 11025 "asmparse.cpp"
break;
case 361:
#line 932 "asmparse.y"
	{ PASM->AddMethodImpl(yystack.l_mark[-6].token,yystack.l_mark[-4].string,
                                                              (yystack.l_mark[-3].int32==0 ? parser->MakeSig(yystack.l_mark[-8].int32,yystack.l_mark[-7].binstr,yystack.l_mark[-1].binstr) :
                                                              parser->MakeSig(yystack.l_mark[-8].int32| IMAGE_CEE_CS_CALLCONV_GENERIC,yystack.l_mark[-7].binstr,yystack.l_mark[-1].binstr,yystack.l_mark[-3].int32))
                                                              ,NULL,NULL,NULL);
                                                              PASM->ResetArgNameList();
                                                            }
#line 11035 "asmparse.cpp"
break;
case 363:
#line 939 "asmparse.y"
	{ if((yystack.l_mark[-1].int32 > 0) && (yystack.l_mark[-1].int32 <= (int)PASM->m_pCurMethod->m_NumTyPars))
                                                                PASM->m_pCustomDescrList = PASM->m_pCurMethod->m_TyPars[yystack.l_mark[-1].int32-1].CAList();
                                                              else
                                                                PASM->report->error("Type parameter index out of range\n");
                                                            }
#line 11044 "asmparse.cpp"
break;
case 364:
#line 944 "asmparse.y"
	{ int n = PASM->m_pCurMethod->FindTyPar(yystack.l_mark[0].string);
                                                              if(n >= 0)
                                                                PASM->m_pCustomDescrList = PASM->m_pCurMethod->m_TyPars[n].CAList();
                                                              else
                                                                PASM->report->error("Type parameter '%s' undefined\n",yystack.l_mark[0].string);
                                                            }
#line 11054 "asmparse.cpp"
break;
case 365:
#line 950 "asmparse.y"
	{ PASM->m_pCurMethod->AddGenericParamConstraint(yystack.l_mark[-3].int32, 0, yystack.l_mark[0].token); }
#line 11059 "asmparse.cpp"
break;
case 366:
#line 951 "asmparse.y"
	{ PASM->m_pCurMethod->AddGenericParamConstraint(0, yystack.l_mark[-2].string, yystack.l_mark[0].token); }
#line 11064 "asmparse.cpp"
break;
case 367:
#line 954 "asmparse.y"
	{ if( yystack.l_mark[-2].int32 ) {
                                                                ARG_NAME_LIST* pAN=PASM->findArg(PASM->m_pCurMethod->m_firstArgName, yystack.l_mark[-2].int32 - 1);
                                                                if(pAN)
                                                                {
                                                                    PASM->m_pCustomDescrList = &(pAN->CustDList);
                                                                    pAN->pValue = yystack.l_mark[0].binstr;
                                                                }
                                                                else
                                                                {
                                                                    PASM->m_pCustomDescrList = NULL;
                                                                    if(yystack.l_mark[0].binstr) delete yystack.l_mark[0].binstr;
                                                                }
                                                              } else {
                                                                PASM->m_pCustomDescrList = &(PASM->m_pCurMethod->m_RetCustDList);
                                                                PASM->m_pCurMethod->m_pRetValue = yystack.l_mark[0].binstr;
                                                              }
                                                              PASM->m_tkCurrentCVOwner = 0;
                                                            }
#line 11086 "asmparse.cpp"
break;
case 368:
#line 974 "asmparse.y"
	{ PASM->m_pCurMethod->CloseScope(); }
#line 11091 "asmparse.cpp"
break;
case 369:
#line 977 "asmparse.y"
	{ PASM->m_pCurMethod->OpenScope(); }
#line 11096 "asmparse.cpp"
break;
case 373:
#line 988 "asmparse.y"
	{ PASM->m_SEHD->tryTo = PASM->m_CurPC; }
#line 11101 "asmparse.cpp"
break;
case 374:
#line 989 "asmparse.y"
	{ PASM->SetTryLabels(yystack.l_mark[-2].string, yystack.l_mark[0].string); }
#line 11106 "asmparse.cpp"
break;
case 375:
#line 990 "asmparse.y"
	{ if(PASM->m_SEHD) {PASM->m_SEHD->tryFrom = yystack.l_mark[-2].int32;
                                                              PASM->m_SEHD->tryTo = yystack.l_mark[0].int32;} }
#line 11112 "asmparse.cpp"
break;
case 376:
#line 994 "asmparse.y"
	{ PASM->NewSEHDescriptor();
                                                              PASM->m_SEHD->tryFrom = PASM->m_CurPC; }
#line 11118 "asmparse.cpp"
break;
case 377:
#line 999 "asmparse.y"
	{ PASM->EmitTry(); }
#line 11123 "asmparse.cpp"
break;
case 378:
#line 1000 "asmparse.y"
	{ PASM->EmitTry(); }
#line 11128 "asmparse.cpp"
break;
case 379:
#line 1001 "asmparse.y"
	{ PASM->EmitTry(); }
#line 11133 "asmparse.cpp"
break;
case 380:
#line 1002 "asmparse.y"
	{ PASM->EmitTry(); }
#line 11138 "asmparse.cpp"
break;
case 381:
#line 1006 "asmparse.y"
	{ PASM->m_SEHD->sehHandler = PASM->m_CurPC; }
#line 11143 "asmparse.cpp"
break;
case 382:
#line 1007 "asmparse.y"
	{ PASM->SetFilterLabel(yystack.l_mark[0].string);
                                                               PASM->m_SEHD->sehHandler = PASM->m_CurPC; }
#line 11149 "asmparse.cpp"
break;
case 383:
#line 1009 "asmparse.y"
	{ PASM->m_SEHD->sehFilter = yystack.l_mark[0].int32;
                                                               PASM->m_SEHD->sehHandler = PASM->m_CurPC; }
#line 11155 "asmparse.cpp"
break;
case 384:
#line 1013 "asmparse.y"
	{ PASM->m_SEHD->sehClause = COR_ILEXCEPTION_CLAUSE_FILTER;
                                                               PASM->m_SEHD->sehFilter = PASM->m_CurPC; }
#line 11161 "asmparse.cpp"
break;
case 385:
#line 1017 "asmparse.y"
	{  PASM->m_SEHD->sehClause = COR_ILEXCEPTION_CLAUSE_NONE;
                                                               PASM->SetCatchClass(yystack.l_mark[0].token);
                                                               PASM->m_SEHD->sehHandler = PASM->m_CurPC; }
#line 11168 "asmparse.cpp"
break;
case 386:
#line 1022 "asmparse.y"
	{ PASM->m_SEHD->sehClause = COR_ILEXCEPTION_CLAUSE_FINALLY;
                                                               PASM->m_SEHD->sehHandler = PASM->m_CurPC; }
#line 11174 "asmparse.cpp"
break;
case 387:
#line 1026 "asmparse.y"
	{ PASM->m_SEHD->sehClause = COR_ILEXCEPTION_CLAUSE_FAULT;
                                                               PASM->m_SEHD->sehHandler = PASM->m_CurPC; }
#line 11180 "asmparse.cpp"
break;
case 388:
#line 1030 "asmparse.y"
	{ PASM->m_SEHD->sehHandlerTo = PASM->m_CurPC; }
#line 11185 "asmparse.cpp"
break;
case 389:
#line 1031 "asmparse.y"
	{ PASM->SetHandlerLabels(yystack.l_mark[-2].string, yystack.l_mark[0].string); }
#line 11190 "asmparse.cpp"
break;
case 390:
#line 1032 "asmparse.y"
	{ PASM->m_SEHD->sehHandler = yystack.l_mark[-2].int32;
                                                               PASM->m_SEHD->sehHandlerTo = yystack.l_mark[0].int32; }
#line 11196 "asmparse.cpp"
break;
case 392:
#line 1040 "asmparse.y"
	{ PASM->EmitDataLabel(yystack.l_mark[-1].string); }
#line 11201 "asmparse.cpp"
break;
case 394:
#line 1044 "asmparse.y"
	{ PASM->SetDataSection(); }
#line 11206 "asmparse.cpp"
break;
case 395:
#line 1045 "asmparse.y"
	{ PASM->SetTLSSection(); }
#line 11211 "asmparse.cpp"
break;
case 396:
#line 1046 "asmparse.y"
	{ PASM->SetILSection(); }
#line 11216 "asmparse.cpp"
break;
case 401:
#line 1057 "asmparse.y"
	{ yyval.int32 = 1; }
#line 11221 "asmparse.cpp"
break;
case 402:
#line 1058 "asmparse.y"
	{ yyval.int32 = yystack.l_mark[-1].int32;
                                                               if(yystack.l_mark[-1].int32 <= 0) { PASM->report->error("Illegal item count: %d\n",yystack.l_mark[-1].int32);
                                                                  if(!PASM->OnErrGo) yyval.int32 = 1; }}
#line 11228 "asmparse.cpp"
break;
case 403:
#line 1063 "asmparse.y"
	{ PASM->EmitDataString(yystack.l_mark[-1].binstr); }
#line 11233 "asmparse.cpp"
break;
case 404:
#line 1064 "asmparse.y"
	{ PASM->EmitDD(yystack.l_mark[-1].string); }
#line 11238 "asmparse.cpp"
break;
case 405:
#line 1065 "asmparse.y"
	{ PASM->EmitData(yystack.l_mark[-1].binstr->ptr(),yystack.l_mark[-1].binstr->length()); }
#line 11243 "asmparse.cpp"
break;
case 406:
#line 1067 "asmparse.y"
	{ float f = (float) (*yystack.l_mark[-2].float64); float* p = new (nothrow) float[yystack.l_mark[0].int32];
                                                               if(p != NULL) {
                                                                 for(int i=0; i < yystack.l_mark[0].int32; i++) p[i] = f;
                                                                 PASM->EmitData(p, sizeof(float)*yystack.l_mark[0].int32); delete yystack.l_mark[-2].float64; delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(float)*yystack.l_mark[0].int32); }
#line 11253 "asmparse.cpp"
break;
case 407:
#line 1074 "asmparse.y"
	{ double* p = new (nothrow) double[yystack.l_mark[0].int32];
                                                               if(p != NULL) {
                                                                 for(int i=0; i<yystack.l_mark[0].int32; i++) p[i] = *(yystack.l_mark[-2].float64);
                                                                 PASM->EmitData(p, sizeof(double)*yystack.l_mark[0].int32); delete yystack.l_mark[-2].float64; delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(double)*yystack.l_mark[0].int32); }
#line 11263 "asmparse.cpp"
break;
case 408:
#line 1081 "asmparse.y"
	{ __int64* p = new (nothrow) __int64[yystack.l_mark[0].int32];
                                                               if(p != NULL) {
                                                                 for(int i=0; i<yystack.l_mark[0].int32; i++) p[i] = *(yystack.l_mark[-2].int64);
                                                                 PASM->EmitData(p, sizeof(__int64)*yystack.l_mark[0].int32); delete yystack.l_mark[-2].int64; delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(__int64)*yystack.l_mark[0].int32); }
#line 11273 "asmparse.cpp"
break;
case 409:
#line 1088 "asmparse.y"
	{ __int32* p = new (nothrow) __int32[yystack.l_mark[0].int32];
                                                               if(p != NULL) {
                                                                 for(int i=0; i<yystack.l_mark[0].int32; i++) p[i] = yystack.l_mark[-2].int32;
                                                                 PASM->EmitData(p, sizeof(__int32)*yystack.l_mark[0].int32); delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(__int32)*yystack.l_mark[0].int32); }
#line 11283 "asmparse.cpp"
break;
case 410:
#line 1095 "asmparse.y"
	{ __int16 i = (__int16) yystack.l_mark[-2].int32; FAIL_UNLESS(i == yystack.l_mark[-2].int32, ("Value %d too big\n", yystack.l_mark[-2].int32));
                                                               __int16* p = new (nothrow) __int16[yystack.l_mark[0].int32];
                                                               if(p != NULL) {
                                                                 for(int j=0; j<yystack.l_mark[0].int32; j++) p[j] = i;
                                                                 PASM->EmitData(p, sizeof(__int16)*yystack.l_mark[0].int32); delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(__int16)*yystack.l_mark[0].int32); }
#line 11294 "asmparse.cpp"
break;
case 411:
#line 1103 "asmparse.y"
	{ __int8 i = (__int8) yystack.l_mark[-2].int32; FAIL_UNLESS(i == yystack.l_mark[-2].int32, ("Value %d too big\n", yystack.l_mark[-2].int32));
                                                               __int8* p = new (nothrow) __int8[yystack.l_mark[0].int32];
                                                               if(p != NULL) {
                                                                 for(int j=0; j<yystack.l_mark[0].int32; j++) p[j] = i;
                                                                 PASM->EmitData(p, sizeof(__int8)*yystack.l_mark[0].int32); delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(__int8)*yystack.l_mark[0].int32); }
#line 11305 "asmparse.cpp"
break;
case 412:
#line 1110 "asmparse.y"
	{ PASM->EmitData(NULL, sizeof(float)*yystack.l_mark[0].int32); }
#line 11310 "asmparse.cpp"
break;
case 413:
#line 1111 "asmparse.y"
	{ PASM->EmitData(NULL, sizeof(double)*yystack.l_mark[0].int32); }
#line 11315 "asmparse.cpp"
break;
case 414:
#line 1112 "asmparse.y"
	{ PASM->EmitData(NULL, sizeof(__int64)*yystack.l_mark[0].int32); }
#line 11320 "asmparse.cpp"
break;
case 415:
#line 1113 "asmparse.y"
	{ PASM->EmitData(NULL, sizeof(__int32)*yystack.l_mark[0].int32); }
#line 11325 "asmparse.cpp"
break;
case 416:
#line 1114 "asmparse.y"
	{ PASM->EmitData(NULL, sizeof(__int16)*yystack.l_mark[0].int32); }
#line 11330 "asmparse.cpp"
break;
case 417:
#line 1115 "asmparse.y"
	{ PASM->EmitData(NULL, sizeof(__int8)*yystack.l_mark[0].int32); }
#line 11335 "asmparse.cpp"
break;
case 418:
#line 1119 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R4);
                                                               float f = (float)(*yystack.l_mark[-1].float64);
                                                               yyval.binstr->appendInt32(*((__int32*)&f)); delete yystack.l_mark[-1].float64; }
#line 11342 "asmparse.cpp"
break;
case 419:
#line 1122 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R8);
                                                               yyval.binstr->appendInt64((__int64 *)yystack.l_mark[-1].float64); delete yystack.l_mark[-1].float64; }
#line 11348 "asmparse.cpp"
break;
case 420:
#line 1124 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R4);
                                                               yyval.binstr->appendInt32(yystack.l_mark[-1].int32); }
#line 11354 "asmparse.cpp"
break;
case 421:
#line 1126 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R8);
                                                               yyval.binstr->appendInt64((__int64 *)yystack.l_mark[-1].int64); delete yystack.l_mark[-1].int64; }
#line 11360 "asmparse.cpp"
break;
case 422:
#line 1128 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I8);
                                                               yyval.binstr->appendInt64((__int64 *)yystack.l_mark[-1].int64); delete yystack.l_mark[-1].int64; }
#line 11366 "asmparse.cpp"
break;
case 423:
#line 1130 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I4);
                                                               yyval.binstr->appendInt32(yystack.l_mark[-1].int32); }
#line 11372 "asmparse.cpp"
break;
case 424:
#line 1132 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I2);
                                                               yyval.binstr->appendInt16(yystack.l_mark[-1].int32); }
#line 11378 "asmparse.cpp"
break;
case 425:
#line 1134 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I1);
                                                               yyval.binstr->appendInt8(yystack.l_mark[-1].int32); }
#line 11384 "asmparse.cpp"
break;
case 426:
#line 1136 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U8);
                                                               yyval.binstr->appendInt64((__int64 *)yystack.l_mark[-1].int64); delete yystack.l_mark[-1].int64; }
#line 11390 "asmparse.cpp"
break;
case 427:
#line 1138 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U4);
                                                               yyval.binstr->appendInt32(yystack.l_mark[-1].int32); }
#line 11396 "asmparse.cpp"
break;
case 428:
#line 1140 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U2);
                                                               yyval.binstr->appendInt16(yystack.l_mark[-1].int32); }
#line 11402 "asmparse.cpp"
break;
case 429:
#line 1142 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U1);
                                                               yyval.binstr->appendInt8(yystack.l_mark[-1].int32); }
#line 11408 "asmparse.cpp"
break;
case 430:
#line 1144 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U8);
                                                               yyval.binstr->appendInt64((__int64 *)yystack.l_mark[-1].int64); delete yystack.l_mark[-1].int64; }
#line 11414 "asmparse.cpp"
break;
case 431:
#line 1146 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U4);
                                                               yyval.binstr->appendInt32(yystack.l_mark[-1].int32); }
#line 11420 "asmparse.cpp"
break;
case 432:
#line 1148 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U2);
                                                               yyval.binstr->appendInt16(yystack.l_mark[-1].int32); }
#line 11426 "asmparse.cpp"
break;
case 433:
#line 1150 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U1);
                                                               yyval.binstr->appendInt8(yystack.l_mark[-1].int32); }
#line 11432 "asmparse.cpp"
break;
case 434:
#line 1152 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_CHAR);
                                                               yyval.binstr->appendInt16(yystack.l_mark[-1].int32); }
#line 11438 "asmparse.cpp"
break;
case 435:
#line 1154 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_BOOLEAN);
                                                               yyval.binstr->appendInt8(yystack.l_mark[-1].int32);}
#line 11444 "asmparse.cpp"
break;
case 436:
#line 1156 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_STRING);
                                                               yyval.binstr->append(yystack.l_mark[-1].binstr); delete yystack.l_mark[-1].binstr;}
#line 11450 "asmparse.cpp"
break;
case 437:
#line 1160 "asmparse.y"
	{ bParsingByteArray = TRUE; }
#line 11455 "asmparse.cpp"
break;
case 438:
#line 1163 "asmparse.y"
	{ yyval.binstr = new BinStr(); }
#line 11460 "asmparse.cpp"
break;
case 439:
#line 1164 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[0].binstr; }
#line 11465 "asmparse.cpp"
break;
case 440:
#line 1167 "asmparse.y"
	{ __int8 i = (__int8) yystack.l_mark[0].int32; yyval.binstr = new BinStr(); yyval.binstr->appendInt8(i); }
#line 11470 "asmparse.cpp"
break;
case 441:
#line 1168 "asmparse.y"
	{ __int8 i = (__int8) yystack.l_mark[0].int32; yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->appendInt8(i); }
#line 11475 "asmparse.cpp"
break;
case 442:
#line 1172 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[0].binstr; }
#line 11480 "asmparse.cpp"
break;
case 443:
#line 1173 "asmparse.y"
	{ yyval.binstr = BinStrToUnicode(yystack.l_mark[0].binstr,true); yyval.binstr->insertInt8(ELEMENT_TYPE_STRING);}
#line 11485 "asmparse.cpp"
break;
case 444:
#line 1174 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_CLASS);
                                                               yyval.binstr->appendInt32(0); }
#line 11491 "asmparse.cpp"
break;
case 445:
#line 1179 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[0].binstr; }
#line 11496 "asmparse.cpp"
break;
case 446:
#line 1180 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_STRING); yyval.binstr->appendInt8(0xFF); }
#line 11501 "asmparse.cpp"
break;
case 447:
#line 1181 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_STRING);
                                                               AppendStringWithLength(yyval.binstr,yystack.l_mark[-1].string); delete [] yystack.l_mark[-1].string;}
#line 11507 "asmparse.cpp"
break;
case 448:
#line 1183 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_TYPE);
                                                               AppendStringWithLength(yyval.binstr,yystack.l_mark[-1].string); delete [] yystack.l_mark[-1].string;}
#line 11513 "asmparse.cpp"
break;
case 449:
#line 1185 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_TYPE);
                                                               AppendStringWithLength(yyval.binstr,PASM->ReflectionNotation(yystack.l_mark[-1].token));}
#line 11519 "asmparse.cpp"
break;
case 450:
#line 1187 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_TYPE); yyval.binstr->appendInt8(0xFF); }
#line 11524 "asmparse.cpp"
break;
case 451:
#line 1188 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->insertInt8(SERIALIZATION_TYPE_TAGGED_OBJECT);}
#line 11529 "asmparse.cpp"
break;
case 452:
#line 1190 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->insertInt32(yystack.l_mark[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_R4);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 11536 "asmparse.cpp"
break;
case 453:
#line 1194 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->insertInt32(yystack.l_mark[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_R8);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 11543 "asmparse.cpp"
break;
case 454:
#line 1198 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->insertInt32(yystack.l_mark[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_I8);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 11550 "asmparse.cpp"
break;
case 455:
#line 1202 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->insertInt32(yystack.l_mark[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_I4);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 11557 "asmparse.cpp"
break;
case 456:
#line 1206 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->insertInt32(yystack.l_mark[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_I2);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 11564 "asmparse.cpp"
break;
case 457:
#line 1210 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->insertInt32(yystack.l_mark[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_I1);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 11571 "asmparse.cpp"
break;
case 458:
#line 1214 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->insertInt32(yystack.l_mark[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U8);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 11578 "asmparse.cpp"
break;
case 459:
#line 1218 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->insertInt32(yystack.l_mark[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U4);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 11585 "asmparse.cpp"
break;
case 460:
#line 1222 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->insertInt32(yystack.l_mark[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U2);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 11592 "asmparse.cpp"
break;
case 461:
#line 1226 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->insertInt32(yystack.l_mark[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U1);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 11599 "asmparse.cpp"
break;
case 462:
#line 1230 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->insertInt32(yystack.l_mark[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U8);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 11606 "asmparse.cpp"
break;
case 463:
#line 1234 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->insertInt32(yystack.l_mark[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U4);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 11613 "asmparse.cpp"
break;
case 464:
#line 1238 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->insertInt32(yystack.l_mark[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U2);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 11620 "asmparse.cpp"
break;
case 465:
#line 1242 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->insertInt32(yystack.l_mark[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U1);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 11627 "asmparse.cpp"
break;
case 466:
#line 1246 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->insertInt32(yystack.l_mark[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_CHAR);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 11634 "asmparse.cpp"
break;
case 467:
#line 1250 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->insertInt32(yystack.l_mark[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_BOOLEAN);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 11641 "asmparse.cpp"
break;
case 468:
#line 1254 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->insertInt32(yystack.l_mark[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_STRING);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 11648 "asmparse.cpp"
break;
case 469:
#line 1258 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->insertInt32(yystack.l_mark[-4].int32);
                                                               yyval.binstr->insertInt8(SERIALIZATION_TYPE_TYPE);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 11655 "asmparse.cpp"
break;
case 470:
#line 1262 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->insertInt32(yystack.l_mark[-4].int32);
                                                               yyval.binstr->insertInt8(SERIALIZATION_TYPE_TAGGED_OBJECT);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 11662 "asmparse.cpp"
break;
case 471:
#line 1267 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R4);
                                                               float f = (float)(*yystack.l_mark[-1].float64);
                                                               yyval.binstr->appendInt32(*((__int32*)&f)); delete yystack.l_mark[-1].float64; }
#line 11669 "asmparse.cpp"
break;
case 472:
#line 1270 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R8);
                                                               yyval.binstr->appendInt64((__int64 *)yystack.l_mark[-1].float64); delete yystack.l_mark[-1].float64; }
#line 11675 "asmparse.cpp"
break;
case 473:
#line 1272 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R4);
                                                               yyval.binstr->appendInt32(yystack.l_mark[-1].int32); }
#line 11681 "asmparse.cpp"
break;
case 474:
#line 1274 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R8);
                                                               yyval.binstr->appendInt64((__int64 *)yystack.l_mark[-1].int64); delete yystack.l_mark[-1].int64; }
#line 11687 "asmparse.cpp"
break;
case 475:
#line 1276 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I8);
                                                               yyval.binstr->appendInt64((__int64 *)yystack.l_mark[-1].int64); delete yystack.l_mark[-1].int64; }
#line 11693 "asmparse.cpp"
break;
case 476:
#line 1278 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I4);
                                                               yyval.binstr->appendInt32(yystack.l_mark[-1].int32); }
#line 11699 "asmparse.cpp"
break;
case 477:
#line 1280 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I2);
                                                               yyval.binstr->appendInt16(yystack.l_mark[-1].int32); }
#line 11705 "asmparse.cpp"
break;
case 478:
#line 1282 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I1);
                                                               yyval.binstr->appendInt8(yystack.l_mark[-1].int32); }
#line 11711 "asmparse.cpp"
break;
case 479:
#line 1284 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U8);
                                                               yyval.binstr->appendInt64((__int64 *)yystack.l_mark[-1].int64); delete yystack.l_mark[-1].int64; }
#line 11717 "asmparse.cpp"
break;
case 480:
#line 1286 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U4);
                                                               yyval.binstr->appendInt32(yystack.l_mark[-1].int32); }
#line 11723 "asmparse.cpp"
break;
case 481:
#line 1288 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U2);
                                                               yyval.binstr->appendInt16(yystack.l_mark[-1].int32); }
#line 11729 "asmparse.cpp"
break;
case 482:
#line 1290 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U1);
                                                               yyval.binstr->appendInt8(yystack.l_mark[-1].int32); }
#line 11735 "asmparse.cpp"
break;
case 483:
#line 1292 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U8);
                                                               yyval.binstr->appendInt64((__int64 *)yystack.l_mark[-1].int64); delete yystack.l_mark[-1].int64; }
#line 11741 "asmparse.cpp"
break;
case 484:
#line 1294 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U4);
                                                               yyval.binstr->appendInt32(yystack.l_mark[-1].int32); }
#line 11747 "asmparse.cpp"
break;
case 485:
#line 1296 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U2);
                                                               yyval.binstr->appendInt16(yystack.l_mark[-1].int32); }
#line 11753 "asmparse.cpp"
break;
case 486:
#line 1298 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U1);
                                                               yyval.binstr->appendInt8(yystack.l_mark[-1].int32); }
#line 11759 "asmparse.cpp"
break;
case 487:
#line 1300 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_CHAR);
                                                               yyval.binstr->appendInt16(yystack.l_mark[-1].int32); }
#line 11765 "asmparse.cpp"
break;
case 488:
#line 1302 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_BOOLEAN);
                                                               yyval.binstr->appendInt8(yystack.l_mark[-1].int32);}
#line 11771 "asmparse.cpp"
break;
case 489:
#line 1304 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_STRING);
                                                               corEmitInt(yyval.binstr, yystack.l_mark[-1].binstr->length()); yyval.binstr->append(yystack.l_mark[-1].binstr);
                                                               delete yystack.l_mark[-1].binstr; }
#line 11778 "asmparse.cpp"
break;
case 490:
#line 1307 "asmparse.y"
	{ yyval.binstr = parser->MakeTypeClass(ELEMENT_TYPE_VALUETYPE, yystack.l_mark[-5].token);
                                                                                 corEmitInt(yyval.binstr, yystack.l_mark[-2].binstr->length());
                                                                                 yyval.binstr->append(yystack.l_mark[-2].binstr); delete yystack.l_mark[-2].binstr; }
#line 11785 "asmparse.cpp"
break;
case 491:
#line 1313 "asmparse.y"
	{ yyval.binstr = new BinStr(); }
#line 11790 "asmparse.cpp"
break;
case 492:
#line 1314 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr;
                                                               float f = (float) (*yystack.l_mark[0].float64); yyval.binstr->appendInt32(*((__int32*)&f)); delete yystack.l_mark[0].float64; }
#line 11796 "asmparse.cpp"
break;
case 493:
#line 1316 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr;
                                                               yyval.binstr->appendInt32(yystack.l_mark[0].int32); }
#line 11802 "asmparse.cpp"
break;
case 494:
#line 1320 "asmparse.y"
	{ yyval.binstr = new BinStr(); }
#line 11807 "asmparse.cpp"
break;
case 495:
#line 1321 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr;
                                                               yyval.binstr->appendInt64((__int64 *)yystack.l_mark[0].float64); delete yystack.l_mark[0].float64; }
#line 11813 "asmparse.cpp"
break;
case 496:
#line 1323 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr;
                                                               yyval.binstr->appendInt64((__int64 *)yystack.l_mark[0].int64); delete yystack.l_mark[0].int64; }
#line 11819 "asmparse.cpp"
break;
case 497:
#line 1327 "asmparse.y"
	{ yyval.binstr = new BinStr(); }
#line 11824 "asmparse.cpp"
break;
case 498:
#line 1328 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr;
                                                               yyval.binstr->appendInt64((__int64 *)yystack.l_mark[0].int64); delete yystack.l_mark[0].int64; }
#line 11830 "asmparse.cpp"
break;
case 499:
#line 1332 "asmparse.y"
	{ yyval.binstr = new BinStr(); }
#line 11835 "asmparse.cpp"
break;
case 500:
#line 1333 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->appendInt32(yystack.l_mark[0].int32);}
#line 11840 "asmparse.cpp"
break;
case 501:
#line 1336 "asmparse.y"
	{ yyval.binstr = new BinStr(); }
#line 11845 "asmparse.cpp"
break;
case 502:
#line 1337 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->appendInt16(yystack.l_mark[0].int32);}
#line 11850 "asmparse.cpp"
break;
case 503:
#line 1340 "asmparse.y"
	{ yyval.binstr = new BinStr(); }
#line 11855 "asmparse.cpp"
break;
case 504:
#line 1341 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->appendInt8(yystack.l_mark[0].int32); }
#line 11860 "asmparse.cpp"
break;
case 505:
#line 1344 "asmparse.y"
	{ yyval.binstr = new BinStr(); }
#line 11865 "asmparse.cpp"
break;
case 506:
#line 1345 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr;
                                                               yyval.binstr->appendInt8(yystack.l_mark[0].int32);}
#line 11871 "asmparse.cpp"
break;
case 507:
#line 1349 "asmparse.y"
	{ yyval.binstr = new BinStr(); }
#line 11876 "asmparse.cpp"
break;
case 508:
#line 1350 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->appendInt8(0xFF); }
#line 11881 "asmparse.cpp"
break;
case 509:
#line 1351 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr;
                                                               AppendStringWithLength(yyval.binstr,yystack.l_mark[0].string); delete [] yystack.l_mark[0].string;}
#line 11887 "asmparse.cpp"
break;
case 510:
#line 1355 "asmparse.y"
	{ yyval.binstr = new BinStr(); }
#line 11892 "asmparse.cpp"
break;
case 511:
#line 1356 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->appendInt8(0xFF); }
#line 11897 "asmparse.cpp"
break;
case 512:
#line 1357 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-2].binstr;
                                                               AppendStringWithLength(yyval.binstr,yystack.l_mark[0].string); delete [] yystack.l_mark[0].string;}
#line 11903 "asmparse.cpp"
break;
case 513:
#line 1359 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr;
                                                               AppendStringWithLength(yyval.binstr,PASM->ReflectionNotation(yystack.l_mark[0].token));}
#line 11909 "asmparse.cpp"
break;
case 514:
#line 1363 "asmparse.y"
	{ yyval.binstr = new BinStr(); }
#line 11914 "asmparse.cpp"
break;
case 515:
#line 1364 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->append(yystack.l_mark[0].binstr); delete yystack.l_mark[0].binstr; }
#line 11919 "asmparse.cpp"
break;
case 516:
#line 1368 "asmparse.y"
	{ parser->m_ANSFirst.PUSH(PASM->m_firstArgName);
                                                               parser->m_ANSLast.PUSH(PASM->m_lastArgName);
                                                               PASM->m_firstArgName = NULL;
                                                               PASM->m_lastArgName = NULL; }
#line 11927 "asmparse.cpp"
break;
case 517:
#line 1374 "asmparse.y"
	{ yyval.instr = SetupInstr(yystack.l_mark[0].opcode); }
#line 11932 "asmparse.cpp"
break;
case 518:
#line 1377 "asmparse.y"
	{ yyval.instr = SetupInstr(yystack.l_mark[0].opcode); }
#line 11937 "asmparse.cpp"
break;
case 519:
#line 1380 "asmparse.y"
	{ yyval.instr = SetupInstr(yystack.l_mark[0].opcode); }
#line 11942 "asmparse.cpp"
break;
case 520:
#line 1383 "asmparse.y"
	{ yyval.instr = SetupInstr(yystack.l_mark[0].opcode); }
#line 11947 "asmparse.cpp"
break;
case 521:
#line 1386 "asmparse.y"
	{ yyval.instr = SetupInstr(yystack.l_mark[0].opcode); }
#line 11952 "asmparse.cpp"
break;
case 522:
#line 1389 "asmparse.y"
	{ yyval.instr = SetupInstr(yystack.l_mark[0].opcode); }
#line 11957 "asmparse.cpp"
break;
case 523:
#line 1392 "asmparse.y"
	{ yyval.instr = SetupInstr(yystack.l_mark[0].opcode);
                                                               if((!PASM->OnErrGo)&&
                                                               ((yystack.l_mark[0].opcode == CEE_NEWOBJ)||
                                                                (yystack.l_mark[0].opcode == CEE_CALLVIRT)))
                                                                  iCallConv = IMAGE_CEE_CS_CALLCONV_HASTHIS;
                                                             }
#line 11967 "asmparse.cpp"
break;
case 524:
#line 1400 "asmparse.y"
	{ yyval.instr = SetupInstr(yystack.l_mark[0].opcode); }
#line 11972 "asmparse.cpp"
break;
case 525:
#line 1403 "asmparse.y"
	{ yyval.instr = SetupInstr(yystack.l_mark[0].opcode); }
#line 11977 "asmparse.cpp"
break;
case 526:
#line 1406 "asmparse.y"
	{ yyval.instr = SetupInstr(yystack.l_mark[0].opcode); }
#line 11982 "asmparse.cpp"
break;
case 527:
#line 1409 "asmparse.y"
	{ yyval.instr = SetupInstr(yystack.l_mark[0].opcode); }
#line 11987 "asmparse.cpp"
break;
case 528:
#line 1412 "asmparse.y"
	{ yyval.instr = SetupInstr(yystack.l_mark[0].opcode); iOpcodeLen = PASM->OpcodeLen(yyval.instr); }
#line 11992 "asmparse.cpp"
break;
case 529:
#line 1415 "asmparse.y"
	{ yyval.instr = SetupInstr(yystack.l_mark[0].opcode); }
#line 11997 "asmparse.cpp"
break;
case 530:
#line 1418 "asmparse.y"
	{ yyval.instr = yystack.l_mark[-1].instr; bParsingByteArray = TRUE; }
#line 12002 "asmparse.cpp"
break;
case 531:
#line 1422 "asmparse.y"
	{ PASM->EmitOpcode(yystack.l_mark[0].instr); }
#line 12007 "asmparse.cpp"
break;
case 532:
#line 1423 "asmparse.y"
	{ PASM->EmitInstrVar(yystack.l_mark[-1].instr, yystack.l_mark[0].int32); }
#line 12012 "asmparse.cpp"
break;
case 533:
#line 1424 "asmparse.y"
	{ PASM->EmitInstrVarByName(yystack.l_mark[-1].instr, yystack.l_mark[0].string); }
#line 12017 "asmparse.cpp"
break;
case 534:
#line 1425 "asmparse.y"
	{ PASM->EmitInstrI(yystack.l_mark[-1].instr, yystack.l_mark[0].int32); }
#line 12022 "asmparse.cpp"
break;
case 535:
#line 1426 "asmparse.y"
	{ PASM->EmitInstrI8(yystack.l_mark[-1].instr, yystack.l_mark[0].int64); }
#line 12027 "asmparse.cpp"
break;
case 536:
#line 1427 "asmparse.y"
	{ PASM->EmitInstrR(yystack.l_mark[-1].instr, yystack.l_mark[0].float64); delete (yystack.l_mark[0].float64);}
#line 12032 "asmparse.cpp"
break;
case 537:
#line 1428 "asmparse.y"
	{ double f = (double) (*yystack.l_mark[0].int64); PASM->EmitInstrR(yystack.l_mark[-1].instr, &f); }
#line 12037 "asmparse.cpp"
break;
case 538:
#line 1429 "asmparse.y"
	{ unsigned L = yystack.l_mark[-1].binstr->length();
                                                               FAIL_UNLESS(L >= sizeof(float), ("%d hexbytes, must be at least %d\n",
                                                                           L,sizeof(float)));
                                                               if(L < sizeof(float)) {YYERROR; }
                                                               else {
                                                                   double f = (L >= sizeof(double)) ? *((double *)(yystack.l_mark[-1].binstr->ptr()))
                                                                                    : (double)(*(float *)(yystack.l_mark[-1].binstr->ptr()));
                                                                   PASM->EmitInstrR(yystack.l_mark[-2].instr,&f); }
                                                               delete yystack.l_mark[-1].binstr; }
#line 12050 "asmparse.cpp"
break;
case 539:
#line 1438 "asmparse.y"
	{ PASM->EmitInstrBrOffset(yystack.l_mark[-1].instr, yystack.l_mark[0].int32); }
#line 12055 "asmparse.cpp"
break;
case 540:
#line 1439 "asmparse.y"
	{ PASM->EmitInstrBrTarget(yystack.l_mark[-1].instr, yystack.l_mark[0].string); }
#line 12060 "asmparse.cpp"
break;
case 541:
#line 1441 "asmparse.y"
	{ PASM->SetMemberRefFixup(yystack.l_mark[0].token,PASM->OpcodeLen(yystack.l_mark[-1].instr));
                                                               PASM->EmitInstrI(yystack.l_mark[-1].instr,yystack.l_mark[0].token);
                                                               PASM->m_tkCurrentCVOwner = yystack.l_mark[0].token;
                                                               PASM->m_pCustomDescrList = NULL;
                                                               iCallConv = 0;
                                                             }
#line 12070 "asmparse.cpp"
break;
case 542:
#line 1448 "asmparse.y"
	{ yystack.l_mark[-3].binstr->insertInt8(IMAGE_CEE_CS_CALLCONV_FIELD);
                                                               mdToken mr = PASM->MakeMemberRef(yystack.l_mark[-2].token, yystack.l_mark[0].string, yystack.l_mark[-3].binstr);
                                                               PASM->SetMemberRefFixup(mr, PASM->OpcodeLen(yystack.l_mark[-4].instr));
                                                               PASM->EmitInstrI(yystack.l_mark[-4].instr,mr);
                                                               PASM->m_tkCurrentCVOwner = mr;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             }
#line 12081 "asmparse.cpp"
break;
case 543:
#line 1456 "asmparse.y"
	{ yystack.l_mark[-1].binstr->insertInt8(IMAGE_CEE_CS_CALLCONV_FIELD);
                                                               mdToken mr = PASM->MakeMemberRef(mdTokenNil, yystack.l_mark[0].string, yystack.l_mark[-1].binstr);
                                                               PASM->SetMemberRefFixup(mr, PASM->OpcodeLen(yystack.l_mark[-2].instr));
                                                               PASM->EmitInstrI(yystack.l_mark[-2].instr,mr);
                                                               PASM->m_tkCurrentCVOwner = mr;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             }
#line 12092 "asmparse.cpp"
break;
case 544:
#line 1463 "asmparse.y"
	{ mdToken mr = yystack.l_mark[0].token;
                                                               PASM->SetMemberRefFixup(mr, PASM->OpcodeLen(yystack.l_mark[-1].instr));
                                                               PASM->EmitInstrI(yystack.l_mark[-1].instr,mr);
                                                               PASM->m_tkCurrentCVOwner = mr;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             }
#line 12102 "asmparse.cpp"
break;
case 545:
#line 1469 "asmparse.y"
	{ mdToken mr = yystack.l_mark[0].tdd->m_tkTypeSpec;
                                                               PASM->SetMemberRefFixup(mr, PASM->OpcodeLen(yystack.l_mark[-1].instr));
                                                               PASM->EmitInstrI(yystack.l_mark[-1].instr,mr);
                                                               PASM->m_tkCurrentCVOwner = mr;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             }
#line 12112 "asmparse.cpp"
break;
case 546:
#line 1475 "asmparse.y"
	{ mdToken mr = yystack.l_mark[0].tdd->m_tkTypeSpec;
                                                               PASM->SetMemberRefFixup(mr, PASM->OpcodeLen(yystack.l_mark[-1].instr));
                                                               PASM->EmitInstrI(yystack.l_mark[-1].instr,mr);
                                                               PASM->m_tkCurrentCVOwner = mr;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             }
#line 12122 "asmparse.cpp"
break;
case 547:
#line 1481 "asmparse.y"
	{ PASM->EmitInstrI(yystack.l_mark[-1].instr, yystack.l_mark[0].token);
                                                               PASM->m_tkCurrentCVOwner = yystack.l_mark[0].token;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             }
#line 12130 "asmparse.cpp"
break;
case 548:
#line 1485 "asmparse.y"
	{ PASM->EmitInstrStringLiteral(yystack.l_mark[-1].instr, yystack.l_mark[0].binstr,TRUE); }
#line 12135 "asmparse.cpp"
break;
case 549:
#line 1487 "asmparse.y"
	{ PASM->EmitInstrStringLiteral(yystack.l_mark[-4].instr, yystack.l_mark[-1].binstr,FALSE); }
#line 12140 "asmparse.cpp"
break;
case 550:
#line 1489 "asmparse.y"
	{ PASM->EmitInstrStringLiteral(yystack.l_mark[-3].instr, yystack.l_mark[-1].binstr,FALSE,TRUE); }
#line 12145 "asmparse.cpp"
break;
case 551:
#line 1491 "asmparse.y"
	{ PASM->EmitInstrSig(yystack.l_mark[-5].instr, parser->MakeSig(yystack.l_mark[-4].int32, yystack.l_mark[-3].binstr, yystack.l_mark[-1].binstr));
                                                               PASM->ResetArgNameList();
                                                             }
#line 12152 "asmparse.cpp"
break;
case 552:
#line 1495 "asmparse.y"
	{ PASM->EmitInstrI(yystack.l_mark[-1].instr,yystack.l_mark[0].token);
                                                               PASM->m_tkCurrentCVOwner = yystack.l_mark[0].token;
                                                               PASM->m_pCustomDescrList = NULL;
                                                               iOpcodeLen = 0;
                                                             }
#line 12161 "asmparse.cpp"
break;
case 553:
#line 1500 "asmparse.y"
	{ PASM->EmitInstrSwitch(yystack.l_mark[-3].instr, yystack.l_mark[-1].labels); }
#line 12166 "asmparse.cpp"
break;
case 554:
#line 1503 "asmparse.y"
	{ yyval.labels = 0; }
#line 12171 "asmparse.cpp"
break;
case 555:
#line 1504 "asmparse.y"
	{ yyval.labels = new Labels(yystack.l_mark[-2].string, yystack.l_mark[0].labels, TRUE); }
#line 12176 "asmparse.cpp"
break;
case 556:
#line 1505 "asmparse.y"
	{ yyval.labels = new Labels((char *)(UINT_PTR)yystack.l_mark[-2].int32, yystack.l_mark[0].labels, FALSE); }
#line 12181 "asmparse.cpp"
break;
case 557:
#line 1506 "asmparse.y"
	{ yyval.labels = new Labels(yystack.l_mark[0].string, NULL, TRUE); }
#line 12186 "asmparse.cpp"
break;
case 558:
#line 1507 "asmparse.y"
	{ yyval.labels = new Labels((char *)(UINT_PTR)yystack.l_mark[0].int32, NULL, FALSE); }
#line 12191 "asmparse.cpp"
break;
case 559:
#line 1511 "asmparse.y"
	{ yyval.binstr = NULL; }
#line 12196 "asmparse.cpp"
break;
case 560:
#line 1512 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; }
#line 12201 "asmparse.cpp"
break;
case 561:
#line 1515 "asmparse.y"
	{ yyval.binstr = NULL; }
#line 12206 "asmparse.cpp"
break;
case 562:
#line 1516 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[0].binstr; }
#line 12211 "asmparse.cpp"
break;
case 563:
#line 1519 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[0].binstr; }
#line 12216 "asmparse.cpp"
break;
case 564:
#line 1520 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-2].binstr; yyval.binstr->append(yystack.l_mark[0].binstr); delete yystack.l_mark[0].binstr; }
#line 12221 "asmparse.cpp"
break;
case 565:
#line 1524 "asmparse.y"
	{ yyval.binstr = new BinStr(); }
#line 12226 "asmparse.cpp"
break;
case 566:
#line 1525 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[0].binstr;}
#line 12231 "asmparse.cpp"
break;
case 567:
#line 1528 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[0].binstr; }
#line 12236 "asmparse.cpp"
break;
case 568:
#line 1529 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-2].binstr; yyval.binstr->append(yystack.l_mark[0].binstr); delete yystack.l_mark[0].binstr; }
#line 12241 "asmparse.cpp"
break;
case 569:
#line 1532 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_SENTINEL); }
#line 12246 "asmparse.cpp"
break;
case 570:
#line 1533 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->append(yystack.l_mark[-1].binstr); PASM->addArgName(NULL, yystack.l_mark[-1].binstr, yystack.l_mark[0].binstr, yystack.l_mark[-2].int32); }
#line 12251 "asmparse.cpp"
break;
case 571:
#line 1534 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->append(yystack.l_mark[-2].binstr); PASM->addArgName(yystack.l_mark[0].string, yystack.l_mark[-2].binstr, yystack.l_mark[-1].binstr, yystack.l_mark[-3].int32);}
#line 12256 "asmparse.cpp"
break;
case 572:
#line 1538 "asmparse.y"
	{ yyval.token = PASM->ResolveClassRef(PASM->GetAsmRef(yystack.l_mark[-2].string), yystack.l_mark[0].string, NULL); delete[] yystack.l_mark[-2].string;}
#line 12261 "asmparse.cpp"
break;
case 573:
#line 1539 "asmparse.y"
	{ yyval.token = PASM->ResolveClassRef(yystack.l_mark[-2].token, yystack.l_mark[0].string, NULL); }
#line 12266 "asmparse.cpp"
break;
case 574:
#line 1540 "asmparse.y"
	{ yyval.token = PASM->ResolveClassRef(mdTokenNil, yystack.l_mark[0].string, NULL); }
#line 12271 "asmparse.cpp"
break;
case 575:
#line 1541 "asmparse.y"
	{ yyval.token = PASM->ResolveClassRef(PASM->GetModRef(yystack.l_mark[-2].string),yystack.l_mark[0].string, NULL); delete[] yystack.l_mark[-2].string;}
#line 12276 "asmparse.cpp"
break;
case 576:
#line 1542 "asmparse.y"
	{ yyval.token = PASM->ResolveClassRef(1,yystack.l_mark[0].string,NULL); }
#line 12281 "asmparse.cpp"
break;
case 577:
#line 1543 "asmparse.y"
	{ yyval.token = yystack.l_mark[0].token; }
#line 12286 "asmparse.cpp"
break;
case 578:
#line 1544 "asmparse.y"
	{ yyval.token = yystack.l_mark[0].tdd->m_tkTypeSpec; }
#line 12291 "asmparse.cpp"
break;
case 579:
#line 1545 "asmparse.y"
	{ if(PASM->m_pCurClass != NULL) yyval.token = PASM->m_pCurClass->m_cl;
                                                                else { yyval.token = 0; PASM->report->error(".this outside class scope\n"); }
                                                              }
#line 12298 "asmparse.cpp"
break;
case 580:
#line 1548 "asmparse.y"
	{ if(PASM->m_pCurClass != NULL) {
                                                                  yyval.token = PASM->m_pCurClass->m_crExtends;
                                                                  if(RidFromToken(yyval.token) == 0)
                                                                    PASM->report->error(".base undefined\n");
                                                                } else { yyval.token = 0; PASM->report->error(".base outside class scope\n"); }
                                                              }
#line 12308 "asmparse.cpp"
break;
case 581:
#line 1554 "asmparse.y"
	{ if(PASM->m_pCurClass != NULL) {
                                                                  if(PASM->m_pCurClass->m_pEncloser != NULL) yyval.token = PASM->m_pCurClass->m_pEncloser->m_cl;
                                                                  else { yyval.token = 0; PASM->report->error(".nester undefined\n"); }
                                                                } else { yyval.token = 0; PASM->report->error(".nester outside class scope\n"); }
                                                              }
#line 12317 "asmparse.cpp"
break;
case 582:
#line 1561 "asmparse.y"
	{ yyval.string = yystack.l_mark[0].string; }
#line 12322 "asmparse.cpp"
break;
case 583:
#line 1562 "asmparse.y"
	{ yyval.string = newStringWDel(yystack.l_mark[-2].string, NESTING_SEP, yystack.l_mark[0].string); }
#line 12327 "asmparse.cpp"
break;
case 584:
#line 1565 "asmparse.y"
	{ yyval.token = yystack.l_mark[0].token;}
#line 12332 "asmparse.cpp"
break;
case 585:
#line 1566 "asmparse.y"
	{ yyval.token = PASM->GetAsmRef(yystack.l_mark[-1].string); delete[] yystack.l_mark[-1].string;}
#line 12337 "asmparse.cpp"
break;
case 586:
#line 1567 "asmparse.y"
	{ yyval.token = PASM->GetModRef(yystack.l_mark[-1].string); delete[] yystack.l_mark[-1].string;}
#line 12342 "asmparse.cpp"
break;
case 587:
#line 1568 "asmparse.y"
	{ yyval.token = PASM->ResolveTypeSpec(yystack.l_mark[0].binstr); }
#line 12347 "asmparse.cpp"
break;
case 588:
#line 1572 "asmparse.y"
	{ yyval.binstr = new BinStr(); }
#line 12352 "asmparse.cpp"
break;
case 589:
#line 1574 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_CUSTOMMARSHALER);
                                                                corEmitInt(yyval.binstr,yystack.l_mark[-7].binstr->length()); yyval.binstr->append(yystack.l_mark[-7].binstr);
                                                                corEmitInt(yyval.binstr,yystack.l_mark[-5].binstr->length()); yyval.binstr->append(yystack.l_mark[-5].binstr);
                                                                corEmitInt(yyval.binstr,yystack.l_mark[-3].binstr->length()); yyval.binstr->append(yystack.l_mark[-3].binstr);
                                                                corEmitInt(yyval.binstr,yystack.l_mark[-1].binstr->length()); yyval.binstr->append(yystack.l_mark[-1].binstr);
                                                                PASM->report->warn("Deprecated 4-string form of custom marshaler, first two strings ignored\n");}
#line 12362 "asmparse.cpp"
break;
case 590:
#line 1581 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_CUSTOMMARSHALER);
                                                                corEmitInt(yyval.binstr,0);
                                                                corEmitInt(yyval.binstr,0);
                                                                corEmitInt(yyval.binstr,yystack.l_mark[-3].binstr->length()); yyval.binstr->append(yystack.l_mark[-3].binstr);
                                                                corEmitInt(yyval.binstr,yystack.l_mark[-1].binstr->length()); yyval.binstr->append(yystack.l_mark[-1].binstr); }
#line 12371 "asmparse.cpp"
break;
case 591:
#line 1586 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_FIXEDSYSSTRING);
                                                                corEmitInt(yyval.binstr,yystack.l_mark[-1].int32); }
#line 12377 "asmparse.cpp"
break;
case 592:
#line 1589 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_FIXEDARRAY);
                                                                corEmitInt(yyval.binstr,yystack.l_mark[-2].int32); yyval.binstr->append(yystack.l_mark[0].binstr); }
#line 12383 "asmparse.cpp"
break;
case 593:
#line 1591 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_VARIANT);
                                                                PASM->report->warn("Deprecated native type 'variant'\n"); }
#line 12389 "asmparse.cpp"
break;
case 594:
#line 1593 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_CURRENCY); }
#line 12394 "asmparse.cpp"
break;
case 595:
#line 1594 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_SYSCHAR);
                                                                PASM->report->warn("Deprecated native type 'syschar'\n"); }
#line 12400 "asmparse.cpp"
break;
case 596:
#line 1596 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_VOID);
                                                                PASM->report->warn("Deprecated native type 'void'\n"); }
#line 12406 "asmparse.cpp"
break;
case 597:
#line 1598 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_BOOLEAN); }
#line 12411 "asmparse.cpp"
break;
case 598:
#line 1599 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_I1); }
#line 12416 "asmparse.cpp"
break;
case 599:
#line 1600 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_I2); }
#line 12421 "asmparse.cpp"
break;
case 600:
#line 1601 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_I4); }
#line 12426 "asmparse.cpp"
break;
case 601:
#line 1602 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_I8); }
#line 12431 "asmparse.cpp"
break;
case 602:
#line 1603 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_R4); }
#line 12436 "asmparse.cpp"
break;
case 603:
#line 1604 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_R8); }
#line 12441 "asmparse.cpp"
break;
case 604:
#line 1605 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_ERROR); }
#line 12446 "asmparse.cpp"
break;
case 605:
#line 1606 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U1); }
#line 12451 "asmparse.cpp"
break;
case 606:
#line 1607 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U2); }
#line 12456 "asmparse.cpp"
break;
case 607:
#line 1608 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U4); }
#line 12461 "asmparse.cpp"
break;
case 608:
#line 1609 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U8); }
#line 12466 "asmparse.cpp"
break;
case 609:
#line 1610 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U1); }
#line 12471 "asmparse.cpp"
break;
case 610:
#line 1611 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U2); }
#line 12476 "asmparse.cpp"
break;
case 611:
#line 1612 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U4); }
#line 12481 "asmparse.cpp"
break;
case 612:
#line 1613 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U8); }
#line 12486 "asmparse.cpp"
break;
case 613:
#line 1614 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->insertInt8(NATIVE_TYPE_PTR);
                                                                PASM->report->warn("Deprecated native type '*'\n"); }
#line 12492 "asmparse.cpp"
break;
case 614:
#line 1616 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-2].binstr; if(yyval.binstr->length()==0) yyval.binstr->appendInt8(NATIVE_TYPE_MAX);
                                                                yyval.binstr->insertInt8(NATIVE_TYPE_ARRAY); }
#line 12498 "asmparse.cpp"
break;
case 615:
#line 1618 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-3].binstr; if(yyval.binstr->length()==0) yyval.binstr->appendInt8(NATIVE_TYPE_MAX);
                                                                yyval.binstr->insertInt8(NATIVE_TYPE_ARRAY);
                                                                corEmitInt(yyval.binstr,0);
                                                                corEmitInt(yyval.binstr,yystack.l_mark[-1].int32);
                                                                corEmitInt(yyval.binstr,0); }
#line 12507 "asmparse.cpp"
break;
case 616:
#line 1623 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-5].binstr; if(yyval.binstr->length()==0) yyval.binstr->appendInt8(NATIVE_TYPE_MAX);
                                                                yyval.binstr->insertInt8(NATIVE_TYPE_ARRAY);
                                                                corEmitInt(yyval.binstr,yystack.l_mark[-1].int32);
                                                                corEmitInt(yyval.binstr,yystack.l_mark[-3].int32);
                                                                corEmitInt(yyval.binstr,ntaSizeParamIndexSpecified); }
#line 12516 "asmparse.cpp"
break;
case 617:
#line 1628 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-4].binstr; if(yyval.binstr->length()==0) yyval.binstr->appendInt8(NATIVE_TYPE_MAX);
                                                                yyval.binstr->insertInt8(NATIVE_TYPE_ARRAY);
                                                                corEmitInt(yyval.binstr,yystack.l_mark[-1].int32); }
#line 12523 "asmparse.cpp"
break;
case 618:
#line 1631 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_DECIMAL);
                                                                PASM->report->warn("Deprecated native type 'decimal'\n"); }
#line 12529 "asmparse.cpp"
break;
case 619:
#line 1633 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_DATE);
                                                                PASM->report->warn("Deprecated native type 'date'\n"); }
#line 12535 "asmparse.cpp"
break;
case 620:
#line 1635 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_BSTR); }
#line 12540 "asmparse.cpp"
break;
case 621:
#line 1636 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_LPSTR); }
#line 12545 "asmparse.cpp"
break;
case 622:
#line 1637 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_LPWSTR); }
#line 12550 "asmparse.cpp"
break;
case 623:
#line 1638 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_LPTSTR); }
#line 12555 "asmparse.cpp"
break;
case 624:
#line 1639 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_OBJECTREF);
                                                                PASM->report->warn("Deprecated native type 'objectref'\n"); }
#line 12561 "asmparse.cpp"
break;
case 625:
#line 1641 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_IUNKNOWN);
                                                                if(yystack.l_mark[0].int32 != -1) corEmitInt(yyval.binstr,yystack.l_mark[0].int32); }
#line 12567 "asmparse.cpp"
break;
case 626:
#line 1643 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_IDISPATCH);
                                                                if(yystack.l_mark[0].int32 != -1) corEmitInt(yyval.binstr,yystack.l_mark[0].int32); }
#line 12573 "asmparse.cpp"
break;
case 627:
#line 1645 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_STRUCT); }
#line 12578 "asmparse.cpp"
break;
case 628:
#line 1646 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_INTF);
                                                                if(yystack.l_mark[0].int32 != -1) corEmitInt(yyval.binstr,yystack.l_mark[0].int32); }
#line 12584 "asmparse.cpp"
break;
case 629:
#line 1648 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_SAFEARRAY);
                                                                corEmitInt(yyval.binstr,yystack.l_mark[0].int32);
                                                                corEmitInt(yyval.binstr,0);}
#line 12591 "asmparse.cpp"
break;
case 630:
#line 1651 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_SAFEARRAY);
                                                                corEmitInt(yyval.binstr,yystack.l_mark[-2].int32);
                                                                corEmitInt(yyval.binstr,yystack.l_mark[0].binstr->length()); yyval.binstr->append(yystack.l_mark[0].binstr); }
#line 12598 "asmparse.cpp"
break;
case 631:
#line 1655 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_INT); }
#line 12603 "asmparse.cpp"
break;
case 632:
#line 1656 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_UINT); }
#line 12608 "asmparse.cpp"
break;
case 633:
#line 1657 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_UINT); }
#line 12613 "asmparse.cpp"
break;
case 634:
#line 1658 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_NESTEDSTRUCT);
                                                                PASM->report->warn("Deprecated native type 'nested struct'\n"); }
#line 12619 "asmparse.cpp"
break;
case 635:
#line 1660 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_BYVALSTR); }
#line 12624 "asmparse.cpp"
break;
case 636:
#line 1661 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_ANSIBSTR); }
#line 12629 "asmparse.cpp"
break;
case 637:
#line 1662 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_TBSTR); }
#line 12634 "asmparse.cpp"
break;
case 638:
#line 1663 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_VARIANTBOOL); }
#line 12639 "asmparse.cpp"
break;
case 639:
#line 1664 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_FUNC); }
#line 12644 "asmparse.cpp"
break;
case 640:
#line 1665 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_ASANY); }
#line 12649 "asmparse.cpp"
break;
case 641:
#line 1666 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_LPSTRUCT); }
#line 12654 "asmparse.cpp"
break;
case 642:
#line 1667 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->append(yystack.l_mark[0].tdd->m_pbsTypeSpec); }
#line 12659 "asmparse.cpp"
break;
case 643:
#line 1670 "asmparse.y"
	{ yyval.int32 = -1; }
#line 12664 "asmparse.cpp"
break;
case 644:
#line 1671 "asmparse.y"
	{ yyval.int32 = yystack.l_mark[-1].int32; }
#line 12669 "asmparse.cpp"
break;
case 645:
#line 1674 "asmparse.y"
	{ yyval.int32 = VT_EMPTY; }
#line 12674 "asmparse.cpp"
break;
case 646:
#line 1675 "asmparse.y"
	{ yyval.int32 = VT_NULL; }
#line 12679 "asmparse.cpp"
break;
case 647:
#line 1676 "asmparse.y"
	{ yyval.int32 = VT_VARIANT; }
#line 12684 "asmparse.cpp"
break;
case 648:
#line 1677 "asmparse.y"
	{ yyval.int32 = VT_CY; }
#line 12689 "asmparse.cpp"
break;
case 649:
#line 1678 "asmparse.y"
	{ yyval.int32 = VT_VOID; }
#line 12694 "asmparse.cpp"
break;
case 650:
#line 1679 "asmparse.y"
	{ yyval.int32 = VT_BOOL; }
#line 12699 "asmparse.cpp"
break;
case 651:
#line 1680 "asmparse.y"
	{ yyval.int32 = VT_I1; }
#line 12704 "asmparse.cpp"
break;
case 652:
#line 1681 "asmparse.y"
	{ yyval.int32 = VT_I2; }
#line 12709 "asmparse.cpp"
break;
case 653:
#line 1682 "asmparse.y"
	{ yyval.int32 = VT_I4; }
#line 12714 "asmparse.cpp"
break;
case 654:
#line 1683 "asmparse.y"
	{ yyval.int32 = VT_I8; }
#line 12719 "asmparse.cpp"
break;
case 655:
#line 1684 "asmparse.y"
	{ yyval.int32 = VT_R4; }
#line 12724 "asmparse.cpp"
break;
case 656:
#line 1685 "asmparse.y"
	{ yyval.int32 = VT_R8; }
#line 12729 "asmparse.cpp"
break;
case 657:
#line 1686 "asmparse.y"
	{ yyval.int32 = VT_UI1; }
#line 12734 "asmparse.cpp"
break;
case 658:
#line 1687 "asmparse.y"
	{ yyval.int32 = VT_UI2; }
#line 12739 "asmparse.cpp"
break;
case 659:
#line 1688 "asmparse.y"
	{ yyval.int32 = VT_UI4; }
#line 12744 "asmparse.cpp"
break;
case 660:
#line 1689 "asmparse.y"
	{ yyval.int32 = VT_UI8; }
#line 12749 "asmparse.cpp"
break;
case 661:
#line 1690 "asmparse.y"
	{ yyval.int32 = VT_UI1; }
#line 12754 "asmparse.cpp"
break;
case 662:
#line 1691 "asmparse.y"
	{ yyval.int32 = VT_UI2; }
#line 12759 "asmparse.cpp"
break;
case 663:
#line 1692 "asmparse.y"
	{ yyval.int32 = VT_UI4; }
#line 12764 "asmparse.cpp"
break;
case 664:
#line 1693 "asmparse.y"
	{ yyval.int32 = VT_UI8; }
#line 12769 "asmparse.cpp"
break;
case 665:
#line 1694 "asmparse.y"
	{ yyval.int32 = VT_PTR; }
#line 12774 "asmparse.cpp"
break;
case 666:
#line 1695 "asmparse.y"
	{ yyval.int32 = yystack.l_mark[-2].int32 | VT_ARRAY; }
#line 12779 "asmparse.cpp"
break;
case 667:
#line 1696 "asmparse.y"
	{ yyval.int32 = yystack.l_mark[-1].int32 | VT_VECTOR; }
#line 12784 "asmparse.cpp"
break;
case 668:
#line 1697 "asmparse.y"
	{ yyval.int32 = yystack.l_mark[-1].int32 | VT_BYREF; }
#line 12789 "asmparse.cpp"
break;
case 669:
#line 1698 "asmparse.y"
	{ yyval.int32 = VT_DECIMAL; }
#line 12794 "asmparse.cpp"
break;
case 670:
#line 1699 "asmparse.y"
	{ yyval.int32 = VT_DATE; }
#line 12799 "asmparse.cpp"
break;
case 671:
#line 1700 "asmparse.y"
	{ yyval.int32 = VT_BSTR; }
#line 12804 "asmparse.cpp"
break;
case 672:
#line 1701 "asmparse.y"
	{ yyval.int32 = VT_LPSTR; }
#line 12809 "asmparse.cpp"
break;
case 673:
#line 1702 "asmparse.y"
	{ yyval.int32 = VT_LPWSTR; }
#line 12814 "asmparse.cpp"
break;
case 674:
#line 1703 "asmparse.y"
	{ yyval.int32 = VT_UNKNOWN; }
#line 12819 "asmparse.cpp"
break;
case 675:
#line 1704 "asmparse.y"
	{ yyval.int32 = VT_DISPATCH; }
#line 12824 "asmparse.cpp"
break;
case 676:
#line 1705 "asmparse.y"
	{ yyval.int32 = VT_SAFEARRAY; }
#line 12829 "asmparse.cpp"
break;
case 677:
#line 1706 "asmparse.y"
	{ yyval.int32 = VT_INT; }
#line 12834 "asmparse.cpp"
break;
case 678:
#line 1707 "asmparse.y"
	{ yyval.int32 = VT_UINT; }
#line 12839 "asmparse.cpp"
break;
case 679:
#line 1708 "asmparse.y"
	{ yyval.int32 = VT_UINT; }
#line 12844 "asmparse.cpp"
break;
case 680:
#line 1709 "asmparse.y"
	{ yyval.int32 = VT_ERROR; }
#line 12849 "asmparse.cpp"
break;
case 681:
#line 1710 "asmparse.y"
	{ yyval.int32 = VT_HRESULT; }
#line 12854 "asmparse.cpp"
break;
case 682:
#line 1711 "asmparse.y"
	{ yyval.int32 = VT_CARRAY; }
#line 12859 "asmparse.cpp"
break;
case 683:
#line 1712 "asmparse.y"
	{ yyval.int32 = VT_USERDEFINED; }
#line 12864 "asmparse.cpp"
break;
case 684:
#line 1713 "asmparse.y"
	{ yyval.int32 = VT_RECORD; }
#line 12869 "asmparse.cpp"
break;
case 685:
#line 1714 "asmparse.y"
	{ yyval.int32 = VT_FILETIME; }
#line 12874 "asmparse.cpp"
break;
case 686:
#line 1715 "asmparse.y"
	{ yyval.int32 = VT_BLOB; }
#line 12879 "asmparse.cpp"
break;
case 687:
#line 1716 "asmparse.y"
	{ yyval.int32 = VT_STREAM; }
#line 12884 "asmparse.cpp"
break;
case 688:
#line 1717 "asmparse.y"
	{ yyval.int32 = VT_STORAGE; }
#line 12889 "asmparse.cpp"
break;
case 689:
#line 1718 "asmparse.y"
	{ yyval.int32 = VT_STREAMED_OBJECT; }
#line 12894 "asmparse.cpp"
break;
case 690:
#line 1719 "asmparse.y"
	{ yyval.int32 = VT_STORED_OBJECT; }
#line 12899 "asmparse.cpp"
break;
case 691:
#line 1720 "asmparse.y"
	{ yyval.int32 = VT_BLOB_OBJECT; }
#line 12904 "asmparse.cpp"
break;
case 692:
#line 1721 "asmparse.y"
	{ yyval.int32 = VT_CF; }
#line 12909 "asmparse.cpp"
break;
case 693:
#line 1722 "asmparse.y"
	{ yyval.int32 = VT_CLSID; }
#line 12914 "asmparse.cpp"
break;
case 694:
#line 1726 "asmparse.y"
	{ if(yystack.l_mark[0].token == PASM->m_tkSysString)
                                                                {     yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_STRING); }
                                                                else if(yystack.l_mark[0].token == PASM->m_tkSysObject)
                                                                {     yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_OBJECT); }
                                                                else
                                                                 yyval.binstr = parser->MakeTypeClass(ELEMENT_TYPE_CLASS, yystack.l_mark[0].token); }
#line 12924 "asmparse.cpp"
break;
case 695:
#line 1732 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_OBJECT); }
#line 12929 "asmparse.cpp"
break;
case 696:
#line 1733 "asmparse.y"
	{ yyval.binstr = parser->MakeTypeClass(ELEMENT_TYPE_VALUETYPE, yystack.l_mark[0].token); }
#line 12934 "asmparse.cpp"
break;
case 697:
#line 1734 "asmparse.y"
	{ yyval.binstr = parser->MakeTypeClass(ELEMENT_TYPE_VALUETYPE, yystack.l_mark[0].token); }
#line 12939 "asmparse.cpp"
break;
case 698:
#line 1735 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[0].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_CTARG); }
#line 12944 "asmparse.cpp"
break;
case 699:
#line 1736 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-2].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); }
#line 12949 "asmparse.cpp"
break;
case 700:
#line 1737 "asmparse.y"
	{ yyval.binstr = parser->MakeTypeArray(ELEMENT_TYPE_ARRAY, yystack.l_mark[-3].binstr, yystack.l_mark[-1].binstr); }
#line 12954 "asmparse.cpp"
break;
case 701:
#line 1738 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_BYREF); }
#line 12959 "asmparse.cpp"
break;
case 702:
#line 1739 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_PTR); }
#line 12964 "asmparse.cpp"
break;
case 703:
#line 1740 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-1].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_PINNED); }
#line 12969 "asmparse.cpp"
break;
case 704:
#line 1741 "asmparse.y"
	{ yyval.binstr = parser->MakeTypeClass(ELEMENT_TYPE_CMOD_REQD, yystack.l_mark[-1].token);
                                                                yyval.binstr->append(yystack.l_mark[-4].binstr); }
#line 12975 "asmparse.cpp"
break;
case 705:
#line 1743 "asmparse.y"
	{ yyval.binstr = parser->MakeTypeClass(ELEMENT_TYPE_CMOD_OPT, yystack.l_mark[-1].token);
                                                                yyval.binstr->append(yystack.l_mark[-4].binstr); }
#line 12981 "asmparse.cpp"
break;
case 706:
#line 1746 "asmparse.y"
	{ yyval.binstr = parser->MakeSig(yystack.l_mark[-5].int32, yystack.l_mark[-4].binstr, yystack.l_mark[-1].binstr);
                                                                yyval.binstr->insertInt8(ELEMENT_TYPE_FNPTR);
                                                                PASM->delArgNameList(PASM->m_firstArgName);
                                                                PASM->m_firstArgName = parser->m_ANSFirst.POP();
                                                                PASM->m_lastArgName = parser->m_ANSLast.POP();
                                                              }
#line 12991 "asmparse.cpp"
break;
case 707:
#line 1752 "asmparse.y"
	{ if(yystack.l_mark[-1].binstr == NULL) yyval.binstr = yystack.l_mark[-3].binstr;
                                                                else {
                                                                  yyval.binstr = new BinStr();
                                                                  yyval.binstr->appendInt8(ELEMENT_TYPE_GENERICINST);
                                                                  yyval.binstr->append(yystack.l_mark[-3].binstr);
                                                                  corEmitInt(yyval.binstr, corCountArgs(yystack.l_mark[-1].binstr));
                                                                  yyval.binstr->append(yystack.l_mark[-1].binstr); delete yystack.l_mark[-3].binstr; delete yystack.l_mark[-1].binstr; }}
#line 13002 "asmparse.cpp"
break;
case 708:
#line 1759 "asmparse.y"
	{ /*if(PASM->m_pCurMethod)  {*/
                                                                /*  if(($3 < 0)||((DWORD)$3 >= PASM->m_pCurMethod->m_NumTyPars))*/
                                                                /*    PASM->report->error("Invalid method type parameter '%d'\n",$3);*/
                                                                  yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_MVAR); corEmitInt(yyval.binstr, yystack.l_mark[0].int32);
                                                                /*} else PASM->report->error("Method type parameter '%d' outside method scope\n",$3);*/
                                                              }
#line 13012 "asmparse.cpp"
break;
case 709:
#line 1765 "asmparse.y"
	{ /*if(PASM->m_pCurClass)  {*/
                                                                /*  if(($2 < 0)||((DWORD)$2 >= PASM->m_pCurClass->m_NumTyPars))*/
                                                                /*    PASM->report->error("Invalid type parameter '%d'\n",$2);*/
                                                                  yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_VAR); corEmitInt(yyval.binstr, yystack.l_mark[0].int32);
                                                                /*} else PASM->report->error("Type parameter '%d' outside class scope\n",$2);*/
                                                              }
#line 13022 "asmparse.cpp"
break;
case 710:
#line 1771 "asmparse.y"
	{ int eltype = ELEMENT_TYPE_MVAR;
                                                                int n=-1;
                                                                if(PASM->m_pCurMethod) n = PASM->m_pCurMethod->FindTyPar(yystack.l_mark[0].string);
                                                                else {
                                                                  if(PASM->m_TyParList) n = PASM->m_TyParList->IndexOf(yystack.l_mark[0].string);
                                                                  if(n == -1)
                                                                  { n = TyParFixupList.COUNT();
                                                                    TyParFixupList.PUSH(yystack.l_mark[0].string);
                                                                    eltype = ELEMENT_TYPE_MVARFIXUP;
                                                                  }
                                                                }
                                                                if(n == -1) { PASM->report->error("Invalid method type parameter '%s'\n",yystack.l_mark[0].string);
                                                                n = 0x1FFFFFFF; }
                                                                yyval.binstr = new BinStr(); yyval.binstr->appendInt8(eltype); corEmitInt(yyval.binstr,n);
                                                              }
#line 13041 "asmparse.cpp"
break;
case 711:
#line 1786 "asmparse.y"
	{ int eltype = ELEMENT_TYPE_VAR;
                                                                int n=-1;
                                                                if(PASM->m_pCurClass && !newclass) n = PASM->m_pCurClass->FindTyPar(yystack.l_mark[0].string);
                                                                else {
                                                                  if(PASM->m_TyParList) n = PASM->m_TyParList->IndexOf(yystack.l_mark[0].string);
                                                                  if(n == -1)
                                                                  { n = TyParFixupList.COUNT();
                                                                    TyParFixupList.PUSH(yystack.l_mark[0].string);
                                                                    eltype = ELEMENT_TYPE_VARFIXUP;
                                                                  }
                                                                }
                                                                if(n == -1) { PASM->report->error("Invalid type parameter '%s'\n",yystack.l_mark[0].string);
                                                                n = 0x1FFFFFFF; }
                                                                yyval.binstr = new BinStr(); yyval.binstr->appendInt8(eltype); corEmitInt(yyval.binstr,n);
                                                              }
#line 13060 "asmparse.cpp"
break;
case 712:
#line 1801 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_TYPEDBYREF); }
#line 13065 "asmparse.cpp"
break;
case 713:
#line 1802 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_VOID); }
#line 13070 "asmparse.cpp"
break;
case 714:
#line 1803 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I); }
#line 13075 "asmparse.cpp"
break;
case 715:
#line 1804 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U); }
#line 13080 "asmparse.cpp"
break;
case 716:
#line 1805 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U); }
#line 13085 "asmparse.cpp"
break;
case 717:
#line 1806 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[0].binstr; }
#line 13090 "asmparse.cpp"
break;
case 718:
#line 1807 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[0].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_SENTINEL); }
#line 13095 "asmparse.cpp"
break;
case 719:
#line 1810 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_CHAR); }
#line 13100 "asmparse.cpp"
break;
case 720:
#line 1811 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_STRING); }
#line 13105 "asmparse.cpp"
break;
case 721:
#line 1812 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_BOOLEAN); }
#line 13110 "asmparse.cpp"
break;
case 722:
#line 1813 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I1); }
#line 13115 "asmparse.cpp"
break;
case 723:
#line 1814 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I2); }
#line 13120 "asmparse.cpp"
break;
case 724:
#line 1815 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I4); }
#line 13125 "asmparse.cpp"
break;
case 725:
#line 1816 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I8); }
#line 13130 "asmparse.cpp"
break;
case 726:
#line 1817 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R4); }
#line 13135 "asmparse.cpp"
break;
case 727:
#line 1818 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R8); }
#line 13140 "asmparse.cpp"
break;
case 728:
#line 1819 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U1); }
#line 13145 "asmparse.cpp"
break;
case 729:
#line 1820 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U2); }
#line 13150 "asmparse.cpp"
break;
case 730:
#line 1821 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U4); }
#line 13155 "asmparse.cpp"
break;
case 731:
#line 1822 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U8); }
#line 13160 "asmparse.cpp"
break;
case 732:
#line 1823 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U1); }
#line 13165 "asmparse.cpp"
break;
case 733:
#line 1824 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U2); }
#line 13170 "asmparse.cpp"
break;
case 734:
#line 1825 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U4); }
#line 13175 "asmparse.cpp"
break;
case 735:
#line 1826 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U8); }
#line 13180 "asmparse.cpp"
break;
case 736:
#line 1827 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->append(yystack.l_mark[0].tdd->m_pbsTypeSpec); }
#line 13185 "asmparse.cpp"
break;
case 737:
#line 1830 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[0].binstr; }
#line 13190 "asmparse.cpp"
break;
case 738:
#line 1831 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-2].binstr; yystack.l_mark[-2].binstr->append(yystack.l_mark[0].binstr); delete yystack.l_mark[0].binstr; }
#line 13195 "asmparse.cpp"
break;
case 739:
#line 1834 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt32(0x7FFFFFFF); yyval.binstr->appendInt32(0x7FFFFFFF);  }
#line 13200 "asmparse.cpp"
break;
case 740:
#line 1835 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt32(0x7FFFFFFF); yyval.binstr->appendInt32(0x7FFFFFFF);  }
#line 13205 "asmparse.cpp"
break;
case 741:
#line 1836 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt32(0); yyval.binstr->appendInt32(yystack.l_mark[0].int32); }
#line 13210 "asmparse.cpp"
break;
case 742:
#line 1837 "asmparse.y"
	{ FAIL_UNLESS(yystack.l_mark[-2].int32 <= yystack.l_mark[0].int32, ("lower bound %d must be <= upper bound %d\n", yystack.l_mark[-2].int32, yystack.l_mark[0].int32));
                                                                if (yystack.l_mark[-2].int32 > yystack.l_mark[0].int32) { YYERROR; };
                                                                yyval.binstr = new BinStr(); yyval.binstr->appendInt32(yystack.l_mark[-2].int32); yyval.binstr->appendInt32(yystack.l_mark[0].int32-yystack.l_mark[-2].int32+1); }
#line 13217 "asmparse.cpp"
break;
case 743:
#line 1840 "asmparse.y"
	{ yyval.binstr = new BinStr(); yyval.binstr->appendInt32(yystack.l_mark[-1].int32); yyval.binstr->appendInt32(0x7FFFFFFF); }
#line 13222 "asmparse.cpp"
break;
case 744:
#line 1845 "asmparse.y"
	{ PASM->AddPermissionDecl(yystack.l_mark[-4].secAct, yystack.l_mark[-3].token, yystack.l_mark[-1].pair); }
#line 13227 "asmparse.cpp"
break;
case 745:
#line 1847 "asmparse.y"
	{ PASM->AddPermissionDecl(yystack.l_mark[-5].secAct, yystack.l_mark[-4].token, yystack.l_mark[-1].binstr); }
#line 13232 "asmparse.cpp"
break;
case 746:
#line 1848 "asmparse.y"
	{ PASM->AddPermissionDecl(yystack.l_mark[-1].secAct, yystack.l_mark[0].token, (NVPair *)NULL); }
#line 13237 "asmparse.cpp"
break;
case 747:
#line 1849 "asmparse.y"
	{ PASM->AddPermissionSetDecl(yystack.l_mark[-2].secAct, yystack.l_mark[-1].binstr); }
#line 13242 "asmparse.cpp"
break;
case 748:
#line 1851 "asmparse.y"
	{ PASM->AddPermissionSetDecl(yystack.l_mark[-1].secAct,BinStrToUnicode(yystack.l_mark[0].binstr,true));}
#line 13247 "asmparse.cpp"
break;
case 749:
#line 1853 "asmparse.y"
	{ BinStr* ret = new BinStr();
                                                                ret->insertInt8('.');
                                                                corEmitInt(ret, nSecAttrBlobs);
                                                                ret->append(yystack.l_mark[-1].binstr);
                                                                PASM->AddPermissionSetDecl(yystack.l_mark[-4].secAct,ret);
                                                                nSecAttrBlobs = 0; }
#line 13257 "asmparse.cpp"
break;
case 750:
#line 1861 "asmparse.y"
	{ yyval.binstr = new BinStr(); nSecAttrBlobs = 0;}
#line 13262 "asmparse.cpp"
break;
case 751:
#line 1862 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[0].binstr; nSecAttrBlobs = 1; }
#line 13267 "asmparse.cpp"
break;
case 752:
#line 1863 "asmparse.y"
	{ yyval.binstr = yystack.l_mark[-2].binstr; yyval.binstr->append(yystack.l_mark[0].binstr); nSecAttrBlobs++; }
#line 13272 "asmparse.cpp"
break;
case 753:
#line 1867 "asmparse.y"
	{ yyval.binstr = PASM->EncodeSecAttr(PASM->ReflectionNotation(yystack.l_mark[-4].token),yystack.l_mark[-1].binstr,nCustomBlobNVPairs);
                                                                nCustomBlobNVPairs = 0; }
#line 13278 "asmparse.cpp"
break;
case 754:
#line 1870 "asmparse.y"
	{ yyval.binstr = PASM->EncodeSecAttr(yystack.l_mark[-4].string,yystack.l_mark[-1].binstr,nCustomBlobNVPairs);
                                                                nCustomBlobNVPairs = 0; }
#line 13284 "asmparse.cpp"
break;
case 755:
#line 1874 "asmparse.y"
	{ yyval.secAct = yystack.l_mark[-2].secAct; bParsingByteArray = TRUE; }
#line 13289 "asmparse.cpp"
break;
case 756:
#line 1876 "asmparse.y"
	{ yyval.secAct = yystack.l_mark[-2].secAct; bParsingByteArray = TRUE; }
#line 13294 "asmparse.cpp"
break;
case 757:
#line 1879 "asmparse.y"
	{ yyval.pair = yystack.l_mark[0].pair; }
#line 13299 "asmparse.cpp"
break;
case 758:
#line 1880 "asmparse.y"
	{ yyval.pair = yystack.l_mark[-2].pair->Concat(yystack.l_mark[0].pair); }
#line 13304 "asmparse.cpp"
break;
case 759:
#line 1883 "asmparse.y"
	{ yystack.l_mark[-2].binstr->appendInt8(0); yyval.pair = new NVPair(yystack.l_mark[-2].binstr, yystack.l_mark[0].binstr); }
#line 13309 "asmparse.cpp"
break;
case 760:
#line 1886 "asmparse.y"
	{ yyval.int32 = 1; }
#line 13314 "asmparse.cpp"
break;
case 761:
#line 1887 "asmparse.y"
	{ yyval.int32 = 0; }
#line 13319 "asmparse.cpp"
break;
case 762:
#line 1890 "asmparse.y"
	{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_BOOLEAN);
                                                                yyval.binstr->appendInt8(yystack.l_mark[0].int32); }
#line 13326 "asmparse.cpp"
break;
case 763:
#line 1893 "asmparse.y"
	{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_I4);
                                                                yyval.binstr->appendInt32(yystack.l_mark[0].int32); }
#line 13333 "asmparse.cpp"
break;
case 764:
#line 1896 "asmparse.y"
	{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_I4);
                                                                yyval.binstr->appendInt32(yystack.l_mark[-1].int32); }
#line 13340 "asmparse.cpp"
break;
case 765:
#line 1899 "asmparse.y"
	{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_STRING);
                                                                yyval.binstr->append(yystack.l_mark[0].binstr); delete yystack.l_mark[0].binstr;
                                                                yyval.binstr->appendInt8(0); }
#line 13348 "asmparse.cpp"
break;
case 766:
#line 1903 "asmparse.y"
	{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                char* sz = PASM->ReflectionNotation(yystack.l_mark[-5].token);
                                                                strcpy_s((char *)yyval.binstr->getBuff((unsigned)strlen(sz) + 1), strlen(sz) + 1,sz);
                                                                yyval.binstr->appendInt8(1);
                                                                yyval.binstr->appendInt32(yystack.l_mark[-1].int32); }
#line 13358 "asmparse.cpp"
break;
case 767:
#line 1909 "asmparse.y"
	{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                char* sz = PASM->ReflectionNotation(yystack.l_mark[-5].token);
                                                                strcpy_s((char *)yyval.binstr->getBuff((unsigned)strlen(sz) + 1), strlen(sz) + 1,sz);
                                                                yyval.binstr->appendInt8(2);
                                                                yyval.binstr->appendInt32(yystack.l_mark[-1].int32); }
#line 13368 "asmparse.cpp"
break;
case 768:
#line 1915 "asmparse.y"
	{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                char* sz = PASM->ReflectionNotation(yystack.l_mark[-5].token);
                                                                strcpy_s((char *)yyval.binstr->getBuff((unsigned)strlen(sz) + 1), strlen(sz) + 1,sz);
                                                                yyval.binstr->appendInt8(4);
                                                                yyval.binstr->appendInt32(yystack.l_mark[-1].int32); }
#line 13378 "asmparse.cpp"
break;
case 769:
#line 1921 "asmparse.y"
	{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                char* sz = PASM->ReflectionNotation(yystack.l_mark[-3].token);
                                                                strcpy_s((char *)yyval.binstr->getBuff((unsigned)strlen(sz) + 1), strlen(sz) + 1,sz);
                                                                yyval.binstr->appendInt8(4);
                                                                yyval.binstr->appendInt32(yystack.l_mark[-1].int32); }
#line 13388 "asmparse.cpp"
break;
case 770:
#line 1929 "asmparse.y"
	{ yyval.secAct = dclRequest; }
#line 13393 "asmparse.cpp"
break;
case 771:
#line 1930 "asmparse.y"
	{ yyval.secAct = dclDemand; }
#line 13398 "asmparse.cpp"
break;
case 772:
#line 1931 "asmparse.y"
	{ yyval.secAct = dclAssert; }
#line 13403 "asmparse.cpp"
break;
case 773:
#line 1932 "asmparse.y"
	{ yyval.secAct = dclDeny; }
#line 13408 "asmparse.cpp"
break;
case 774:
#line 1933 "asmparse.y"
	{ yyval.secAct = dclPermitOnly; }
#line 13413 "asmparse.cpp"
break;
case 775:
#line 1934 "asmparse.y"
	{ yyval.secAct = dclLinktimeCheck; }
#line 13418 "asmparse.cpp"
break;
case 776:
#line 1935 "asmparse.y"
	{ yyval.secAct = dclInheritanceCheck; }
#line 13423 "asmparse.cpp"
break;
case 777:
#line 1936 "asmparse.y"
	{ yyval.secAct = dclRequestMinimum; }
#line 13428 "asmparse.cpp"
break;
case 778:
#line 1937 "asmparse.y"
	{ yyval.secAct = dclRequestOptional; }
#line 13433 "asmparse.cpp"
break;
case 779:
#line 1938 "asmparse.y"
	{ yyval.secAct = dclRequestRefuse; }
#line 13438 "asmparse.cpp"
break;
case 780:
#line 1939 "asmparse.y"
	{ yyval.secAct = dclPrejitGrant; }
#line 13443 "asmparse.cpp"
break;
case 781:
#line 1940 "asmparse.y"
	{ yyval.secAct = dclPrejitDenied; }
#line 13448 "asmparse.cpp"
break;
case 782:
#line 1941 "asmparse.y"
	{ yyval.secAct = dclNonCasDemand; }
#line 13453 "asmparse.cpp"
break;
case 783:
#line 1942 "asmparse.y"
	{ yyval.secAct = dclNonCasLinkDemand; }
#line 13458 "asmparse.cpp"
break;
case 784:
#line 1943 "asmparse.y"
	{ yyval.secAct = dclNonCasInheritance; }
#line 13463 "asmparse.cpp"
break;
case 785:
#line 1947 "asmparse.y"
	{ PASM->ResetLineNumbers(); nCurrPC = PASM->m_CurPC; PENV->bExternSource = TRUE; PENV->bExternSourceAutoincrement = FALSE; }
#line 13468 "asmparse.cpp"
break;
case 786:
#line 1948 "asmparse.y"
	{ PASM->ResetLineNumbers(); nCurrPC = PASM->m_CurPC; PENV->bExternSource = TRUE; PENV->bExternSourceAutoincrement = TRUE; }
#line 13473 "asmparse.cpp"
break;
case 787:
#line 1951 "asmparse.y"
	{ PENV->nExtLine = PENV->nExtLineEnd = yystack.l_mark[-1].int32;
                                                                PENV->nExtCol = 0; PENV->nExtColEnd  = static_cast<unsigned>(-1);
                                                                PASM->SetSourceFileName(yystack.l_mark[0].string);}
#line 13480 "asmparse.cpp"
break;
case 788:
#line 1954 "asmparse.y"
	{ PENV->nExtLine = PENV->nExtLineEnd = yystack.l_mark[0].int32;
                                                                PENV->nExtCol = 0; PENV->nExtColEnd  = static_cast<unsigned>(-1); }
#line 13486 "asmparse.cpp"
break;
case 789:
#line 1956 "asmparse.y"
	{ PENV->nExtLine = PENV->nExtLineEnd = yystack.l_mark[-3].int32;
                                                                PENV->nExtCol=yystack.l_mark[-1].int32; PENV->nExtColEnd = static_cast<unsigned>(-1);
                                                                PASM->SetSourceFileName(yystack.l_mark[0].string);}
#line 13493 "asmparse.cpp"
break;
case 790:
#line 1959 "asmparse.y"
	{ PENV->nExtLine = PENV->nExtLineEnd = yystack.l_mark[-2].int32;
                                                                PENV->nExtCol=yystack.l_mark[0].int32; PENV->nExtColEnd = static_cast<unsigned>(-1);}
#line 13499 "asmparse.cpp"
break;
case 791:
#line 1962 "asmparse.y"
	{ PENV->nExtLine = PENV->nExtLineEnd = yystack.l_mark[-5].int32;
                                                                PENV->nExtCol=yystack.l_mark[-3].int32; PENV->nExtColEnd = yystack.l_mark[-1].int32;
                                                                PASM->SetSourceFileName(yystack.l_mark[0].string);}
#line 13506 "asmparse.cpp"
break;
case 792:
#line 1966 "asmparse.y"
	{ PENV->nExtLine = PENV->nExtLineEnd = yystack.l_mark[-4].int32;
                                                                PENV->nExtCol=yystack.l_mark[-2].int32; PENV->nExtColEnd = yystack.l_mark[0].int32; }
#line 13512 "asmparse.cpp"
break;
case 793:
#line 1969 "asmparse.y"
	{ PENV->nExtLine = yystack.l_mark[-5].int32; PENV->nExtLineEnd = yystack.l_mark[-3].int32;
                                                                PENV->nExtCol=yystack.l_mark[-1].int32; PENV->nExtColEnd = static_cast<unsigned>(-1);
                                                                PASM->SetSourceFileName(yystack.l_mark[0].string);}
#line 13519 "asmparse.cpp"
break;
case 794:
#line 1973 "asmparse.y"
	{ PENV->nExtLine = yystack.l_mark[-4].int32; PENV->nExtLineEnd = yystack.l_mark[-2].int32;
                                                                PENV->nExtCol=yystack.l_mark[0].int32; PENV->nExtColEnd = static_cast<unsigned>(-1); }
#line 13525 "asmparse.cpp"
break;
case 795:
#line 1976 "asmparse.y"
	{ PENV->nExtLine = yystack.l_mark[-7].int32; PENV->nExtLineEnd = yystack.l_mark[-5].int32;
                                                                PENV->nExtCol=yystack.l_mark[-3].int32; PENV->nExtColEnd = yystack.l_mark[-1].int32;
                                                                PASM->SetSourceFileName(yystack.l_mark[0].string);}
#line 13532 "asmparse.cpp"
break;
case 796:
#line 1980 "asmparse.y"
	{ PENV->nExtLine = yystack.l_mark[-6].int32; PENV->nExtLineEnd = yystack.l_mark[-4].int32;
                                                                PENV->nExtCol=yystack.l_mark[-2].int32; PENV->nExtColEnd = yystack.l_mark[0].int32; }
#line 13538 "asmparse.cpp"
break;
case 797:
#line 1982 "asmparse.y"
	{ PENV->nExtLine = PENV->nExtLineEnd = yystack.l_mark[-1].int32 - 1;
                                                                PENV->nExtCol = 0; PENV->nExtColEnd = static_cast<unsigned>(-1);
                                                                PASM->SetSourceFileName(yystack.l_mark[0].binstr);}
#line 13545 "asmparse.cpp"
break;
case 798:
#line 1989 "asmparse.y"
	{ PASMM->AddFile(yystack.l_mark[-5].string, yystack.l_mark[-6].fileAttr|yystack.l_mark[-4].fileAttr|yystack.l_mark[0].fileAttr, yystack.l_mark[-2].binstr); }
#line 13550 "asmparse.cpp"
break;
case 799:
#line 1990 "asmparse.y"
	{ PASMM->AddFile(yystack.l_mark[-1].string, yystack.l_mark[-2].fileAttr|yystack.l_mark[0].fileAttr, NULL); }
#line 13555 "asmparse.cpp"
break;
case 800:
#line 1993 "asmparse.y"
	{ yyval.fileAttr = (CorFileFlags) 0; }
#line 13560 "asmparse.cpp"
break;
case 801:
#line 1994 "asmparse.y"
	{ yyval.fileAttr = (CorFileFlags) (yystack.l_mark[-1].fileAttr | ffContainsNoMetaData); }
#line 13565 "asmparse.cpp"
break;
case 802:
#line 1997 "asmparse.y"
	{ yyval.fileAttr = (CorFileFlags) 0; }
#line 13570 "asmparse.cpp"
break;
case 803:
#line 1998 "asmparse.y"
	{ yyval.fileAttr = (CorFileFlags) 0x80000000; }
#line 13575 "asmparse.cpp"
break;
case 804:
#line 2001 "asmparse.y"
	{ bParsingByteArray = TRUE; }
#line 13580 "asmparse.cpp"
break;
case 805:
#line 2004 "asmparse.y"
	{ PASMM->StartAssembly(yystack.l_mark[0].string, NULL, (DWORD)yystack.l_mark[-1].asmAttr, FALSE); }
#line 13585 "asmparse.cpp"
break;
case 806:
#line 2007 "asmparse.y"
	{ yyval.asmAttr = (CorAssemblyFlags) 0; }
#line 13590 "asmparse.cpp"
break;
case 807:
#line 2008 "asmparse.y"
	{ yyval.asmAttr = (CorAssemblyFlags) (yystack.l_mark[-1].asmAttr | afRetargetable); }
#line 13595 "asmparse.cpp"
break;
case 808:
#line 2009 "asmparse.y"
	{ yyval.asmAttr = (CorAssemblyFlags) (yystack.l_mark[-1].asmAttr | afContentType_WindowsRuntime); }
#line 13600 "asmparse.cpp"
break;
case 809:
#line 2010 "asmparse.y"
	{ yyval.asmAttr = (CorAssemblyFlags) (yystack.l_mark[-1].asmAttr | afPA_NoPlatform); }
#line 13605 "asmparse.cpp"
break;
case 810:
#line 2011 "asmparse.y"
	{ yyval.asmAttr = yystack.l_mark[-2].asmAttr; }
#line 13610 "asmparse.cpp"
break;
case 811:
#line 2012 "asmparse.y"
	{ SET_PA(yyval.asmAttr,yystack.l_mark[-1].asmAttr,afPA_MSIL); }
#line 13615 "asmparse.cpp"
break;
case 812:
#line 2013 "asmparse.y"
	{ SET_PA(yyval.asmAttr,yystack.l_mark[-1].asmAttr,afPA_x86); }
#line 13620 "asmparse.cpp"
break;
case 813:
#line 2014 "asmparse.y"
	{ SET_PA(yyval.asmAttr,yystack.l_mark[-1].asmAttr,afPA_AMD64); }
#line 13625 "asmparse.cpp"
break;
case 814:
#line 2015 "asmparse.y"
	{ SET_PA(yyval.asmAttr,yystack.l_mark[-1].asmAttr,afPA_ARM); }
#line 13630 "asmparse.cpp"
break;
case 815:
#line 2016 "asmparse.y"
	{ SET_PA(yyval.asmAttr,yystack.l_mark[-1].asmAttr,afPA_ARM64); }
#line 13635 "asmparse.cpp"
break;
case 818:
#line 2023 "asmparse.y"
	{ PASMM->SetAssemblyHashAlg(yystack.l_mark[0].int32); }
#line 13640 "asmparse.cpp"
break;
case 821:
#line 2028 "asmparse.y"
	{ yyval.int32 = yystack.l_mark[0].int32; }
#line 13645 "asmparse.cpp"
break;
case 822:
#line 2029 "asmparse.y"
	{ yyval.int32 = 0xFFFF; }
#line 13650 "asmparse.cpp"
break;
case 823:
#line 2032 "asmparse.y"
	{ PASMM->SetAssemblyPublicKey(yystack.l_mark[-1].binstr); }
#line 13655 "asmparse.cpp"
break;
case 824:
#line 2034 "asmparse.y"
	{ PASMM->SetAssemblyVer((USHORT)yystack.l_mark[-6].int32, (USHORT)yystack.l_mark[-4].int32, (USHORT)yystack.l_mark[-2].int32, (USHORT)yystack.l_mark[0].int32); }
#line 13660 "asmparse.cpp"
break;
case 825:
#line 2035 "asmparse.y"
	{ yystack.l_mark[0].binstr->appendInt8(0); PASMM->SetAssemblyLocale(yystack.l_mark[0].binstr,TRUE); }
#line 13665 "asmparse.cpp"
break;
case 826:
#line 2036 "asmparse.y"
	{ PASMM->SetAssemblyLocale(yystack.l_mark[-1].binstr,FALSE); }
#line 13670 "asmparse.cpp"
break;
case 829:
#line 2041 "asmparse.y"
	{ bParsingByteArray = TRUE; }
#line 13675 "asmparse.cpp"
break;
case 830:
#line 2044 "asmparse.y"
	{ bParsingByteArray = TRUE; }
#line 13680 "asmparse.cpp"
break;
case 831:
#line 2047 "asmparse.y"
	{ bParsingByteArray = TRUE; }
#line 13685 "asmparse.cpp"
break;
case 832:
#line 2051 "asmparse.y"
	{ PASMM->StartAssembly(yystack.l_mark[0].string, NULL, yystack.l_mark[-1].asmAttr, TRUE); }
#line 13690 "asmparse.cpp"
break;
case 833:
#line 2053 "asmparse.y"
	{ PASMM->StartAssembly(yystack.l_mark[-2].string, yystack.l_mark[0].string, yystack.l_mark[-3].asmAttr, TRUE); }
#line 13695 "asmparse.cpp"
break;
case 836:
#line 2060 "asmparse.y"
	{ PASMM->SetAssemblyHashBlob(yystack.l_mark[-1].binstr); }
#line 13700 "asmparse.cpp"
break;
case 838:
#line 2062 "asmparse.y"
	{ PASMM->SetAssemblyPublicKeyToken(yystack.l_mark[-1].binstr); }
#line 13705 "asmparse.cpp"
break;
case 839:
#line 2063 "asmparse.y"
	{ PASMM->SetAssemblyAutodetect(); }
#line 13710 "asmparse.cpp"
break;
case 840:
#line 2066 "asmparse.y"
	{ PASMM->StartComType(yystack.l_mark[0].string, yystack.l_mark[-1].exptAttr);}
#line 13715 "asmparse.cpp"
break;
case 841:
#line 2069 "asmparse.y"
	{ PASMM->StartComType(yystack.l_mark[0].string, yystack.l_mark[-1].exptAttr); }
#line 13720 "asmparse.cpp"
break;
case 842:
#line 2072 "asmparse.y"
	{ yyval.exptAttr = (CorTypeAttr) 0; }
#line 13725 "asmparse.cpp"
break;
case 843:
#line 2073 "asmparse.y"
	{ yyval.exptAttr = (CorTypeAttr) (yystack.l_mark[-1].exptAttr | tdNotPublic); }
#line 13730 "asmparse.cpp"
break;
case 844:
#line 2074 "asmparse.y"
	{ yyval.exptAttr = (CorTypeAttr) (yystack.l_mark[-1].exptAttr | tdPublic); }
#line 13735 "asmparse.cpp"
break;
case 845:
#line 2075 "asmparse.y"
	{ yyval.exptAttr = (CorTypeAttr) (yystack.l_mark[-1].exptAttr | tdForwarder); }
#line 13740 "asmparse.cpp"
break;
case 846:
#line 2076 "asmparse.y"
	{ yyval.exptAttr = (CorTypeAttr) (yystack.l_mark[-2].exptAttr | tdNestedPublic); }
#line 13745 "asmparse.cpp"
break;
case 847:
#line 2077 "asmparse.y"
	{ yyval.exptAttr = (CorTypeAttr) (yystack.l_mark[-2].exptAttr | tdNestedPrivate); }
#line 13750 "asmparse.cpp"
break;
case 848:
#line 2078 "asmparse.y"
	{ yyval.exptAttr = (CorTypeAttr) (yystack.l_mark[-2].exptAttr | tdNestedFamily); }
#line 13755 "asmparse.cpp"
break;
case 849:
#line 2079 "asmparse.y"
	{ yyval.exptAttr = (CorTypeAttr) (yystack.l_mark[-2].exptAttr | tdNestedAssembly); }
#line 13760 "asmparse.cpp"
break;
case 850:
#line 2080 "asmparse.y"
	{ yyval.exptAttr = (CorTypeAttr) (yystack.l_mark[-2].exptAttr | tdNestedFamANDAssem); }
#line 13765 "asmparse.cpp"
break;
case 851:
#line 2081 "asmparse.y"
	{ yyval.exptAttr = (CorTypeAttr) (yystack.l_mark[-2].exptAttr | tdNestedFamORAssem); }
#line 13770 "asmparse.cpp"
break;
case 854:
#line 2088 "asmparse.y"
	{ PASMM->SetComTypeFile(yystack.l_mark[0].string); }
#line 13775 "asmparse.cpp"
break;
case 855:
#line 2089 "asmparse.y"
	{ PASMM->SetComTypeComType(yystack.l_mark[0].string); }
#line 13780 "asmparse.cpp"
break;
case 856:
#line 2090 "asmparse.y"
	{ PASMM->SetComTypeAsmRef(yystack.l_mark[0].string); }
#line 13785 "asmparse.cpp"
break;
case 857:
#line 2091 "asmparse.y"
	{ if(!PASMM->SetComTypeImplementationTok(yystack.l_mark[-1].int32))
                                                                  PASM->report->error("Invalid implementation of exported type\n"); }
#line 13791 "asmparse.cpp"
break;
case 858:
#line 2093 "asmparse.y"
	{ if(!PASMM->SetComTypeClassTok(yystack.l_mark[0].int32))
                                                                  PASM->report->error("Invalid TypeDefID of exported type\n"); }
#line 13797 "asmparse.cpp"
break;
case 861:
#line 2099 "asmparse.y"
	{ PASMM->StartManifestRes(yystack.l_mark[0].string, yystack.l_mark[0].string, yystack.l_mark[-1].manresAttr); }
#line 13802 "asmparse.cpp"
break;
case 862:
#line 2101 "asmparse.y"
	{ PASMM->StartManifestRes(yystack.l_mark[-2].string, yystack.l_mark[0].string, yystack.l_mark[-3].manresAttr); }
#line 13807 "asmparse.cpp"
break;
case 863:
#line 2104 "asmparse.y"
	{ yyval.manresAttr = (CorManifestResourceFlags) 0; }
#line 13812 "asmparse.cpp"
break;
case 864:
#line 2105 "asmparse.y"
	{ yyval.manresAttr = (CorManifestResourceFlags) (yystack.l_mark[-1].manresAttr | mrPublic); }
#line 13817 "asmparse.cpp"
break;
case 865:
#line 2106 "asmparse.y"
	{ yyval.manresAttr = (CorManifestResourceFlags) (yystack.l_mark[-1].manresAttr | mrPrivate); }
#line 13822 "asmparse.cpp"
break;
case 868:
#line 2113 "asmparse.y"
	{ PASMM->SetManifestResFile(yystack.l_mark[-2].string, (ULONG)yystack.l_mark[0].int32); }
#line 13827 "asmparse.cpp"
break;
case 869:
#line 2114 "asmparse.y"
	{ PASMM->SetManifestResAsmRef(yystack.l_mark[0].string); }
#line 13832 "asmparse.cpp"
break;
#line 13834 "asmparse.cpp"
    default:
        break;
    }
    yystack.s_mark -= yym;
    yystate = *yystack.s_mark;
    yystack.l_mark -= yym;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    yystack.p_mark -= yym;
#endif
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
        {
            fprintf(stderr, "%s[%d]: after reduction, ", YYDEBUGSTR, yydepth);
#ifdef YYSTYPE_TOSTRING
#if YYBTYACC
            if (!yytrial)
#endif /* YYBTYACC */
                fprintf(stderr, "result is <%s>, ", YYSTYPE_TOSTRING(yystos[YYFINAL], yyval));
#endif
            fprintf(stderr, "shifting from state 0 to final state %d\n", YYFINAL);
        }
#endif
        yystate = YYFINAL;
        *++yystack.s_mark = YYFINAL;
        *++yystack.l_mark = yyval;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
        *++yystack.p_mark = yyloc;
#endif
        if (yychar < 0)
        {
#if YYBTYACC
            do {
            if (yylvp < yylve)
            {
                /* we're currently re-reading tokens */
                yylval = *yylvp++;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                yylloc = *yylpp++;
#endif
                yychar = *yylexp++;
                break;
            }
            if (yyps->save)
            {
                /* in trial mode; save scanner results for future parse attempts */
                if (yylvp == yylvlim)
                {   /* Enlarge lexical value queue */
                    size_t p = (size_t) (yylvp - yylvals);
                    size_t s = (size_t) (yylvlim - yylvals);

                    s += YYLVQUEUEGROWTH;
                    if ((yylexemes = (YYINT *)realloc(yylexemes, s * sizeof(YYINT))) == NULL)
                        goto yyenomem;
                    if ((yylvals   = (YYSTYPE *)realloc(yylvals, s * sizeof(YYSTYPE))) == NULL)
                        goto yyenomem;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                    if ((yylpsns   = (YYLTYPE *)realloc(yylpsns, s * sizeof(YYLTYPE))) == NULL)
                        goto yyenomem;
#endif
                    yylvp   = yylve = yylvals + p;
                    yylvlim = yylvals + s;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                    yylpp   = yylpe = yylpsns + p;
                    yylplim = yylpsns + s;
#endif
                    yylexp  = yylexemes + p;
                }
                *yylexp = (YYINT) YYLEX;
                *yylvp++ = yylval;
                yylve++;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                *yylpp++ = yylloc;
                yylpe++;
#endif
                yychar = *yylexp++;
                break;
            }
            /* normal operation, no conflict encountered */
#endif /* YYBTYACC */
            yychar = YYLEX;
#if YYBTYACC
            } while (0);
#endif /* YYBTYACC */
            if (yychar < 0) yychar = YYEOF;
#if YYDEBUG
            if (yydebug)
            {
                if ((yys = yyname[YYTRANSLATE(yychar)]) == NULL) yys = yyname[YYUNDFTOKEN];
                fprintf(stderr, "%s[%d]: state %d, reading token %d (%s)\n",
                                YYDEBUGSTR, yydepth, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == YYEOF) goto yyaccept;
        goto yyloop;
    }
    if (((yyn = yygindex[yym]) != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == (YYINT) yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
    {
        fprintf(stderr, "%s[%d]: after reduction, ", YYDEBUGSTR, yydepth);
#ifdef YYSTYPE_TOSTRING
#if YYBTYACC
        if (!yytrial)
#endif /* YYBTYACC */
            fprintf(stderr, "result is <%s>, ", YYSTYPE_TOSTRING(yystos[yystate], yyval));
#endif
        fprintf(stderr, "shifting from state %d to state %d\n", *yystack.s_mark, yystate);
    }
#endif
    if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack) == YYENOMEM) goto yyoverflow;
    *++yystack.s_mark = (YYINT) yystate;
    *++yystack.l_mark = yyval;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    *++yystack.p_mark = yyloc;
#endif
    goto yyloop;
#if YYBTYACC

    /* Reduction declares that this path is valid. Set yypath and do a full parse */
yyvalid:
    if (yypath) YYABORT;
    while (yyps->save)
    {
        YYParseState *save = yyps->save;
        yyps->save = save->save;
        save->save = yypath;
        yypath = save;
    }
#if YYDEBUG
    if (yydebug)
        fprintf(stderr, "%s[%d]: state %d, CONFLICT trial successful, backtracking to state %d, %d tokens\n",
                        YYDEBUGSTR, yydepth, yystate, yypath->state, (int)(yylvp - yylvals - yypath->lexeme));
#endif
    if (yyerrctx)
    {
        yyFreeState(yyerrctx);
        yyerrctx = NULL;
    }
    yylvp          = yylvals + yypath->lexeme;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    yylpp          = yylpsns + yypath->lexeme;
#endif
    yylexp         = yylexemes + yypath->lexeme;
    yychar         = YYEMPTY;
    yystack.s_mark = yystack.s_base + (yypath->yystack.s_mark - yypath->yystack.s_base);
    memcpy (yystack.s_base, yypath->yystack.s_base, (size_t) (yystack.s_mark - yystack.s_base + 1) * sizeof(YYINT));
    yystack.l_mark = yystack.l_base + (yypath->yystack.l_mark - yypath->yystack.l_base);
    memcpy (yystack.l_base, yypath->yystack.l_base, (size_t) (yystack.l_mark - yystack.l_base + 1) * sizeof(YYSTYPE));
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    yystack.p_mark = yystack.p_base + (yypath->yystack.p_mark - yypath->yystack.p_base);
    memcpy (yystack.p_base, yypath->yystack.p_base, (size_t) (yystack.p_mark - yystack.p_base + 1) * sizeof(YYLTYPE));
#endif
    yystate        = yypath->state;
    goto yyloop;
#endif /* YYBTYACC */

yyoverflow:
    YYERROR_CALL("yacc stack overflow");
#if YYBTYACC
    goto yyabort_nomem;
yyenomem:
    YYERROR_CALL("memory exhausted");
yyabort_nomem:
#endif /* YYBTYACC */
    yyresult = 2;
    goto yyreturn;

yyabort:
    yyresult = 1;
    goto yyreturn;

yyaccept:
#if YYBTYACC
    if (yyps->save) goto yyvalid;
#endif /* YYBTYACC */
    yyresult = 0;

yyreturn:
#if defined(YYDESTRUCT_CALL)
    if (yychar != YYEOF && yychar != YYEMPTY)
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
        YYDESTRUCT_CALL("cleanup: discarding token", yychar, &yylval, &yylloc);
#else
        YYDESTRUCT_CALL("cleanup: discarding token", yychar, &yylval);
#endif /* defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED) */

    {
        YYSTYPE *pv;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
        YYLTYPE *pp;

        for (pv = yystack.l_base, pp = yystack.p_base; pv <= yystack.l_mark; ++pv, ++pp)
             YYDESTRUCT_CALL("cleanup: discarding state",
                             yystos[*(yystack.s_base + (pv - yystack.l_base))], pv, pp);
#else
        for (pv = yystack.l_base; pv <= yystack.l_mark; ++pv)
             YYDESTRUCT_CALL("cleanup: discarding state",
                             yystos[*(yystack.s_base + (pv - yystack.l_base))], pv);
#endif /* defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED) */
    }
#endif /* defined(YYDESTRUCT_CALL) */

#if YYBTYACC
    if (yyerrctx)
    {
        yyFreeState(yyerrctx);
        yyerrctx = NULL;
    }
    while (yyps)
    {
        YYParseState *save = yyps;
        yyps = save->save;
        save->save = NULL;
        yyFreeState(save);
    }
    while (yypath)
    {
        YYParseState *save = yypath;
        yypath = save->save;
        save->save = NULL;
        yyFreeState(save);
    }
#endif /* YYBTYACC */
    yyfreestack(&yystack);
    return (yyresult);
}
